[["Map",1,2,9,10,92,93],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.8.2","content-config-digest","5e97162adcda92ac","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://karlyn.icu\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"always\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"prefetch\":{\"prefetchAll\":true,\"defaultStrategy\":\"viewport\"},\"image\":{\"endpoint\":{\"route\":\"/_image/\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[\"image.radishzz.cc\"],\"remotePatterns\":[{\"protocol\":\"https\"}],\"experimentalDefaultStyles\":true},\"devToolbar\":{\"enabled\":false},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{\"light\":\"github-light\",\"dark\":\"github-dark\"},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null,null,null],\"rehypePlugins\":[null,null,null,null,null,[null,{\"behavior\":\"append\",\"test\":[\"h1\",\"h2\",\"h3\",\"h4\"],\"content\":{\"type\":\"element\",\"tagName\":\"svg\",\"properties\":{\"viewBox\":\"0 0 24 24\",\"aria-hidden\":\"true\",\"fill\":\"currentColor\"},\"children\":[{\"type\":\"element\",\"tagName\":\"path\",\"properties\":{\"d\":\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\"}},{\"type\":\"element\",\"tagName\":\"path\",\"properties\":{\"d\":\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\"}}]}}],[null,{\"target\":\"_blank\",\"rel\":[\"nofollow\",\"noopener\",\"noreferrer\",\"external\"],\"protocols\":[\"http\",\"https\",\"mailto\"]}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"i18n\":{\"defaultLocale\":\"zh\",\"locales\":[{\"path\":\"de\",\"codes\":[\"de-DE\"]},{\"path\":\"en\",\"codes\":[\"en-US\"]},{\"path\":\"es\",\"codes\":[\"es-ES\"]},{\"path\":\"fr\",\"codes\":[\"fr-FR\"]},{\"path\":\"ja\",\"codes\":[\"ja-JP\"]},{\"path\":\"ko\",\"codes\":[\"ko-KR\"]},{\"path\":\"pl\",\"codes\":[\"pl-PL\"]},{\"path\":\"pt\",\"codes\":[\"pt-BR\"]},{\"path\":\"ru\",\"codes\":[\"ru-RU\"]},{\"path\":\"zh\",\"codes\":[\"zh-CN\"]},{\"path\":\"zh-tw\",\"codes\":[\"zh-TW\"]}],\"routing\":{\"prefixDefaultLocale\":false,\"redirectToDefaultLocale\":true,\"fallbackType\":\"redirect\"}},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","about",["Map",11,12,27,28,40,41,53,54,66,67,79,80],"about-es",{"id":11,"data":13,"body":15,"filePath":16,"digest":17,"rendered":18},{"lang":14},"es","年年岁岁花相似。\n\n活得开心，我的朋友们。","src/content/about/about-es.md","9af827d36a040583",{"html":19,"metadata":20},"\u003Cp>年年岁岁花相似。\u003C/p>\n\u003Cp>活得开心，我的朋友们。\u003C/p>",{"headings":21,"localImagePaths":22,"remoteImagePaths":23,"frontmatter":24,"imagePaths":26},[],[],[],{"lang":14,"minutes":25},1,[],"about-ja",{"id":27,"data":29,"body":15,"filePath":31,"digest":32,"rendered":33},{"lang":30},"ja","src/content/about/about-ja.md","05d070fe5634b18f",{"html":19,"metadata":34},{"headings":35,"localImagePaths":36,"remoteImagePaths":37,"frontmatter":38,"imagePaths":39},[],[],[],{"lang":30,"minutes":25},[],"about-zh",{"id":40,"data":42,"body":15,"filePath":44,"digest":45,"rendered":46},{"lang":43},"zh","src/content/about/about-zh.md","419a59e0856599af",{"html":19,"metadata":47},{"headings":48,"localImagePaths":49,"remoteImagePaths":50,"frontmatter":51,"imagePaths":52},[],[],[],{"lang":43,"minutes":25},[],"about-en",{"id":53,"data":55,"body":15,"filePath":57,"digest":58,"rendered":59},{"lang":56},"en","src/content/about/about-en.md","2fbd9b42d2264f19",{"html":19,"metadata":60},{"headings":61,"localImagePaths":62,"remoteImagePaths":63,"frontmatter":64,"imagePaths":65},[],[],[],{"lang":56,"minutes":25},[],"about-ru",{"id":66,"data":68,"body":15,"filePath":70,"digest":71,"rendered":72},{"lang":69},"ru","src/content/about/about-ru.md","4bda56d86072e12a",{"html":19,"metadata":73},{"headings":74,"localImagePaths":75,"remoteImagePaths":76,"frontmatter":77,"imagePaths":78},[],[],[],{"lang":69,"minutes":25},[],"about-zh-tw",{"id":79,"data":81,"body":15,"filePath":83,"digest":84,"rendered":85},{"lang":82},"zh-tw","src/content/about/about-zh-tw.md","24c9d6f0d22962f6",{"html":19,"metadata":86},{"headings":87,"localImagePaths":88,"remoteImagePaths":89,"frontmatter":90,"imagePaths":91},[],[],[],{"lang":82,"minutes":25},[],"posts",["Map",94,95,148,149,179,180,218,219,265,266,316,317,362,363,421,422,481,482,530,531,569,570,608,609],"origin/2025-03-28-轻量云服务器结合rabbitmq实现调用本地ai接口",{"id":94,"data":96,"body":108,"filePath":109,"digest":110,"rendered":111},{"title":97,"published":98,"description":99,"tags":100,"draft":103,"pin":104,"toc":105,"lang":106,"abbrlink":107},"轻量云服务器结合RabbitMQ实现调用本地AI接口",["Date","2025-03-28T20:50:42.000Z"],"如果有一个部署在在公网上的服务端，但是算力不支持部署DeepSeek，但是本地有一个机器可以部署，可以尝试用RabbitMQ来提供消息的中转，充当RPC调用的服务。",[101,102],"Java","消息队列",false,0,true,"","deepseek","# 背景\n\n我有一个仿微信的IM聊天项目，但是想做出一点新的东西，AI这个风口上所以还是想看看能不能做点AI接口的调用。但是直接调用官方接口意义不大，其实本质上来说，本地用Ollama部署完然后本地调用本地接口其实也不算很有难度的事情。\n\n但是恰好我的IM项目就有这么一点——需要支持跨服务器之间的消息发送，所以设计了一个发布订阅的中间件来进行服务器上某个节点的消息扩散到其他服务器上，这样就天然支持了一件事情，就是A服务器的任务，如果被B服务器处理了，依然可以发送回到A服务器。\n\n## 简单展示\n\n客户端发送消息给服务端，我的服务端是京东云的一个轻量级服务器，2G内存的那种。\n\n现在我在客户端给服务端发一条消息，这时候我没关我本地的服务器啊，也就是说，我本地有个能处理AI图片的服务器挂在那里消费消息队列，这时候有正常的响应（别介意，不是32B，只是我当时觉得能跑，但是确实太慢了，后面我直接换1.5b了）\n\n![客户端发消息](/picture/ai_message.png)\n\n这时候我们看看我京东云的日志，可以看到，有一条日志说消息队列消息增加，这是我在消息进入交换机的时候打的一个log，证明这条消息在不同服务器上扩散了，这时候就要去自己服务器上把这条消息发给对应的人，如果自己维护的WebSocketChannel里没有，就直接不管了。\n\n```java\n@RabbitListener(queues = \"${rabbit.queue.message}\")\nprivate void Listener(String msg, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG) long tag) throws IOException {\n    MessageSendDto sendDto = JsonUtils.convertJson2Obj(msg, MessageSendDto.class);\n    log.info(\"消息队列收到消息\");\n    log.info(msg);\n    channelContextUtils.sendMessage(sendDto);\n    channel.basicAck(tag, false);\n}\n```\n\n这条消息直接被丢弃了，但是因为是机器人，所以我们同时把它加到了机器人对应的消息队列里，但是我们京东云的日志并没有后续的处理。日志如下：\n\n![京东云日志](/picture/jd_log.png)\n\n但是我们本地处理了，这是我本地运行jar包的输出\n\n![本地输出](/picture/local_log.png)\n\n这是消息队列的消费情况。\n\n![消息队列](/picture/mq1.png)\n\n这时候如果我们停掉本地的服务器，消息就会堆积在消息队列里等待有能力处理的服务器上线。\n\n![消息队列](/picture/mq2.png)\n\n自然也不会给用户消息反馈。\n\n![客户端发消息](/picture/ai_message2.png)\n\n# 技术选型\n\n为了后续扩展方便，以及为了跨服务器聊天就是用了RabbitMQ的fanout扇出交换机来进行服务器之间的消息扩散，所以这次AI接口的技术扩展我们继续使用RabbitMQ，但是与之前选择使用发布订阅模型不同，我们这次选择的模式是生产者-消费者模型，也就是工作队列模式。\n\n## 这里简单介绍一下RabbitMQ的五种模式吧\n\n### 简单模式\n\n包含一个生产者，一个消费者，一个队列。生产者发送消息，消费者监听并消费消息。\n\n这种模式的作用为：解耦，削峰填谷\n\n![简单模式](/picture/simple.png)\n\n其实邮件、聊天都是这种场景的受众，只不过我们的服务器充当了一个消息队列的功能\n\n### 工作队列模式\n\n这种模式就是一个生产者，一个队列，多个消费者，生产者源源不断往队列里放任务，消费者监听并处理任务。这样的模式也被称为能者多劳模式，能力越强的消费者消费的消息更多。\n\n![工作队列](/picture/work.png)\n\n但是需要说的是，Springboot集成RabbitMQ，默认限制限制消费者一次从队列里获取250条消息，也就是说，消费者会一次预支250条消息，能力差的消费者这250条消息可能会处理很久。这点在我们的任务中表现的极为明显。我有一个7650GRE的卡和一张4090的卡，同时用这两个本地机器消费消息，显然7650GRE的能力比不上4090，250条消息要处理很久才能结束，但是我们的项目是一个实时聊天项目，可能4090处理完250条消息之后又会接着获取新的消息，导致后来的消息比前来的消息更快被模型处理和响应。\n\n所以这里我们限制了每个消费者一次只能获取一条消息，处理完之后才能继续获取。\n\n```propreties\nspring.rabbitmq.listener.simple.prefetch=1\n```\n\n这种模型最典型的应用场景就是抢红包，但是可能会出现红包余额被错误修改的情况，这种时候需要对红包余额加锁或者CAS操作。\n\n### 发布订阅模式\n\n发布订阅模式与工作队列模式不同在于，一条消息可以被多个消费者消费，这种在RabbitMQ中的实现就是fanout交换机，fanout交换机将获得的消息扇出到bind到它上面的每个消息队列中，每个消息队列被一个消费者消费，这样即可构成发布订阅模式。\n\n![发布订阅模式](/picture/sub.png)\n\n这种模式最为经典的类比就是广播消息。但是这种模式和后面的路由模式的差别就在于无法过滤消息，也就是说要扇出就会扇出到全部绑定的队列。\n\n### 路由模式\n\n![路由模式](/picture/router.png)\n\n路由模式根据生产者提供的路由key将消息发送到绑定到交换机上且路由key符合的消息队列。\n\n### Topic模式\n\n主题模式，是由路由模式衍生出来的一种模式，路由模式并不支持模糊匹配，路由Key必须完全对应才会发送到对应的消息队列，但是主题模式不同，可以使用通配符匹配\n\n![Topic模式](/picture/topic.png)\n\n1. 星号 和 井号代表通配符\n\n2. 星号匹配1个词, #匹配一个或多个词（* 匹配一级任意多个字符，# 匹配多级任意多个字符）\n\n​       例如：routingKey为\"user.#\"，表示可以匹配\"user.add\"和\"user.add.log\"。\n\n​       routingKey为\"user.*\"，表示可以匹配\"user.add\"，对于\"user.add.log\"则无法匹配。\n\n3. 路由功能添加模糊匹配\n\n4. 消息产生者产生消息,把消息交给交换机\n\n5. 交换机根据key的规则模糊匹配到对应的队列,由队列的监听消费者接收消息消费 \n\n## 具体实现\n\n到这里我们复习完了五种模式，我们选择了工作队列模式，同时限定消费者只能消费一个队列。\n\n所以我们在具体实现中，判断用户发来的消息是否是发给指定的机器人ID的，在这里我们设定为URobot，如果是这个ID，那么我们就将用户的UID以及用户发送的信息先简单打个信息表，打完信息表之后直接将这个信息封装为一个消息Dto，序列化之后加入到消息队列中去。\n\n```java\nif (Constants.ROBOT_UID.equals(contactId)) {\n    SysSettingDto sysSettingDto = redisComponet.getSysSetting();\n    TokenUserInfoDto robot = new TokenUserInfoDto();\n    robot.setUserId(sysSettingDto.getRobotUid());\n    robot.setNickName(sysSettingDto.getRobotNickName());\n    ChatMessage robotChatMessage = new ChatMessage();\n    robotChatMessage.setContactId(sendUserId);\n    //封装消息装到作为AI返回发送地址以及prompt准备加入到消息队列中去\n    robotChatMessage.setMessageType(MessageTypeEnum.CHAT.getType());\n    AIRabbitDto aIRabbitDto = new AIRabbitDto();\n    aIRabbitDto.setChatMessage(robotChatMessage);\n    aIRabbitDto.setMessage(chatMessage.getMessageContent());\n    aIRabbitDto.setTokenUserInfoDto(robot);\n  \t//将对应的消息投递到对应的消息队列中去\n    rabbitTemplate.convertAndSend(\"dogie.direct\",\"chat\",JsonUtils.convertObj2Json(aIRabbitDto));\n} else {\n  \tmessageHandler.sendMessage(messageSend);\n}\n```\n\n之后我们就需要设定对应的Listener了，这里我们存留了一点私心，就是我不希望用分离的方式来实现这个Listener，我最佳的愿望肯定是我有多个服务器，然后有的服务器有能力处理消息传递和AI功能，没有AI功能的服务器只负责对应的消息传递。所以我们给Listener的Bean使用了@ConditionalOnProperty注解，当服务器有能力处理AI对话的时候，就把配置文件中对应的字段设置为true，对应的服务器就会注册这个Listener的Bean，就会进一步调用listener方法，如果服务器没有能力，就不注册这个bean，自然也不会从消息队列里去取这个任务。\n\n关于AI的调用，我看了挺多博客的，他们都说SpringAI可以继承了ollama的调用，我好像没找着，所以还是手搓了一个发消息的方法，就是使用OkHttpClient去调这个api，为了等待异步消息结束，我加了个CountDownLatch\n\n```java\npackage com.karlyn.dogie.listener;\n\nimport com.karlyn.dogie.entity.dto.AIRabbitDto;\nimport com.karlyn.dogie.entity.dto.OllamaResult;\nimport com.karlyn.dogie.entity.dto.TokenUserInfoDto;\nimport com.karlyn.dogie.entity.po.ChatMessage;\nimport com.karlyn.dogie.service.ChatMessageService;\nimport com.karlyn.dogie.util.JsonUtils;\nimport com.rabbitmq.client.Channel;\nimport lombok.extern.slf4j.Slf4j;\nimport okhttp3.*;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.amqp.support.AmqpHeaders;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.messaging.handler.annotation.Header;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\n@ConditionalOnProperty(name = \"rabbit.listener.ai.enabled\", havingValue = \"true\", matchIfMissing = true)\npublic class AIListener {\n    private final ChatMessageService chatMessageService;\n    @Value(\"${ai.timeout}\")\n    private Integer timeout;\n    @Value(\"${ai.url}\")\n    private String URL_OLLAMA;\n    @Value(\"${ai.model}\")\n    private String MODEL_DEEPSEEK;\n\n    public AIListener(ChatMessageService chatMessageService) {\n        this.chatMessageService = chatMessageService;\n    }\n\n    @RabbitListener(queues = \"deepseek.queue\")\n    private void Listener(String msg, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG) long tag) throws IOException {\n        AIRabbitDto aIRabbitDto = JsonUtils.convertJson2Obj(msg, AIRabbitDto.class);\n        log.info(\"消费消息\");\n        log.info(aIRabbitDto.toString());\n        try {\n        \t\tgetAiResult4Deepseek(aIRabbitDto.getMessage(),\n        \t\t\t\t\t\t\t\t\t\taIRabbitDto.getChatMessage(),\n                            aIRabbitDto.getTokenUserInfoDto());\n          \t//如果消费成功了，就手动确认一下\n         \t\tchannel.basicAck(tag, false);\n        } catch (Exception e) {\n            //如果消费失败了就得Nack一下，把对应的消息重新塞回消息队列\n            channel.basicNack(tag, false,true);\n            throw new RuntimeException(e);\n        }\n    }\n\n    private String getAiResult4Deepseek(String message, ChatMessage robotChatMessage, TokenUserInfoDto robot) throws InterruptedException {\n        // 设定头参数\n        Map\u003CString, Object> params = new HashMap\u003C>();\n        params.put(\"prompt\", message);\n        params.put(\"model\", MODEL_DEEPSEEK);\n        params.put(\"stream\", false);\n        params.put(\"temperature\", 0.7);\n        params.put(\"top_p\", 0.9);\n        params.put(\"max_tokens\",400);\n\n        String jsonParams = JsonUtils.convertObj2Json(params);\n\n        //创建Http请求\n        Request.Builder builder = new Request.Builder().url(URL_OLLAMA);\n        RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), jsonParams);\n        Request request = builder.post(body).build();\n\n        // 配置OkHttpClient\n        OkHttpClient client = new OkHttpClient.Builder()\n                .connectTimeout(timeout, TimeUnit.SECONDS)\n                .writeTimeout(timeout, TimeUnit.SECONDS)\n                .readTimeout(timeout, TimeUnit.SECONDS)\n                .build();\n\n        CountDownLatch eventLatch = new CountDownLatch(1);//定义一个只有1的计数器\n        StringBuilder resultBuffer = new StringBuffer(); // 用来收集消息\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                log.error(\"请求失败\", e);\n                eventLatch.countDown(); // 请求失败计数器也减一\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    try (ResponseBody responseBody = response.body()) {\n                        if (responseBody != null) {\n                            // 读取响应内容\n                            String fullResponse = responseBody.string();\n                          \t//这里我是定义了一个对应的参数来解析这个responseBody\n                            OllamaResult aiResult = JsonUtils.convertJson2Obj(fullResponse, OllamaResult.class);\n                            log.info(aiResult.getResponse());\n                            resultBuffer.append(aiResult.getResponse()); //获取消息\n                        }\n                    }\n                } else {\n                    log.error(\"获取失败\", response);\n                }\n                eventLatch.countDown(); // 请求成功计数器减一\n            }\n        });\n\n        eventLatch.await(); //等待计数器为0，也就是要么失败要么成功\n        String[] messages = resultBuilder.toString().split(\"\u003C/think>\\n\\n\");\n        if(messages.length\u003C=1) messages[0]=\"服务器繁忙，请稍后再试\";\n        // 如果成功直接把消息封装到Message里去，然后就可以把它继续加到消息队列里面去，但是是用来跨服务器通信的消息队列\n      \t//后面这个bean就是做这件事情的，写表然后加消息队列\n        robotChatMessage.setMessageContent(messages[messages.length - 1]);\n        chatMessageService.saveMessage(robotChatMessage, robot);\n        return resultBuilder.toString(); //这个返回其实没什么用，是我在测试的时候打印的\n    }\n}\n```","src/content/posts/origin/2025-03-28-轻量云服务器结合RabbitMQ实现调用本地AI接口.md","f423ca5370997760",{"html":112,"metadata":113},"\u003Ch1 id=\"背景\">背景\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 背景\" href=\"#背景\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>我有一个仿微信的IM聊天项目，但是想做出一点新的东西，AI这个风口上所以还是想看看能不能做点AI接口的调用。但是直接调用官方接口意义不大，其实本质上来说，本地用Ollama部署完然后本地调用本地接口其实也不算很有难度的事情。\u003C/p>\n\u003Cp>但是恰好我的IM项目就有这么一点——需要支持跨服务器之间的消息发送，所以设计了一个发布订阅的中间件来进行服务器上某个节点的消息扩散到其他服务器上，这样就天然支持了一件事情，就是A服务器的任务，如果被B服务器处理了，依然可以发送回到A服务器。\u003C/p>\n\u003Ch2 id=\"简单展示\">简单展示\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 简单展示\" href=\"#简单展示\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>客户端发送消息给服务端，我的服务端是京东云的一个轻量级服务器，2G内存的那种。\u003C/p>\n\u003Cp>现在我在客户端给服务端发一条消息，这时候我没关我本地的服务器啊，也就是说，我本地有个能处理AI图片的服务器挂在那里消费消息队列，这时候有正常的响应（别介意，不是32B，只是我当时觉得能跑，但是确实太慢了，后面我直接换1.5b了）\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/ai_message.png\" alt=\"客户端发消息\">\u003Cfigcaption>客户端发消息\u003C/figcaption>\u003C/figure>\n\u003Cp>这时候我们看看我京东云的日志，可以看到，有一条日志说消息队列消息增加，这是我在消息进入交换机的时候打的一个log，证明这条消息在不同服务器上扩散了，这时候就要去自己服务器上把这条消息发给对应的人，如果自己维护的WebSocketChannel里没有，就直接不管了。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">@\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">RabbitListener\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">queues\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"${rabbit.queue.message}\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Listener\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(String msg, Channel channel, @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Header\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(AmqpHeaders.DELIVERY_TAG) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">long\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tag) throws IOException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    MessageSendDto sendDto \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> JsonUtils.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">convertJson2Obj\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(msg, MessageSendDto.class);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    log.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"消息队列收到消息\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    log.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(msg);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    channelContextUtils.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sendMessage\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sendDto);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">basicAck\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tag, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>这条消息直接被丢弃了，但是因为是机器人，所以我们同时把它加到了机器人对应的消息队列里，但是我们京东云的日志并没有后续的处理。日志如下：\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/jd_log.png\" alt=\"京东云日志\">\u003Cfigcaption>京东云日志\u003C/figcaption>\u003C/figure>\n\u003Cp>但是我们本地处理了，这是我本地运行jar包的输出\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/local_log.png\" alt=\"本地输出\">\u003Cfigcaption>本地输出\u003C/figcaption>\u003C/figure>\n\u003Cp>这是消息队列的消费情况。\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/mq1.png\" alt=\"消息队列\">\u003Cfigcaption>消息队列\u003C/figcaption>\u003C/figure>\n\u003Cp>这时候如果我们停掉本地的服务器，消息就会堆积在消息队列里等待有能力处理的服务器上线。\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/mq2.png\" alt=\"消息队列\">\u003Cfigcaption>消息队列\u003C/figcaption>\u003C/figure>\n\u003Cp>自然也不会给用户消息反馈。\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/ai_message2.png\" alt=\"客户端发消息\">\u003Cfigcaption>客户端发消息\u003C/figcaption>\u003C/figure>\n\u003Ch1 id=\"技术选型\">技术选型\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 技术选型\" href=\"#技术选型\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>为了后续扩展方便，以及为了跨服务器聊天就是用了RabbitMQ的fanout扇出交换机来进行服务器之间的消息扩散，所以这次AI接口的技术扩展我们继续使用RabbitMQ，但是与之前选择使用发布订阅模型不同，我们这次选择的模式是生产者-消费者模型，也就是工作队列模式。\u003C/p>\n\u003Ch2 id=\"这里简单介绍一下rabbitmq的五种模式吧\">这里简单介绍一下RabbitMQ的五种模式吧\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 这里简单介绍一下RabbitMQ的五种模式吧\" href=\"#这里简单介绍一下rabbitmq的五种模式吧\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Ch3 id=\"简单模式\">简单模式\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 简单模式\" href=\"#简单模式\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>包含一个生产者，一个消费者，一个队列。生产者发送消息，消费者监听并消费消息。\u003C/p>\n\u003Cp>这种模式的作用为：解耦，削峰填谷\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/simple.png\" alt=\"简单模式\">\u003Cfigcaption>简单模式\u003C/figcaption>\u003C/figure>\n\u003Cp>其实邮件、聊天都是这种场景的受众，只不过我们的服务器充当了一个消息队列的功能\u003C/p>\n\u003Ch3 id=\"工作队列模式\">工作队列模式\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 工作队列模式\" href=\"#工作队列模式\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>这种模式就是一个生产者，一个队列，多个消费者，生产者源源不断往队列里放任务，消费者监听并处理任务。这样的模式也被称为能者多劳模式，能力越强的消费者消费的消息更多。\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/work.png\" alt=\"工作队列\">\u003Cfigcaption>工作队列\u003C/figcaption>\u003C/figure>\n\u003Cp>但是需要说的是，Springboot集成RabbitMQ，默认限制限制消费者一次从队列里获取250条消息，也就是说，消费者会一次预支250条消息，能力差的消费者这250条消息可能会处理很久。这点在我们的任务中表现的极为明显。我有一个7650GRE的卡和一张4090的卡，同时用这两个本地机器消费消息，显然7650GRE的能力比不上4090，250条消息要处理很久才能结束，但是我们的项目是一个实时聊天项目，可能4090处理完250条消息之后又会接着获取新的消息，导致后来的消息比前来的消息更快被模型处理和响应。\u003C/p>\n\u003Cp>所以这里我们限制了每个消费者一次只能获取一条消息，处理完之后才能继续获取。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>spring.rabbitmq.listener.simple.prefetch=1\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>这种模型最典型的应用场景就是抢红包，但是可能会出现红包余额被错误修改的情况，这种时候需要对红包余额加锁或者CAS操作。\u003C/p>\n\u003Ch3 id=\"发布订阅模式\">发布订阅模式\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 发布订阅模式\" href=\"#发布订阅模式\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>发布订阅模式与工作队列模式不同在于，一条消息可以被多个消费者消费，这种在RabbitMQ中的实现就是fanout交换机，fanout交换机将获得的消息扇出到bind到它上面的每个消息队列中，每个消息队列被一个消费者消费，这样即可构成发布订阅模式。\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/sub.png\" alt=\"发布订阅模式\">\u003Cfigcaption>发布订阅模式\u003C/figcaption>\u003C/figure>\n\u003Cp>这种模式最为经典的类比就是广播消息。但是这种模式和后面的路由模式的差别就在于无法过滤消息，也就是说要扇出就会扇出到全部绑定的队列。\u003C/p>\n\u003Ch3 id=\"路由模式\">路由模式\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 路由模式\" href=\"#路由模式\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cfigure>\u003Cimg src=\"/picture/router.png\" alt=\"路由模式\">\u003Cfigcaption>路由模式\u003C/figcaption>\u003C/figure>\n\u003Cp>路由模式根据生产者提供的路由key将消息发送到绑定到交换机上且路由key符合的消息队列。\u003C/p>\n\u003Ch3 id=\"topic模式\">Topic模式\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to Topic模式\" href=\"#topic模式\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>主题模式，是由路由模式衍生出来的一种模式，路由模式并不支持模糊匹配，路由Key必须完全对应才会发送到对应的消息队列，但是主题模式不同，可以使用通配符匹配\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/topic.png\" alt=\"Topic模式\">\u003Cfigcaption>Topic模式\u003C/figcaption>\u003C/figure>\n\u003Col>\n\u003Cli>\n\u003Cp>星号 和 井号代表通配符\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>星号匹配1个词, #匹配一个或多个词（* 匹配一级任意多个字符，# 匹配多级任意多个字符）\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>​       例如：routingKey为”user.#“，表示可以匹配”user.add”和”user.add.log”。\u003C/p>\n\u003Cp>​       routingKey为”user.*“，表示可以匹配”user.add”，对于”user.add.log”则无法匹配。\u003C/p>\n\u003Col start=\"3\">\n\u003Cli>\n\u003Cp>路由功能添加模糊匹配\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>消息产生者产生消息,把消息交给交换机\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>交换机根据key的规则模糊匹配到对应的队列,由队列的监听消费者接收消息消费\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"具体实现\">具体实现\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 具体实现\" href=\"#具体实现\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>到这里我们复习完了五种模式，我们选择了工作队列模式，同时限定消费者只能消费一个队列。\u003C/p>\n\u003Cp>所以我们在具体实现中，判断用户发来的消息是否是发给指定的机器人ID的，在这里我们设定为URobot，如果是这个ID，那么我们就将用户的UID以及用户发送的信息先简单打个信息表，打完信息表之后直接将这个信息封装为一个消息Dto，序列化之后加入到消息队列中去。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (Constants.ROBOT_UID.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">equals\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(contactId)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    SysSettingDto sysSettingDto \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> redisComponet.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getSysSetting\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    TokenUserInfoDto robot \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> TokenUserInfoDto\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    robot.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">setUserId\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sysSettingDto.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getRobotUid\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    robot.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">setNickName\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sysSettingDto.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getRobotNickName\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ChatMessage robotChatMessage \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ChatMessage\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    robotChatMessage.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">setContactId\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sendUserId);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //封装消息装到作为AI返回发送地址以及prompt准备加入到消息队列中去\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    robotChatMessage.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">setMessageType\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(MessageTypeEnum.CHAT.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getType\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    AIRabbitDto aIRabbitDto \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> AIRabbitDto\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    aIRabbitDto.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">setChatMessage\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(robotChatMessage);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    aIRabbitDto.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">setMessage\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(chatMessage.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getMessageContent\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    aIRabbitDto.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">setTokenUserInfoDto\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(robot);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//将对应的消息投递到对应的消息队列中去\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    rabbitTemplate.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">convertAndSend\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"dogie.direct\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"chat\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,JsonUtils.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">convertObj2Json\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(aIRabbitDto));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">  \tmessageHandler.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sendMessage\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(messageSend);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>之后我们就需要设定对应的Listener了，这里我们存留了一点私心，就是我不希望用分离的方式来实现这个Listener，我最佳的愿望肯定是我有多个服务器，然后有的服务器有能力处理消息传递和AI功能，没有AI功能的服务器只负责对应的消息传递。所以我们给Listener的Bean使用了@ConditionalOnProperty注解，当服务器有能力处理AI对话的时候，就把配置文件中对应的字段设置为true，对应的服务器就会注册这个Listener的Bean，就会进一步调用listener方法，如果服务器没有能力，就不注册这个bean，自然也不会从消息队列里去取这个任务。\u003C/p>\n\u003Cp>关于AI的调用，我看了挺多博客的，他们都说SpringAI可以继承了ollama的调用，我好像没找着，所以还是手搓了一个发消息的方法，就是使用OkHttpClient去调这个api，为了等待异步消息结束，我加了个CountDownLatch\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">package\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.listener;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.entity.dto.AIRabbitDto;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.entity.dto.OllamaResult;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.entity.dto.TokenUserInfoDto;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.entity.po.ChatMessage;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.service.ChatMessageService;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.util.JsonUtils;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.rabbitmq.client.Channel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> lombok.extern.slf4j.Slf4j;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> okhttp3.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.amqp.rabbit.annotation.RabbitListener;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.amqp.support.AmqpHeaders;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.beans.factory.annotation.Value;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.messaging.handler.annotation.Header;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.stereotype.Component;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.IOException;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.HashMap;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Map;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.CountDownLatch;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.TimeUnit;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">@\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Slf4j\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">@\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">@\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">ConditionalOnProperty\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">name\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"rabbit.listener.ai.enabled\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">havingValue\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"true\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">matchIfMissing\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> AIListener\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ChatMessageService chatMessageService;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Value\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"${ai.timeout}\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Integer timeout;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Value\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"${ai.url}\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> String URL_OLLAMA;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Value\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"${ai.model}\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> String MODEL_DEEPSEEK;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> AIListener\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ChatMessageService \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">chatMessageService\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.chatMessageService \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> chatMessageService;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">RabbitListener\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">queues\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"deepseek.queue\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Listener\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(String \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">msg\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, Channel \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Header\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(AmqpHeaders.DELIVERY_TAG) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">long\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> tag\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> IOException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        AIRabbitDto aIRabbitDto \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> JsonUtils.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">convertJson2Obj\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(msg, AIRabbitDto.class);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        log.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"消费消息\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        log.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(aIRabbitDto.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">        \t\tgetAiResult4Deepseek\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(aIRabbitDto.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getMessage\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        \t\t\t\t\t\t\t\t\t\taIRabbitDto.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getChatMessage\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                            aIRabbitDto.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getTokenUserInfoDto\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//如果消费成功了，就手动确认一下\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">         \t\tchannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">basicAck\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tag, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (Exception \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //如果消费失败了就得Nack一下，把对应的消息重新塞回消息队列\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">basicNack\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tag, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> RuntimeException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> String \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getAiResult4Deepseek\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(String \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">message\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, ChatMessage \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">robotChatMessage\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, TokenUserInfoDto \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">robot\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> InterruptedException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 设定头参数\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Map&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Object\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> params \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> HashMap&#x3C;>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        params.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"prompt\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, message);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        params.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"model\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, MODEL_DEEPSEEK);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        params.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"stream\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        params.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"temperature\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0.7\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        params.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"top_p\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0.9\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        params.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"max_tokens\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">400\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String jsonParams \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> JsonUtils.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">convertObj2Json\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(params);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //创建Http请求\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Request.Builder builder \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Request.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Builder\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">url\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(URL_OLLAMA);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        RequestBody body \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> RequestBody.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(MediaType.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"application/json; charset=utf-8\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">), jsonParams);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Request request \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> builder.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">post\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(body).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">build\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 配置OkHttpClient\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        OkHttpClient client \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> OkHttpClient.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Builder\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                .\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">connectTimeout\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(timeout, TimeUnit.SECONDS)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                .\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">writeTimeout\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(timeout, TimeUnit.SECONDS)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                .\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">readTimeout\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(timeout, TimeUnit.SECONDS)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                .\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">build\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        CountDownLatch eventLatch \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> CountDownLatch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//定义一个只有1的计数器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        StringBuilder resultBuffer \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> StringBuffer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 用来收集消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        client.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">newCall\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(request).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">enqueue\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Callback\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> onFailure\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Call \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">call\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, IOException \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                log.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"请求失败\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                eventLatch.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">countDown\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 请求失败计数器也减一\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> onResponse\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Call \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">call\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, Response \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">response\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> IOException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (response.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isSuccessful\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (ResponseBody responseBody \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> response.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">body\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (responseBody \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                            // 读取响应内容\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                            String fullResponse \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> responseBody.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">string\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                          \t//这里我是定义了一个对应的参数来解析这个responseBody\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                            OllamaResult aiResult \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> JsonUtils.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">convertJson2Obj\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(fullResponse, OllamaResult.class);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                            log.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(aiResult.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getResponse\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                            resultBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(aiResult.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getResponse\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//获取消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    log.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"获取失败\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, response);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                eventLatch.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">countDown\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 请求成功计数器减一\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        eventLatch.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">await\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//等待计数器为0，也就是要么失败要么成功\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] messages \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> resultBuilder.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"&#x3C;/think>\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\n\\n\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(messages.length\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) messages[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"服务器繁忙，请稍后再试\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 如果成功直接把消息封装到Message里去，然后就可以把它继续加到消息队列里面去，但是是用来跨服务器通信的消息队列\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//后面这个bean就是做这件事情的，写表然后加消息队列\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        robotChatMessage.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">setMessageContent\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(messages[messages.length \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        chatMessageService.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">saveMessage\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(robotChatMessage, robot);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> resultBuilder.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//这个返回其实没什么用，是我在测试的时候打印的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>",{"headings":114,"localImagePaths":139,"remoteImagePaths":140,"frontmatter":141,"imagePaths":147},[115,117,120,122,125,128,130,132,134,137],{"depth":25,"slug":116,"text":116},"背景",{"depth":118,"slug":119,"text":119},2,"简单展示",{"depth":25,"slug":121,"text":121},"技术选型",{"depth":118,"slug":123,"text":124},"这里简单介绍一下rabbitmq的五种模式吧","这里简单介绍一下RabbitMQ的五种模式吧",{"depth":126,"slug":127,"text":127},3,"简单模式",{"depth":126,"slug":129,"text":129},"工作队列模式",{"depth":126,"slug":131,"text":131},"发布订阅模式",{"depth":126,"slug":133,"text":133},"路由模式",{"depth":126,"slug":135,"text":136},"topic模式","Topic模式",{"depth":118,"slug":138,"text":138},"具体实现",[],[],{"title":97,"tags":142,"categories":143,"mathjax":105,"description":99,"abbrlink":107,"sticky":25,"swiper_index":25,"published":145,"minutes":146},[101,102],[144],"项目",["Date","2025-03-28T20:50:42.000Z"],14,[],"origin/2025-04-07-限流的实现",{"id":148,"data":150,"body":157,"filePath":158,"digest":159,"rendered":160},{"title":151,"published":152,"description":153,"tags":154,"draft":103,"pin":104,"toc":105,"lang":106,"abbrlink":156},"限流的实现",["Date","2025-04-07T12:58:49.000Z"],"面试的时候有一道题目，手撕一个限流算法，感觉自己做的不是特别好，所以这里再重新思考一下。",[101,155,144],"手撕","stream-limit","# 常见的限流算法\n\n常见的几种限流算法如下：\n\n1. 令牌桶\n2. 漏桶\n3. 滑动窗口\n4. 固定窗口\n\n我在面试的时候实现的方式就有点类似于4，面试官也提出会有突刺问题，后面问我怎么优化，因为我实在不会写令牌桶的算法，我就说了滑动窗口，更加细粒度的划分这块。\n\n所以接下来实现一下漏桶和令牌桶吧\n\n## 漏桶\n\n```java\nimport java.util.concurrent.*;\nimport java.util.*;\n\npublic class LeakyBucket {\n    //定义漏桶速率\n    private int qps;\n    //定义漏桶\n    private LinkedBlockingDeque\u003CObject> waterBucket;\n\n    public void initLeaky(){\n        Runnable run = new Runnable() {\n            @Override\n            public void run() {\n                while(true){\n                    //使用TimeUnit组件，每隔1000/qps处理一个消息\n                    try {\n                        TimeUnit.MICROSECONDS.sleep(1000/qps);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    //漏水\n                    waterBucket.poll();\n                }\n            }\n        };\n        Thread thread = new Thread(run);\n        thread.start();\n    }\n\n    public LeakyBucket(int capacity,int qps){\n        this.qps = qps;\n        this.waterBucket = new LinkedBlockingDeque\u003C>(capacity);\n        //创建完桶要开始滴水\n        initLeaky();\n    }\n\n    public boolean tryAcquire(){\n        //这里一定要用offer，否则超容量就报错了\n        return waterBucket.offer(1);\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        int count = 0;\n        LeakyBucket leakyBucket = new LeakyBucket(100,100);\n        for(int i=0;i\u003C200;i++){\n            Date now = new Date();\n            if(leakyBucket.tryAcquire()){\n                count++;\n                System.out.println(i+\" at \"+now+\" get success\");\n            }else {\n                System.out.println(i+\" at \"+now+\" get error\");\n            }\n        }\n        System.out.println(\"total num:\"+ count);\n    }\n}\n```\n\n输出结果并不严格限制1s只能获取一百个，而是只要桶还能装下即可获取流量允许，所以结果如下：\n\n```\n0 at Mon Apr 07 13:56:23 CST 2025 get success\n1 at Mon Apr 07 13:56:23 CST 2025 get success\n2 at Mon Apr 07 13:56:23 CST 2025 get success\n3 at Mon Apr 07 13:56:23 CST 2025 get success\n4 at Mon Apr 07 13:56:23 CST 2025 get success\n5 at Mon Apr 07 13:56:23 CST 2025 get success\n6 at Mon Apr 07 13:56:23 CST 2025 get success\n7 at Mon Apr 07 13:56:23 CST 2025 get success\n8 at Mon Apr 07 13:56:23 CST 2025 get success\n9 at Mon Apr 07 13:56:23 CST 2025 get success\n10 at Mon Apr 07 13:56:23 CST 2025 get success\n11 at Mon Apr 07 13:56:23 CST 2025 get success\n12 at Mon Apr 07 13:56:23 CST 2025 get success\n13 at Mon Apr 07 13:56:23 CST 2025 get success\n14 at Mon Apr 07 13:56:23 CST 2025 get success\n15 at Mon Apr 07 13:56:23 CST 2025 get success\n16 at Mon Apr 07 13:56:23 CST 2025 get success\n17 at Mon Apr 07 13:56:23 CST 2025 get success\n18 at Mon Apr 07 13:56:23 CST 2025 get success\n19 at Mon Apr 07 13:56:23 CST 2025 get success\n20 at Mon Apr 07 13:56:23 CST 2025 get success\n21 at Mon Apr 07 13:56:23 CST 2025 get success\n22 at Mon Apr 07 13:56:23 CST 2025 get success\n23 at Mon Apr 07 13:56:23 CST 2025 get success\n24 at Mon Apr 07 13:56:23 CST 2025 get success\n25 at Mon Apr 07 13:56:23 CST 2025 get success\n26 at Mon Apr 07 13:56:23 CST 2025 get success\n27 at Mon Apr 07 13:56:23 CST 2025 get success\n28 at Mon Apr 07 13:56:23 CST 2025 get success\n29 at Mon Apr 07 13:56:23 CST 2025 get success\n30 at Mon Apr 07 13:56:23 CST 2025 get success\n31 at Mon Apr 07 13:56:23 CST 2025 get success\n32 at Mon Apr 07 13:56:23 CST 2025 get success\n33 at Mon Apr 07 13:56:23 CST 2025 get success\n34 at Mon Apr 07 13:56:23 CST 2025 get success\n35 at Mon Apr 07 13:56:23 CST 2025 get success\n36 at Mon Apr 07 13:56:23 CST 2025 get success\n37 at Mon Apr 07 13:56:23 CST 2025 get success\n38 at Mon Apr 07 13:56:23 CST 2025 get success\n39 at Mon Apr 07 13:56:23 CST 2025 get success\n40 at Mon Apr 07 13:56:23 CST 2025 get success\n41 at Mon Apr 07 13:56:23 CST 2025 get success\n42 at Mon Apr 07 13:56:23 CST 2025 get success\n43 at Mon Apr 07 13:56:23 CST 2025 get success\n44 at Mon Apr 07 13:56:23 CST 2025 get success\n45 at Mon Apr 07 13:56:23 CST 2025 get success\n46 at Mon Apr 07 13:56:23 CST 2025 get success\n47 at Mon Apr 07 13:56:23 CST 2025 get success\n48 at Mon Apr 07 13:56:23 CST 2025 get success\n49 at Mon Apr 07 13:56:23 CST 2025 get success\n50 at Mon Apr 07 13:56:23 CST 2025 get success\n51 at Mon Apr 07 13:56:23 CST 2025 get success\n52 at Mon Apr 07 13:56:23 CST 2025 get success\n53 at Mon Apr 07 13:56:23 CST 2025 get success\n54 at Mon Apr 07 13:56:23 CST 2025 get success\n55 at Mon Apr 07 13:56:23 CST 2025 get success\n56 at Mon Apr 07 13:56:23 CST 2025 get success\n57 at Mon Apr 07 13:56:23 CST 2025 get success\n58 at Mon Apr 07 13:56:23 CST 2025 get success\n59 at Mon Apr 07 13:56:23 CST 2025 get success\n60 at Mon Apr 07 13:56:23 CST 2025 get success\n61 at Mon Apr 07 13:56:23 CST 2025 get success\n62 at Mon Apr 07 13:56:23 CST 2025 get success\n63 at Mon Apr 07 13:56:23 CST 2025 get success\n64 at Mon Apr 07 13:56:23 CST 2025 get success\n65 at Mon Apr 07 13:56:23 CST 2025 get success\n66 at Mon Apr 07 13:56:23 CST 2025 get success\n67 at Mon Apr 07 13:56:23 CST 2025 get success\n68 at Mon Apr 07 13:56:23 CST 2025 get success\n69 at Mon Apr 07 13:56:23 CST 2025 get success\n70 at Mon Apr 07 13:56:23 CST 2025 get success\n71 at Mon Apr 07 13:56:23 CST 2025 get success\n72 at Mon Apr 07 13:56:23 CST 2025 get success\n73 at Mon Apr 07 13:56:23 CST 2025 get success\n74 at Mon Apr 07 13:56:23 CST 2025 get success\n75 at Mon Apr 07 13:56:23 CST 2025 get success\n76 at Mon Apr 07 13:56:23 CST 2025 get success\n77 at Mon Apr 07 13:56:23 CST 2025 get success\n78 at Mon Apr 07 13:56:23 CST 2025 get success\n79 at Mon Apr 07 13:56:23 CST 2025 get success\n80 at Mon Apr 07 13:56:23 CST 2025 get success\n81 at Mon Apr 07 13:56:23 CST 2025 get success\n82 at Mon Apr 07 13:56:23 CST 2025 get success\n83 at Mon Apr 07 13:56:23 CST 2025 get success\n84 at Mon Apr 07 13:56:23 CST 2025 get success\n85 at Mon Apr 07 13:56:23 CST 2025 get success\n86 at Mon Apr 07 13:56:23 CST 2025 get success\n87 at Mon Apr 07 13:56:23 CST 2025 get success\n88 at Mon Apr 07 13:56:23 CST 2025 get success\n89 at Mon Apr 07 13:56:23 CST 2025 get success\n90 at Mon Apr 07 13:56:23 CST 2025 get success\n91 at Mon Apr 07 13:56:23 CST 2025 get success\n92 at Mon Apr 07 13:56:23 CST 2025 get success\n93 at Mon Apr 07 13:56:23 CST 2025 get success\n94 at Mon Apr 07 13:56:23 CST 2025 get success\n95 at Mon Apr 07 13:56:23 CST 2025 get success\n96 at Mon Apr 07 13:56:23 CST 2025 get success\n97 at Mon Apr 07 13:56:23 CST 2025 get success\n98 at Mon Apr 07 13:56:23 CST 2025 get success\n99 at Mon Apr 07 13:56:23 CST 2025 get success\n100 at Mon Apr 07 13:56:23 CST 2025 get success\n101 at Mon Apr 07 13:56:23 CST 2025 get success\n102 at Mon Apr 07 13:56:23 CST 2025 get success\n103 at Mon Apr 07 13:56:23 CST 2025 get success\n104 at Mon Apr 07 13:56:23 CST 2025 get error\n105 at Mon Apr 07 13:56:23 CST 2025 get error\n106 at Mon Apr 07 13:56:23 CST 2025 get error\n107 at Mon Apr 07 13:56:23 CST 2025 get error\n108 at Mon Apr 07 13:56:23 CST 2025 get error\n109 at Mon Apr 07 13:56:23 CST 2025 get error\n110 at Mon Apr 07 13:56:23 CST 2025 get error\n111 at Mon Apr 07 13:56:23 CST 2025 get error\n112 at Mon Apr 07 13:56:23 CST 2025 get error\n113 at Mon Apr 07 13:56:23 CST 2025 get error\n114 at Mon Apr 07 13:56:23 CST 2025 get error\n115 at Mon Apr 07 13:56:23 CST 2025 get error\n116 at Mon Apr 07 13:56:23 CST 2025 get error\n117 at Mon Apr 07 13:56:23 CST 2025 get error\n118 at Mon Apr 07 13:56:23 CST 2025 get error\n119 at Mon Apr 07 13:56:23 CST 2025 get error\n120 at Mon Apr 07 13:56:23 CST 2025 get error\n121 at Mon Apr 07 13:56:23 CST 2025 get error\n122 at Mon Apr 07 13:56:23 CST 2025 get error\n123 at Mon Apr 07 13:56:23 CST 2025 get error\n124 at Mon Apr 07 13:56:23 CST 2025 get error\n125 at Mon Apr 07 13:56:23 CST 2025 get error\n126 at Mon Apr 07 13:56:23 CST 2025 get error\n127 at Mon Apr 07 13:56:23 CST 2025 get error\n128 at Mon Apr 07 13:56:23 CST 2025 get error\n129 at Mon Apr 07 13:56:23 CST 2025 get error\n130 at Mon Apr 07 13:56:23 CST 2025 get error\n131 at Mon Apr 07 13:56:23 CST 2025 get error\n132 at Mon Apr 07 13:56:23 CST 2025 get success\n133 at Mon Apr 07 13:56:23 CST 2025 get error\n134 at Mon Apr 07 13:56:23 CST 2025 get error\n135 at Mon Apr 07 13:56:23 CST 2025 get error\n136 at Mon Apr 07 13:56:23 CST 2025 get error\n137 at Mon Apr 07 13:56:23 CST 2025 get error\n138 at Mon Apr 07 13:56:23 CST 2025 get error\n139 at Mon Apr 07 13:56:23 CST 2025 get error\n140 at Mon Apr 07 13:56:23 CST 2025 get error\n141 at Mon Apr 07 13:56:23 CST 2025 get error\n142 at Mon Apr 07 13:56:23 CST 2025 get error\n143 at Mon Apr 07 13:56:23 CST 2025 get error\n144 at Mon Apr 07 13:56:23 CST 2025 get error\n145 at Mon Apr 07 13:56:23 CST 2025 get error\n146 at Mon Apr 07 13:56:23 CST 2025 get error\n147 at Mon Apr 07 13:56:23 CST 2025 get error\n148 at Mon Apr 07 13:56:23 CST 2025 get error\n149 at Mon Apr 07 13:56:23 CST 2025 get error\n150 at Mon Apr 07 13:56:23 CST 2025 get error\n151 at Mon Apr 07 13:56:23 CST 2025 get error\n152 at Mon Apr 07 13:56:23 CST 2025 get error\n153 at Mon Apr 07 13:56:23 CST 2025 get error\n154 at Mon Apr 07 13:56:23 CST 2025 get error\n155 at Mon Apr 07 13:56:23 CST 2025 get error\n156 at Mon Apr 07 13:56:23 CST 2025 get error\n157 at Mon Apr 07 13:56:23 CST 2025 get error\n158 at Mon Apr 07 13:56:23 CST 2025 get error\n159 at Mon Apr 07 13:56:23 CST 2025 get error\n160 at Mon Apr 07 13:56:23 CST 2025 get error\n161 at Mon Apr 07 13:56:23 CST 2025 get error\n162 at Mon Apr 07 13:56:23 CST 2025 get error\n163 at Mon Apr 07 13:56:23 CST 2025 get error\n164 at Mon Apr 07 13:56:23 CST 2025 get error\n165 at Mon Apr 07 13:56:23 CST 2025 get error\n166 at Mon Apr 07 13:56:23 CST 2025 get error\n167 at Mon Apr 07 13:56:23 CST 2025 get error\n168 at Mon Apr 07 13:56:23 CST 2025 get error\n169 at Mon Apr 07 13:56:23 CST 2025 get success\n170 at Mon Apr 07 13:56:23 CST 2025 get error\n171 at Mon Apr 07 13:56:23 CST 2025 get error\n172 at Mon Apr 07 13:56:23 CST 2025 get error\n173 at Mon Apr 07 13:56:23 CST 2025 get error\n174 at Mon Apr 07 13:56:23 CST 2025 get error\n175 at Mon Apr 07 13:56:23 CST 2025 get error\n176 at Mon Apr 07 13:56:23 CST 2025 get error\n177 at Mon Apr 07 13:56:23 CST 2025 get error\n178 at Mon Apr 07 13:56:23 CST 2025 get error\n179 at Mon Apr 07 13:56:23 CST 2025 get error\n180 at Mon Apr 07 13:56:23 CST 2025 get error\n181 at Mon Apr 07 13:56:23 CST 2025 get error\n182 at Mon Apr 07 13:56:23 CST 2025 get error\n183 at Mon Apr 07 13:56:23 CST 2025 get error\n184 at Mon Apr 07 13:56:23 CST 2025 get error\n185 at Mon Apr 07 13:56:23 CST 2025 get error\n186 at Mon Apr 07 13:56:23 CST 2025 get error\n187 at Mon Apr 07 13:56:23 CST 2025 get error\n188 at Mon Apr 07 13:56:23 CST 2025 get error\n189 at Mon Apr 07 13:56:23 CST 2025 get error\n190 at Mon Apr 07 13:56:23 CST 2025 get error\n191 at Mon Apr 07 13:56:23 CST 2025 get error\n192 at Mon Apr 07 13:56:23 CST 2025 get error\n193 at Mon Apr 07 13:56:23 CST 2025 get error\n194 at Mon Apr 07 13:56:23 CST 2025 get error\n195 at Mon Apr 07 13:56:23 CST 2025 get error\n196 at Mon Apr 07 13:56:23 CST 2025 get error\n197 at Mon Apr 07 13:56:23 CST 2025 get error\n198 at Mon Apr 07 13:56:23 CST 2025 get error\n199 at Mon Apr 07 13:56:23 CST 2025 get error\ntotal num:106\n```\n\n可以看到，漏桶在处理突发流量上存在一定的问题，如果流量迅速打满这个桶，那么漏桶就会出现很长一段时间的不能获取。\n\n这里主要是IO耗时，和无法模拟真实流量，所以不太好测试\n\n## 这时候我们再搓一个令牌桶\n\n```java\nimport java.util.Date;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.TimeUnit;\n\npublic class TokenBucket {\n    private int qps;\n    private LinkedBlockingDeque\u003CDate> tokenBucket;\n\n    private void initGenToken(){\n        for (int i = 0; i \u003C qps; i++) {\n            //一开始先把桶装满\n            tokenBucket.offer(new Date());\n        }\n      \t//生成，令牌\n        Runnable run = new Runnable() {\n            @Override\n            public void run() {\n                while(true){\n                    try {\n                        TimeUnit.MICROSECONDS.sleep(1000/qps);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    tokenBucket.offer(new Date());\n                }\n            }\n        };\n        Thread thread = new Thread(run);\n        thread.start();\n\n    }\n\n    public TokenBucket(int qps,int capacity){\n        this.qps = qps;\n        this.tokenBucket = new LinkedBlockingDeque\u003C>(capacity);\n        initGenToken();\n    }\n\n    public boolean tryAcquire(){\n        Date date = tokenBucket.poll();\n        return date != null;\n    }\n    public static void main(String[] args) throws InterruptedException {\n        TokenBucket tokenBucket = new TokenBucket(100,100);\n        int count = 0;\n        for(int i=0;i\u003C200;i++){\n            Date now = new Date();\n            if(tokenBucket.tryAcquire()){\n                count++;\n                System.out.println(i+\" at \"+now+\" get success\");\n            }else {\n                System.out.println(i+\" at \"+now+\" get error\");\n            }\n        }\n        System.out.println(\"total num:\"+ count);\n    }\n}\n```\n\n消耗令牌的过程如下：\n\n```\n0 at Mon Apr 07 13:54:10 CST 2025 get success\n1 at Mon Apr 07 13:54:10 CST 2025 get success\n2 at Mon Apr 07 13:54:10 CST 2025 get success\n3 at Mon Apr 07 13:54:10 CST 2025 get success\n4 at Mon Apr 07 13:54:10 CST 2025 get success\n5 at Mon Apr 07 13:54:10 CST 2025 get success\n6 at Mon Apr 07 13:54:10 CST 2025 get success\n7 at Mon Apr 07 13:54:10 CST 2025 get success\n8 at Mon Apr 07 13:54:10 CST 2025 get success\n9 at Mon Apr 07 13:54:10 CST 2025 get success\n10 at Mon Apr 07 13:54:10 CST 2025 get success\n11 at Mon Apr 07 13:54:10 CST 2025 get success\n12 at Mon Apr 07 13:54:10 CST 2025 get success\n13 at Mon Apr 07 13:54:10 CST 2025 get success\n14 at Mon Apr 07 13:54:10 CST 2025 get success\n15 at Mon Apr 07 13:54:10 CST 2025 get success\n16 at Mon Apr 07 13:54:10 CST 2025 get success\n17 at Mon Apr 07 13:54:10 CST 2025 get success\n18 at Mon Apr 07 13:54:10 CST 2025 get success\n19 at Mon Apr 07 13:54:10 CST 2025 get success\n20 at Mon Apr 07 13:54:10 CST 2025 get success\n21 at Mon Apr 07 13:54:10 CST 2025 get success\n22 at Mon Apr 07 13:54:10 CST 2025 get success\n23 at Mon Apr 07 13:54:10 CST 2025 get success\n24 at Mon Apr 07 13:54:10 CST 2025 get success\n25 at Mon Apr 07 13:54:10 CST 2025 get success\n26 at Mon Apr 07 13:54:10 CST 2025 get success\n27 at Mon Apr 07 13:54:10 CST 2025 get success\n28 at Mon Apr 07 13:54:10 CST 2025 get success\n29 at Mon Apr 07 13:54:10 CST 2025 get success\n30 at Mon Apr 07 13:54:10 CST 2025 get success\n31 at Mon Apr 07 13:54:10 CST 2025 get success\n32 at Mon Apr 07 13:54:10 CST 2025 get success\n33 at Mon Apr 07 13:54:10 CST 2025 get success\n34 at Mon Apr 07 13:54:10 CST 2025 get success\n35 at Mon Apr 07 13:54:10 CST 2025 get success\n36 at Mon Apr 07 13:54:10 CST 2025 get success\n37 at Mon Apr 07 13:54:10 CST 2025 get success\n38 at Mon Apr 07 13:54:10 CST 2025 get success\n39 at Mon Apr 07 13:54:10 CST 2025 get success\n40 at Mon Apr 07 13:54:10 CST 2025 get success\n41 at Mon Apr 07 13:54:10 CST 2025 get success\n42 at Mon Apr 07 13:54:10 CST 2025 get success\n43 at Mon Apr 07 13:54:10 CST 2025 get success\n44 at Mon Apr 07 13:54:10 CST 2025 get success\n45 at Mon Apr 07 13:54:10 CST 2025 get success\n46 at Mon Apr 07 13:54:10 CST 2025 get success\n47 at Mon Apr 07 13:54:10 CST 2025 get success\n48 at Mon Apr 07 13:54:10 CST 2025 get success\n49 at Mon Apr 07 13:54:10 CST 2025 get success\n50 at Mon Apr 07 13:54:10 CST 2025 get success\n51 at Mon Apr 07 13:54:10 CST 2025 get success\n52 at Mon Apr 07 13:54:10 CST 2025 get success\n53 at Mon Apr 07 13:54:10 CST 2025 get success\n54 at Mon Apr 07 13:54:10 CST 2025 get success\n55 at Mon Apr 07 13:54:10 CST 2025 get success\n56 at Mon Apr 07 13:54:10 CST 2025 get success\n57 at Mon Apr 07 13:54:10 CST 2025 get success\n58 at Mon Apr 07 13:54:10 CST 2025 get success\n59 at Mon Apr 07 13:54:10 CST 2025 get success\n60 at Mon Apr 07 13:54:10 CST 2025 get success\n61 at Mon Apr 07 13:54:10 CST 2025 get success\n62 at Mon Apr 07 13:54:10 CST 2025 get success\n63 at Mon Apr 07 13:54:10 CST 2025 get success\n64 at Mon Apr 07 13:54:10 CST 2025 get success\n65 at Mon Apr 07 13:54:10 CST 2025 get success\n66 at Mon Apr 07 13:54:10 CST 2025 get success\n67 at Mon Apr 07 13:54:10 CST 2025 get success\n68 at Mon Apr 07 13:54:10 CST 2025 get success\n69 at Mon Apr 07 13:54:10 CST 2025 get success\n70 at Mon Apr 07 13:54:10 CST 2025 get success\n71 at Mon Apr 07 13:54:10 CST 2025 get success\n72 at Mon Apr 07 13:54:10 CST 2025 get success\n73 at Mon Apr 07 13:54:10 CST 2025 get success\n74 at Mon Apr 07 13:54:10 CST 2025 get success\n75 at Mon Apr 07 13:54:10 CST 2025 get success\n76 at Mon Apr 07 13:54:10 CST 2025 get success\n77 at Mon Apr 07 13:54:10 CST 2025 get success\n78 at Mon Apr 07 13:54:10 CST 2025 get success\n79 at Mon Apr 07 13:54:10 CST 2025 get success\n80 at Mon Apr 07 13:54:10 CST 2025 get success\n81 at Mon Apr 07 13:54:10 CST 2025 get success\n82 at Mon Apr 07 13:54:10 CST 2025 get success\n83 at Mon Apr 07 13:54:10 CST 2025 get success\n84 at Mon Apr 07 13:54:10 CST 2025 get success\n85 at Mon Apr 07 13:54:10 CST 2025 get success\n86 at Mon Apr 07 13:54:10 CST 2025 get success\n87 at Mon Apr 07 13:54:10 CST 2025 get success\n88 at Mon Apr 07 13:54:10 CST 2025 get success\n89 at Mon Apr 07 13:54:10 CST 2025 get success\n90 at Mon Apr 07 13:54:10 CST 2025 get success\n91 at Mon Apr 07 13:54:10 CST 2025 get success\n92 at Mon Apr 07 13:54:10 CST 2025 get success\n93 at Mon Apr 07 13:54:10 CST 2025 get success\n94 at Mon Apr 07 13:54:10 CST 2025 get success\n95 at Mon Apr 07 13:54:10 CST 2025 get success\n96 at Mon Apr 07 13:54:10 CST 2025 get success\n97 at Mon Apr 07 13:54:10 CST 2025 get success\n98 at Mon Apr 07 13:54:10 CST 2025 get success\n99 at Mon Apr 07 13:54:10 CST 2025 get success\n100 at Mon Apr 07 13:54:10 CST 2025 get success\n101 at Mon Apr 07 13:54:10 CST 2025 get success\n102 at Mon Apr 07 13:54:10 CST 2025 get success\n103 at Mon Apr 07 13:54:10 CST 2025 get success\n104 at Mon Apr 07 13:54:10 CST 2025 get error\n105 at Mon Apr 07 13:54:10 CST 2025 get error\n106 at Mon Apr 07 13:54:10 CST 2025 get error\n107 at Mon Apr 07 13:54:10 CST 2025 get error\n108 at Mon Apr 07 13:54:10 CST 2025 get error\n109 at Mon Apr 07 13:54:10 CST 2025 get error\n110 at Mon Apr 07 13:54:10 CST 2025 get error\n111 at Mon Apr 07 13:54:10 CST 2025 get error\n112 at Mon Apr 07 13:54:10 CST 2025 get error\n113 at Mon Apr 07 13:54:10 CST 2025 get error\n114 at Mon Apr 07 13:54:10 CST 2025 get error\n115 at Mon Apr 07 13:54:10 CST 2025 get error\n116 at Mon Apr 07 13:54:10 CST 2025 get error\n117 at Mon Apr 07 13:54:10 CST 2025 get error\n118 at Mon Apr 07 13:54:10 CST 2025 get error\n119 at Mon Apr 07 13:54:10 CST 2025 get error\n120 at Mon Apr 07 13:54:10 CST 2025 get error\n121 at Mon Apr 07 13:54:10 CST 2025 get success\n122 at Mon Apr 07 13:54:10 CST 2025 get error\n123 at Mon Apr 07 13:54:10 CST 2025 get error\n124 at Mon Apr 07 13:54:10 CST 2025 get error\n125 at Mon Apr 07 13:54:10 CST 2025 get error\n126 at Mon Apr 07 13:54:10 CST 2025 get error\n127 at Mon Apr 07 13:54:10 CST 2025 get error\n128 at Mon Apr 07 13:54:10 CST 2025 get error\n129 at Mon Apr 07 13:54:10 CST 2025 get error\n130 at Mon Apr 07 13:54:10 CST 2025 get error\n131 at Mon Apr 07 13:54:10 CST 2025 get error\n132 at Mon Apr 07 13:54:10 CST 2025 get error\n133 at Mon Apr 07 13:54:10 CST 2025 get error\n134 at Mon Apr 07 13:54:10 CST 2025 get error\n135 at Mon Apr 07 13:54:10 CST 2025 get error\n136 at Mon Apr 07 13:54:10 CST 2025 get error\n137 at Mon Apr 07 13:54:10 CST 2025 get error\n138 at Mon Apr 07 13:54:10 CST 2025 get error\n139 at Mon Apr 07 13:54:10 CST 2025 get error\n140 at Mon Apr 07 13:54:10 CST 2025 get error\n141 at Mon Apr 07 13:54:10 CST 2025 get error\n142 at Mon Apr 07 13:54:10 CST 2025 get error\n143 at Mon Apr 07 13:54:10 CST 2025 get error\n144 at Mon Apr 07 13:54:10 CST 2025 get error\n145 at Mon Apr 07 13:54:10 CST 2025 get error\n146 at Mon Apr 07 13:54:10 CST 2025 get error\n147 at Mon Apr 07 13:54:10 CST 2025 get error\n148 at Mon Apr 07 13:54:10 CST 2025 get error\n149 at Mon Apr 07 13:54:10 CST 2025 get error\n150 at Mon Apr 07 13:54:10 CST 2025 get error\n151 at Mon Apr 07 13:54:10 CST 2025 get error\n152 at Mon Apr 07 13:54:10 CST 2025 get error\n153 at Mon Apr 07 13:54:10 CST 2025 get error\n154 at Mon Apr 07 13:54:10 CST 2025 get error\n155 at Mon Apr 07 13:54:10 CST 2025 get error\n156 at Mon Apr 07 13:54:10 CST 2025 get error\n157 at Mon Apr 07 13:54:10 CST 2025 get error\n158 at Mon Apr 07 13:54:10 CST 2025 get error\n159 at Mon Apr 07 13:54:10 CST 2025 get error\n160 at Mon Apr 07 13:54:10 CST 2025 get success\n161 at Mon Apr 07 13:54:10 CST 2025 get error\n162 at Mon Apr 07 13:54:10 CST 2025 get error\n163 at Mon Apr 07 13:54:10 CST 2025 get error\n164 at Mon Apr 07 13:54:10 CST 2025 get error\n165 at Mon Apr 07 13:54:10 CST 2025 get error\n166 at Mon Apr 07 13:54:10 CST 2025 get error\n167 at Mon Apr 07 13:54:10 CST 2025 get error\n168 at Mon Apr 07 13:54:10 CST 2025 get error\n169 at Mon Apr 07 13:54:10 CST 2025 get error\n170 at Mon Apr 07 13:54:10 CST 2025 get error\n171 at Mon Apr 07 13:54:10 CST 2025 get error\n172 at Mon Apr 07 13:54:10 CST 2025 get error\n173 at Mon Apr 07 13:54:10 CST 2025 get error\n174 at Mon Apr 07 13:54:10 CST 2025 get error\n175 at Mon Apr 07 13:54:10 CST 2025 get error\n176 at Mon Apr 07 13:54:10 CST 2025 get error\n177 at Mon Apr 07 13:54:10 CST 2025 get error\n178 at Mon Apr 07 13:54:10 CST 2025 get error\n179 at Mon Apr 07 13:54:10 CST 2025 get error\n180 at Mon Apr 07 13:54:10 CST 2025 get error\n181 at Mon Apr 07 13:54:10 CST 2025 get error\n182 at Mon Apr 07 13:54:10 CST 2025 get error\n183 at Mon Apr 07 13:54:10 CST 2025 get error\n184 at Mon Apr 07 13:54:10 CST 2025 get error\n185 at Mon Apr 07 13:54:10 CST 2025 get error\n186 at Mon Apr 07 13:54:10 CST 2025 get error\n187 at Mon Apr 07 13:54:10 CST 2025 get error\n188 at Mon Apr 07 13:54:10 CST 2025 get error\n189 at Mon Apr 07 13:54:10 CST 2025 get success\n190 at Mon Apr 07 13:54:10 CST 2025 get error\n191 at Mon Apr 07 13:54:10 CST 2025 get error\n192 at Mon Apr 07 13:54:10 CST 2025 get error\n193 at Mon Apr 07 13:54:10 CST 2025 get error\n194 at Mon Apr 07 13:54:10 CST 2025 get error\n195 at Mon Apr 07 13:54:10 CST 2025 get error\n196 at Mon Apr 07 13:54:10 CST 2025 get error\n197 at Mon Apr 07 13:54:10 CST 2025 get error\n198 at Mon Apr 07 13:54:10 CST 2025 get error\n199 at Mon Apr 07 13:54:10 CST 2025 get error\ntotal num:107\n```","src/content/posts/origin/2025-04-07-限流的实现.md","ca349e80703fdd4b",{"html":161,"metadata":162},"\u003Ch1 id=\"常见的限流算法\">常见的限流算法\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 常见的限流算法\" href=\"#常见的限流算法\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>常见的几种限流算法如下：\u003C/p>\n\u003Col>\n\u003Cli>令牌桶\u003C/li>\n\u003Cli>漏桶\u003C/li>\n\u003Cli>滑动窗口\u003C/li>\n\u003Cli>固定窗口\u003C/li>\n\u003C/ol>\n\u003Cp>我在面试的时候实现的方式就有点类似于4，面试官也提出会有突刺问题，后面问我怎么优化，因为我实在不会写令牌桶的算法，我就说了滑动窗口，更加细粒度的划分这块。\u003C/p>\n\u003Cp>所以接下来实现一下漏桶和令牌桶吧\u003C/p>\n\u003Ch2 id=\"漏桶\">漏桶\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 漏桶\" href=\"#漏桶\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> LeakyBucket\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //定义漏桶速率\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> qps;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //定义漏桶\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> LinkedBlockingDeque&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Object\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> waterBucket;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> initLeaky\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Runnable run \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                    //使用TimeUnit组件，每隔1000/qps处理一个消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        TimeUnit.MICROSECONDS.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sleep\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">/\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">qps);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (InterruptedException \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> RuntimeException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                    //漏水\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    waterBucket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">poll\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Thread thread \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Thread\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(run);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        thread.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">start\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> LeakyBucket\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> capacity\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> qps\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.qps \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> qps;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.waterBucket \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> LinkedBlockingDeque&#x3C;>(capacity);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //创建完桶要开始滴水\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">        initLeaky\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> boolean\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> tryAcquire\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //这里一定要用offer，否则超容量就报错了\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> waterBucket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">offer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> InterruptedException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> count \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        LeakyBucket leakyBucket \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> LeakyBucket\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Date now \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(leakyBucket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">tryAcquire\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" at \"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">now\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" get success\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" at \"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">now\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" get error\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"total num:\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> count);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>输出结果并不严格限制1s只能获取一百个，而是只要桶还能装下即可获取流量允许，所以结果如下：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>0 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>1 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>2 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>3 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>4 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>5 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>6 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>7 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>8 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>9 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>10 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>11 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>12 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>13 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>14 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>15 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>16 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>17 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>18 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>19 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>20 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>21 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>22 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>23 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>24 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>25 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>26 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>27 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>28 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>29 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>30 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>31 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>32 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>33 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>34 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>35 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>36 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>37 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>38 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>39 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>40 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>41 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>42 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>43 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>44 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>45 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>46 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>47 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>48 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>49 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>50 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>51 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>52 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>53 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>54 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>55 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>56 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>57 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>58 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>59 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>60 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>61 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>62 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>63 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>64 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>65 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>66 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>67 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>68 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>69 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>70 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>71 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>72 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>73 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>74 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>75 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>76 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>77 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>78 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>79 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>80 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>81 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>82 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>83 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>84 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>85 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>86 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>87 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>88 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>89 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>90 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>91 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>92 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>93 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>94 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>95 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>96 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>97 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>98 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>99 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>100 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>101 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>102 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>103 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>104 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>105 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>106 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>107 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>108 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>109 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>110 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>111 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>112 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>113 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>114 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>115 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>116 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>117 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>118 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>119 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>120 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>121 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>122 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>123 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>124 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>125 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>126 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>127 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>128 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>129 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>130 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>131 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>132 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>133 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>134 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>135 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>136 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>137 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>138 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>139 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>140 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>141 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>142 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>143 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>144 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>145 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>146 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>147 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>148 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>149 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>150 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>151 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>152 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>153 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>154 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>155 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>156 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>157 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>158 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>159 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>160 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>161 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>162 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>163 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>164 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>165 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>166 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>167 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>168 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>169 at Mon Apr 07 13:56:23 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>170 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>171 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>172 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>173 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>174 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>175 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>176 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>177 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>178 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>179 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>180 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>181 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>182 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>183 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>184 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>185 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>186 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>187 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>188 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>189 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>190 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>191 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>192 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>193 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>194 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>195 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>196 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>197 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>198 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>199 at Mon Apr 07 13:56:23 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>total num:106\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>可以看到，漏桶在处理突发流量上存在一定的问题，如果流量迅速打满这个桶，那么漏桶就会出现很长一段时间的不能获取。\u003C/p>\n\u003Cp>这里主要是IO耗时，和无法模拟真实流量，所以不太好测试\u003C/p>\n\u003Ch2 id=\"这时候我们再搓一个令牌桶\">这时候我们再搓一个令牌桶\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 这时候我们再搓一个令牌桶\" href=\"#这时候我们再搓一个令牌桶\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Date;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.LinkedBlockingDeque;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.TimeUnit;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> TokenBucket\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> qps;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> LinkedBlockingDeque&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> tokenBucket;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> initGenToken\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> qps; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //一开始先把桶装满\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            tokenBucket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">offer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//生成，令牌\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Runnable run \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        TimeUnit.MICROSECONDS.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sleep\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">/\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">qps);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (InterruptedException \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> RuntimeException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    tokenBucket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">offer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Thread thread \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Thread\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(run);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        thread.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">start\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> TokenBucket\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> qps\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> capacity\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.qps \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> qps;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.tokenBucket \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> LinkedBlockingDeque&#x3C;>(capacity);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">        initGenToken\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> boolean\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> tryAcquire\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Date date \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tokenBucket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">poll\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> date \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> InterruptedException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        TokenBucket tokenBucket \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> TokenBucket\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> count \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Date now \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tokenBucket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">tryAcquire\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" at \"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">now\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" get success\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" at \"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">now\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" get error\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"total num:\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> count);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>消耗令牌的过程如下：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>0 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>1 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>2 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>3 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>4 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>5 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>6 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>7 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>8 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>9 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>10 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>11 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>12 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>13 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>14 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>15 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>16 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>17 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>18 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>19 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>20 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>21 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>22 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>23 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>24 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>25 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>26 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>27 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>28 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>29 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>30 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>31 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>32 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>33 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>34 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>35 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>36 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>37 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>38 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>39 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>40 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>41 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>42 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>43 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>44 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>45 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>46 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>47 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>48 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>49 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>50 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>51 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>52 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>53 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>54 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>55 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>56 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>57 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>58 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>59 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>60 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>61 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>62 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>63 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>64 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>65 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>66 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>67 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>68 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>69 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>70 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>71 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>72 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>73 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>74 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>75 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>76 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>77 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>78 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>79 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>80 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>81 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>82 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>83 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>84 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>85 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>86 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>87 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>88 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>89 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>90 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>91 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>92 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>93 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>94 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>95 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>96 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>97 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>98 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>99 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>100 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>101 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>102 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>103 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>104 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>105 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>106 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>107 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>108 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>109 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>110 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>111 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>112 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>113 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>114 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>115 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>116 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>117 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>118 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>119 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>120 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>121 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>122 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>123 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>124 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>125 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>126 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>127 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>128 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>129 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>130 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>131 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>132 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>133 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>134 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>135 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>136 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>137 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>138 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>139 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>140 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>141 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>142 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>143 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>144 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>145 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>146 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>147 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>148 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>149 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>150 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>151 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>152 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>153 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>154 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>155 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>156 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>157 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>158 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>159 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>160 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>161 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>162 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>163 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>164 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>165 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>166 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>167 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>168 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>169 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>170 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>171 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>172 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>173 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>174 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>175 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>176 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>177 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>178 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>179 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>180 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>181 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>182 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>183 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>184 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>185 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>186 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>187 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>188 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>189 at Mon Apr 07 13:54:10 CST 2025 get success\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>190 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>191 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>192 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>193 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>194 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>195 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>196 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>197 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>198 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>199 at Mon Apr 07 13:54:10 CST 2025 get error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>total num:107\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>",{"headings":163,"localImagePaths":170,"remoteImagePaths":171,"frontmatter":172,"imagePaths":178},[164,166,168],{"depth":25,"slug":165,"text":165},"常见的限流算法",{"depth":118,"slug":167,"text":167},"漏桶",{"depth":118,"slug":169,"text":169},"这时候我们再搓一个令牌桶",[],[],{"title":151,"tags":173,"categories":174,"mathjax":105,"published":176,"abbrlink":156,"description":153,"minutes":177},[101,155,144],[175],"面试拾遗",["Date","2025-04-07T12:58:49.000Z"],23,[],"origin/2025-03-18-k个一组翻转链表",{"id":179,"data":181,"body":189,"filePath":190,"assetImports":191,"digest":195,"rendered":196},{"title":182,"published":183,"description":184,"updated":185,"tags":186,"draft":103,"pin":104,"toc":105,"lang":106,"abbrlink":188},"K个一组翻转链表",["Date","2025-03-18T16:42:03.000Z"],"看懂这篇，反转链表系列就都能看懂啦！",["Date","2025-03-18T16:42:03.000Z"],[187,101],"Hot100","reverse-nodes-in-k-group","# K个一组翻转链表\n\n[LeetCode原题链接](https://leetcode.cn/problems/reverse-nodes-in-k-group/description/?envType=study-plan-v2&envId=top-100-liked)\n\n## 题目描述\n\n给你链表的头节点 `head` ，每 `k` 个节点一组进行翻转，请你返回修改后的链表。\n\n`k` 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 `k` 的整数倍，那么请将最后剩余的节点保持原有顺序。\n\n你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。\n\n**示例1**\n\n![示例1](https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg)\n\n```\n输入：head = [1,2,3,4,5], k = 2\n输出：[2,1,4,3,5]\n```\n\n**示例2**\n\n![示例2](https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg)\n\n```\n输入：head = [1,2,3,4,5], k = 3\n输出：[3,2,1,4,5]\n```\n\n**提示：**\n\n- 链表中的节点数目为 `n`\n- `1 \u003C= k \u003C= n \u003C= 5000`\n- `0 \u003C= Node.val \u003C= 1000`\n\n**进阶：**你可以设计一个只用 `O(1)` 额外内存空间的算法解决此问题吗？\n\n## 题目分析\n\n这题难度被划归为困难，其实显然是不能达到困难题的难度的，只不过如果不习惯封装编程，单独将反转链表的方法单独写的话可能会有一些边界类型的问题出现。不过提到了需要使用 `O(1)` 额外内存空间，前置题目为反转链表，题目链接为：[反转链表](https://leetcode.cn/problems/reverse-linked-list/description/?envType=study-plan-v2&envId=top-100-liked)，只不过反转链表提到可以使用递归或者迭代的方式，但是递归的方式显然需要使用系统栈，无法实现额外内存空间需求，所以这题几乎已经锁定使用迭代的方式进行反转。\n\n首先我们先尝试做一下反转链表这道题目\n\n### 反转链表\n\n给你单链表的头节点 `head` ，请你反转链表，并返回反转后的链表。\n\n![示例1](https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg)\n\n```\n输入：head = [1,2,3,4,5]\n输出：[5,4,3,2,1]\n```\n\n官方定义的链表结构还是比较简单的，没有要用户自己定义链表，有些企业的面试题是需要自己定义的嘛，所以我们也简单自己定义一下，防患未然了属于是。\n\n```java\n/**\n*定义链表\n*/\npublic class ListNode{\n\tint val;\n\tListNode next;\n\t//空参构造方法\n\tListNode(){\n\t\n\t}\n\tListNode(int val){\n\t\tthis.val=val;\n\t}\n\tListNode(int val,ListNode next){\n\t\tthis.val=val;\n\t\tthis.next=next;\n\t}\n}\n```\n\n在实现任务之前，先简单实现一个输入获取和结果打印的方法，便于本地自行测试\n\n```java\npublic static ListNode readDate(){\n    Scanner sc = new Scanner(System.in);\n    String[] vals = sc.nextLine().replaceAll(\"^\\\\[*|\\\\]*$\", \"\").split(\",\");\n    ListNode head = new ListNode();\n    ListNode pre = head;\n    for(String val:vals){\n        pre.next = new ListNode(Integer.valueOf(val));\n        pre = pre.next;\n    }\n    return head.next;\n}\n\npublic static void printListNode(ListNode head){\n    StringBuffer sb = new StringBuffer();\n    while(null != head){\n        sb.append(head.val).append(\",\");\n        head = head.next;\n    }\n    sb.deleteCharAt(sb.length()-1);\n    System.out.println(sb.toString());\n}\n```\n\n接下来就是正常实现了，我们分为两种方式实现吧，首先是比较简单的递归的方式实现，递归的方式就是不断把后半段反转然后作为前半段的头部分。\n\n我的代码可能有一点唐氏，讲得也没有官方的好，所以我贴在这里，简单介绍一下，一些注释基本代表了我的想法，需要注意的只有一点，就是需要先翻转后面的节点，然后再和前面的节点拼接。\n\n```java\n/**\n * 反转链表的递归实现\n * @param head 后面需要反转的链表的头节点\n * @param pre 已经完成反转的前半部分的最后一个节点\n * @return 反转完之后链表的头节点\n */\npublic static ListNode reverseListDFS(ListNode head,ListNode pre){\n  \t//判空\n    if(null == head) return head;\n    //定义递归终点，也就是最后一个节点，直接把它和它前面的那个节点拼起来然后返回\n    if(null == head.next){\n      head.next=pre;\n      return head;\n    }\n  \t//如果不是递归终点，这部分就需要理解一下\n    else {\n      \t//首先是将后面部分翻转！\n        ListNode res = reverseListDFS(head.next, head);\n      \t//然后将改节点的next改为pre，拼接起来，顺序一定不能错\n        head.next = pre;\n        return res;\n    }\n}\n\npublic ListNode reverseList(ListNode head) {\n  \treturn reverseListDFS(head,null);\n}\n```\n\n然后让我们来实现一下迭代的方式，迭代主要还是双指针的思路，其实相对而言思路比递归更容易理解一些。\n\n```java\n/**\n * 反转链表迭代实现\n * @param head 头指针\n * @return 反转完之后链表的头节点\n */\npublic static ListNode reverseListIter(ListNode head) {\n    //判空\n    if(null == head) return null;\n    //定义双指针，这个定义是有技巧的，因为头节点的next要是null\n    ListNode lst = null;\n    ListNode pre = head;\n    //依次设置前指针的next为后指针\n    while(null != pre){\n        ListNode tmp=pre.next;\n        pre.next = lst;\n        lst = pre;\n        pre = tmp;\n    }\n    //当前指针为空时，后指针所指着的位置就是最后一个Node，也就是我们所需要的head\n    return lst;\n}\n```\n\n然后反转链表部分我们就基本讲完了，但是迭代这个部分的代码在后面我们还需要进行一点小小的修改，为什么呢，因为K个一组反转链表，链表的终点不是null，而是我们需要的终点是第K个节点。\n\n接下来就是K个一组反转链表的任务，简单来说，我们只需要把任务拆成K个反转链表的子任务。\n\n```java\npublic static void reverseSubList(ListNode head, ListNode last) {\n    //判空\n    if(null == head) return;\n    //定义双指针\n    ListNode lst = null;\n    ListNode pre = head;\n    //依次设置前指针的next为后指针\n    while(last != lst){\n        ListNode tmp = pre.next;\n        pre.next = lst;\n        lst = pre;\n        pre = tmp;\n    }\n}\n\npublic ListNode reverseKGroup(ListNode head, int k) {\n    //当k=1的时候，直接返回\n    if(1 == k) return head;\n    //为了统一以及便于找到头，我们定义一个伪头部，其实这是很常用的方法\n    ListNode fake_head = new ListNode();\n    fake_head.next=head;\n    //如果k不等于1，接下来我们就需要定义一个节点，这个节点所需要做的事情就是找到每组的第K个节点\n    ListNode findK = fake_head;\n    ListNode lst_one = fake_head;\n    int count = 0;\n    //这里只需要判断findK是不是空，因为它一直走在其余两个交换位置的指针的前面\n    while(null!=findK){\n        //如果不是第K个，直接后移，不做处理\n        if(count!=k){\n            count++;\n            findK=findK.next;\n        }\n        //如果是第K个\n        else{\n            //重置寻找循环\n            count=0;\n            //首先是获得子段的头，子段的尾就是findK\n            ListNode child_head=lst_one.next;\n            ListNode K_next=findK.next;\n            //然后进行子段反转，这里会把它的头尾都断开，所以之后就需要重新拼接\n            reverseSubList(child_head,findK);\n            //然后将前面的子段和尾节点拼接\n            lst_one.next=findK;\n            //将头节点和后面的节点拼接\n            child_head.next=K_next;\n            //重置last_one和findK\n            lst_one = child_head;\n            findK = child_head;\n        }\n    }\n    return fake_head.next;\n}\n```\n\n我只能说，很优雅，但是还是建议大家看看官解，我写的很简陋。","src/content/posts/origin/2025-03-18-K个一组翻转链表.md",[192,193,194],"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg","https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg","https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg","6d71494218c88987",{"html":197,"metadata":198},"\u003Ch1 id=\"k个一组翻转链表\">K个一组翻转链表\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to K个一组翻转链表\" href=\"#k个一组翻转链表\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/reverse-nodes-in-k-group/description/?envType=study-plan-v2&#x26;envId=top-100-liked\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">LeetCode原题链接\u003C/a>\u003C/p>\n\u003Ch2 id=\"题目描述\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>给你链表的头节点 \u003Ccode>head\u003C/code> ，每 \u003Ccode>k\u003C/code> 个节点一组进行翻转，请你返回修改后的链表。\u003C/p>\n\u003Cp>\u003Ccode>k\u003C/code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 \u003Ccode>k\u003C/code> 的整数倍，那么请将最后剩余的节点保持原有顺序。\u003C/p>\n\u003Cp>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。\u003C/p>\n\u003Cp>\u003Cstrong>示例1\u003C/strong>\u003C/p>\n\u003Cfigure>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;inferSize&#x22;:true,&#x22;src&#x22;:&#x22;https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg&#x22;,&#x22;alt&#x22;:&#x22;示例1&#x22;,&#x22;index&#x22;:0}\">\u003Cfigcaption>示例1\u003C/figcaption>\u003C/figure>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：head = [1,2,3,4,5], k = 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[2,1,4,3,5]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例2\u003C/strong>\u003C/p>\n\u003Cfigure>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;inferSize&#x22;:true,&#x22;src&#x22;:&#x22;https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg&#x22;,&#x22;alt&#x22;:&#x22;示例2&#x22;,&#x22;index&#x22;:0}\">\u003Cfigcaption>示例2\u003C/figcaption>\u003C/figure>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：head = [1,2,3,4,5], k = 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[3,2,1,4,5]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>链表中的节点数目为 \u003Ccode>n\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>1 &#x3C;= k &#x3C;= n &#x3C;= 5000\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= Node.val &#x3C;= 1000\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>**进阶：**你可以设计一个只用 \u003Ccode>O(1)\u003C/code> 额外内存空间的算法解决此问题吗？\u003C/p>\n\u003Ch2 id=\"题目分析\">题目分析\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目分析\" href=\"#题目分析\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>这题难度被划归为困难，其实显然是不能达到困难题的难度的，只不过如果不习惯封装编程，单独将反转链表的方法单独写的话可能会有一些边界类型的问题出现。不过提到了需要使用 \u003Ccode>O(1)\u003C/code> 额外内存空间，前置题目为反转链表，题目链接为：\u003Ca href=\"https://leetcode.cn/problems/reverse-linked-list/description/?envType=study-plan-v2&#x26;envId=top-100-liked\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">反转链表\u003C/a>，只不过反转链表提到可以使用递归或者迭代的方式，但是递归的方式显然需要使用系统栈，无法实现额外内存空间需求，所以这题几乎已经锁定使用迭代的方式进行反转。\u003C/p>\n\u003Cp>首先我们先尝试做一下反转链表这道题目\u003C/p>\n\u003Ch3 id=\"反转链表\">反转链表\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 反转链表\" href=\"#反转链表\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>给你单链表的头节点 \u003Ccode>head\u003C/code> ，请你反转链表，并返回反转后的链表。\u003C/p>\n\u003Cfigure>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;inferSize&#x22;:true,&#x22;src&#x22;:&#x22;https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg&#x22;,&#x22;alt&#x22;:&#x22;示例1&#x22;,&#x22;index&#x22;:0}\">\u003Cfigcaption>示例1\u003C/figcaption>\u003C/figure>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：head = [1,2,3,4,5]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[5,4,3,2,1]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>官方定义的链表结构还是比较简单的，没有要用户自己定义链表，有些企业的面试题是需要自己定义的嘛，所以我们也简单自己定义一下，防患未然了属于是。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">*定义链表\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">*/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ListNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">\tint\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> val;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tListNode next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">\t//空参构造方法\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tListNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tListNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> val\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t\tthis\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.val\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">val;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tListNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> val\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,ListNode \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t\tthis\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.val\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">val;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t\tthis\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.next\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>在实现任务之前，先简单实现一个输入获取和结果打印的方法，便于本地自行测试\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ListNode \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">readDate\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Scanner sc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Scanner\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(System.in);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] vals \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sc.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">nextLine\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">replaceAll\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"^\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\\\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">[*|\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\\\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">]*$\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\",\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ListNode head \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ListNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ListNode pre \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(String val\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">vals){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        pre.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ListNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Integer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">valueOf\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(val));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        pre \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> head.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> printListNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ListNode head){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    StringBuffer sb \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> StringBuffer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> !=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> head){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(head.val).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\",\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        head \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> head.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">deleteCharAt\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">length\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>接下来就是正常实现了，我们分为两种方式实现吧，首先是比较简单的递归的方式实现，递归的方式就是不断把后半段反转然后作为前半段的头部分。\u003C/p>\n\u003Cp>我的代码可能有一点唐氏，讲得也没有官方的好，所以我贴在这里，简单介绍一下，一些注释基本代表了我的想法，需要注意的只有一点，就是需要先翻转后面的节点，然后再和前面的节点拼接。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * 反转链表的递归实现\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> head\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> 后面需要反转的链表的头节点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> pre\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> 已经完成反转的前半部分的最后一个节点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@return\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> 反转完之后链表的头节点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ListNode \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">reverseListDFS\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ListNode head,ListNode pre){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//判空\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> head) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //定义递归终点，也就是最后一个节点，直接把它和它前面的那个节点拼起来然后返回\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> head.next){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">      head.next\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">pre;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//如果不是递归终点，这部分就需要理解一下\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//首先是将后面部分翻转！\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ListNode res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> reverseListDFS\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(head.next, head);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//然后将改节点的next改为pre，拼接起来，顺序一定不能错\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        head.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ListNode \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">reverseList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ListNode head) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">  \treturn\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> reverseListDFS\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(head,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>然后让我们来实现一下迭代的方式，迭代主要还是双指针的思路，其实相对而言思路比递归更容易理解一些。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * 反转链表迭代实现\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> head\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> 头指针\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@return\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> 反转完之后链表的头节点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ListNode \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">reverseListIter\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ListNode head) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //判空\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> head) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">return\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //定义双指针，这个定义是有技巧的，因为头节点的next要是null\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ListNode lst \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ListNode pre \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //依次设置前指针的next为后指针\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> !=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ListNode tmp\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">pre.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        pre.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> lst;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        lst \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        pre \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tmp;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //当前指针为空时，后指针所指着的位置就是最后一个Node，也就是我们所需要的head\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> lst;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>然后反转链表部分我们就基本讲完了，但是迭代这个部分的代码在后面我们还需要进行一点小小的修改，为什么呢，因为K个一组反转链表，链表的终点不是null，而是我们需要的终点是第K个节点。\u003C/p>\n\u003Cp>接下来就是K个一组反转链表的任务，简单来说，我们只需要把任务拆成K个反转链表的子任务。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> reverseSubList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ListNode head, ListNode last) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //判空\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> head) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //定义双指针\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ListNode lst \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ListNode pre \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //依次设置前指针的next为后指针\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(last \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> lst){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ListNode tmp \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        pre.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> lst;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        lst \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        pre \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tmp;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ListNode \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">reverseKGroup\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ListNode head, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //当k=1的时候，直接返回\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //为了统一以及便于找到头，我们定义一个伪头部，其实这是很常用的方法\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ListNode fake_head \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ListNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    fake_head.next\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //如果k不等于1，接下来我们就需要定义一个节点，这个节点所需要做的事情就是找到每组的第K个节点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ListNode findK \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> fake_head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ListNode lst_one \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> fake_head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> count \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //这里只需要判断findK是不是空，因为它一直走在其余两个交换位置的指针的前面\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">findK){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //如果不是第K个，直接后移，不做处理\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">k){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            findK\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">findK.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //如果是第K个\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //重置寻找循环\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //首先是获得子段的头，子段的尾就是findK\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            ListNode child_head\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">lst_one.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            ListNode K_next\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">findK.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //然后进行子段反转，这里会把它的头尾都断开，所以之后就需要重新拼接\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">            reverseSubList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(child_head,findK);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //然后将前面的子段和尾节点拼接\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            lst_one.next\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">findK;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //将头节点和后面的节点拼接\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            child_head.next\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K_next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //重置last_one和findK\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            lst_one \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> child_head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            findK \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> child_head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> fake_head.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>我只能说，很优雅，但是还是建议大家看看官解，我写的很简陋。\u003C/p>",{"headings":199,"localImagePaths":208,"remoteImagePaths":209,"frontmatter":210,"imagePaths":217},[200,202,204,206],{"depth":25,"slug":201,"text":182},"k个一组翻转链表",{"depth":118,"slug":203,"text":203},"题目描述",{"depth":118,"slug":205,"text":205},"题目分析",{"depth":126,"slug":207,"text":207},"反转链表",[],[192,193,194],{"title":182,"description":184,"mathjax":105,"tags":211,"categories":212,"abbrlink":188,"published":214,"updated":215,"minutes":216},[187,101],[213],"刷题",["Date","2025-03-18T16:42:03.000Z"],["Date","2025-03-18T16:42:03.000Z"],8,[192,193,194],"origin/2025-04-01-通过canal订阅binlog自动更新redis",{"id":218,"data":220,"body":228,"filePath":229,"digest":230,"rendered":231},{"title":221,"published":222,"description":223,"tags":224,"draft":103,"pin":104,"toc":105,"lang":106,"abbrlink":227},"通过Canal订阅binlog自动更新Redis",["Date","2025-04-01T00:08:49.000Z"],"使用Canal订阅binlog实现联系人修改后的自动缓存刷新",[101,225,102,226],"Canal","binlog","canal-binlog","# 写在前面\n这是我扩充我的项目的一个点，有点摸着石头过河的意思，可能很多思路也不够企业化，然后技术选型什么的也不够正确。\n\n# 背景介绍\n\n因为我的项目是一个IM聊天项目，所以前端发来消息带有Uid和联系人Id，这时候后端需要进行权限验证，判断是不是好友，不是好友禁止发消息，这种验证是频繁的，所以用户的联系人要放在缓存里。但是用户可能会频繁的添加删除好友，这时候就需要维护缓存和数据库的一致性。\n\n我一开始是采用手动删除，延迟双删的思路，用户发第一条消息的时候就会出现明显的卡顿。所以其实应该在更新完联系人之后就把新的联系人信息放到缓存里。但是手工操作容易出错忽略在哪里没有删。\n\n刚好看八股看到了这种思路，就是通过订阅binlog，根据消息队列的消息里找出哪个用户的联系人信息被修改了，就来更新对应用户的联系人信息的缓存。\n\n所以就有了这篇博客。\n\n# MySQL开启binlog并且设定为RAW模式\n```mysql\nmysql> show variables like'%log_bin%';\n+---------------------------------+-----------------------------+\n| Variable_name                   | Value                       |\n+---------------------------------+-----------------------------+\n| log_bin                         | ON                          |\n| log_bin_basename                | /var/lib/mysql/binlog       |\n| log_bin_index                   | /var/lib/mysql/binlog.index |\n| log_bin_trust_function_creators | OFF                         |\n| log_bin_use_v1_row_events       | OFF                         |\n| sql_log_bin                     | ON                          |\n+---------------------------------+-----------------------------+\n6 rows in set (0.03 sec)\n```\n这里我简单看了一下我的库，不知道为什么是自己开启的，但是还是准备去配置文件看一眼是不是配置了server_id\n\n这里进去\n```\n/etc/mysql# vi my.cnf\n```\n加一下配置开启binlog就行了\n令人烦躁时的我50块的京东云服务器的2G内存快要顶不住压力了：）\n\n```\n[mysqld]\n# 开启 binlog\nlog-bin = /var/log/mysql/mysql-bin.log\n\n# 设置 server-id（每个 MySQL 实例必须唯一）\nserver-id = 1\n\n# 可选：设置 binlog 格式（ROW 是推荐的格式）\nbinlog_format = ROW\n\n# 可选：设置 binlog 过期时间（单位为天）\nexpire_logs_days = 7\n\n# 可选：限制 binlog 文件大小（单位为字节，默认值为 1GB）\nmax_binlog_size = 100M\n```\n\n# Canal下载并配置\n\n然后是下载Canal，技术选型方面，其实我能选择的不太多，主要就是Canal 和 Debezium。\n\n我选择Canal的原因大抵如下：\n\n轻量级：Canal专注于 MySQL 数据库的 CDC，架构相对简单，更加轻量化。\n\n独立于 Kafka：不像 Debezium一样，最初专为Kafka设计。\n\n易于部署：Canal 的部署相对简单，尤其是对单一数据库的监听、\n\n下载然后一键tar-zxf之后进行一下简单的配置，在提供的样例里修改。\n\n## 修改conf/example/instance.properties\n## mysql serverId\n```\ncanal.instance.mysql.slaveId = 100\n## 这个要和数据库的server-id不相同\ncanal.instance.master.address = 127.0.0.1:3306 \ncanal.instance.dbUsername = zhima  \ncanal.instance.dbPassword = ********\n```\n配置完之后可以自己先启动一下，就很简单，bash /bin/startup.sh\n\n然后稍微修改一下数据库中的一行，之后看一下example输出的日志\n\n```log\n2025-03-31 22:00:50.725 [destination = example , address = /127.0.0.1:3306 , EventParser] ERROR com.alibaba.otter.canal.common.alarm.LogAlarmHandler - destination:example[com.alibaba.otter.canal.parse.exception.CanalParseException: java.io.IOException: connect /127.0.0.1:3306 failure\nCaused by: java.io.IOException: connect /127.0.0.1:3306 failure\n    at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.connect(MysqlConnector.java:85)\n    at com.alibaba.otter.canal.parse.inbound.mysql.MysqlConnection.connect(MysqlConnection.java:104)\n    at com.alibaba.otter.canal.parse.inbound.mysql.MysqlEventParser.preDump(MysqlEventParser.java:89)\n    at com.alibaba.otter.canal.parse.inbound.AbstractEventParser$1.run(AbstractEventParser.java:171)\n    at java.lang.Thread.run(Thread.java:750)\nCaused by: java.io.IOException: Error When doing Client Authentication:ErrorPacket [errorNumber=1698, fieldCount=-1, message=Access denied for user 'root'@'localhost', sqlState=28000, sqlStateMarker=#]\n    at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.negotiate(MysqlConnector.java:325)\n    at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.connect(MysqlConnector.java:81)\n    ... 4 more\n]\n```\n\n如果像这样一般是配置有问题没连上，修改一下就行，之后成功连上之后就可以自己写一个客户端来进行调用啦，下面这段代码用来测试就很合适。\n\n```java\npackage com.karlyn.dogie;\n\nimport com.alibaba.otter.canal.client.CanalConnector;\nimport com.alibaba.otter.canal.client.CanalConnectors;\nimport com.alibaba.otter.canal.protocol.CanalEntry.*;\nimport com.alibaba.otter.canal.protocol.Message;\n\nimport java.net.InetSocketAddress;\nimport java.util.List;\n\n\npublic class SimpleCanalClientExample {\n\n    public static void run() {\n        // 连接信息配置\n        String hostname = \"*.*.*.*\";\n        int port = 11111;\n        String destination = \"example\";\n        String username = \"\";\n        String password = \"\";\n\n        // 创建链接\n        CanalConnector connector = CanalConnectors.newSingleConnector(\n                new InetSocketAddress(hostname, port), destination, username, password\n        );\n        System.out.println(\"连接创立成功\");\n        int batchSize = 1000;\n\n        try {\n            connector.connect();\n            connector.subscribe(\".*\\\\..*\");\n            connector.rollback();\n\n            while (true) {\n                Message message = connector.getWithoutAck(batchSize); // 获取指定数量的数据\n                long batchId = message.getId();\n                int size = message.getEntries().size();\n\n                // 没有拿到数据\n                if (batchId == -1 || size == 0) {\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                    }\n                } else {\n                    System.out.printf(\"message[batchId=%s, size=%s] \\n\", batchId, size);\n                    printEntry(message.getEntries());\n                }\n\n                connector.ack(batchId); // 提交确认\n                // connector.rollback(batchId); // 处理失败, 回滚数据\n            }\n        } finally {\n            connector.disconnect();\n        }\n    }\n\n    private static void printEntry(List\u003CEntry> entries) {\n        for (Entry entry : entries) {\n            if (entry.getEntryType() == EntryType.TRANSACTIONBEGIN || entry.getEntryType() == EntryType.TRANSACTIONEND) {\n                continue;\n            }\n\n            RowChange rowChange = null;\n            try {\n                rowChange = RowChange.parseFrom(entry.getStoreValue());\n            } catch (Exception e) {\n                throw new RuntimeException(\"ERROR ## parser of eromanga-event has an error , data:\" + entry.toString(),\n                        e);\n            }\n\n            EventType eventType = rowChange.getEventType();\n            System.out.println(String.format(\"binlog[%s:%s] , name[%s,%s] , eventType : %s\",\n                    entry.getHeader().getLogfileName(),\n                    entry.getHeader().getLogfileOffset(),\n                    entry.getHeader().getSchemaName(),\n                    entry.getHeader().getTableName(),\n                    eventType));\n\n            // 数据变化\n            for (RowData rowData : rowChange.getRowDatasList()) {\n                if (eventType == EventType.DELETE) {\n                    printColumn(rowData.getBeforeColumnsList());\n                } else if (eventType == EventType.INSERT) {\n                    printColumn(rowData.getAfterColumnsList());\n                } else {\n                    printColumn(rowData.getAfterColumnsList());\n                }\n            }\n        }\n    }\n\n    private static void printColumn(List\u003CColumn> columns) {\n        for (Column column : columns) {\n            System.out.println(column.getName() + \" : \" + column.getValue());\n        }\n    }\n\n    public static void main(String[] args) {\n        run();\n    }\n}\n```\n\n之后开始和消息队列和Springboot整合啦\n\n## 修改canal配置canal.properties\n```\ncanal.serverMode = rabbitMQ\n\n##################################################\n#########           RabbitMQ         #############\n##################################################\nrabbitmq.host = 127.0.0.1\nrabbitmq.virtual.host = /\nrabbitmq.exchange = canal-exchange\nrabbitmq.username = root\nrabbitmq.password = 123456\n```\n\n同时继续修改instance.properties\n```\n# mq config\n# canal.mq.topic=example\ncanal.mq.topic=canal-routing-key\n##为了过滤指定的表，我还加了如下限定\ncanal.instance.defaultDatabaseName=dogie\n\n# table regex\ncanal.instance.filter.regex=dogie\\\\.user_contact\n```\n\n然后重启canal服务\n\n# Springboot集成\n\n消息订阅\n```java\npackage com.karlyn.dogie.Canal;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.amqp.core.Queue;\n\n@Configuration\npublic class CanalProvider {\n    /**\n     * 队列\n     */\n    @Bean\n    public Queue canalQueue() {\n        /**\n         * durable:是否持久化，默认false，持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在；暂存队列：当前连接有效\n         * exclusive:默认为false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable\n         * autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除\n         */\n        return new Queue(RabbitConstant.CanalQueue, true);\n    }\n\n    /**\n     * 交换机，这里使用直连交换机\n     */\n    @Bean\n    DirectExchange canalExchange() {\n        return new DirectExchange(RabbitConstant.CanalExchange, true, false);\n    }\n\n    /**\n     * 绑定交换机和队列，并设置匹配键\n     */\n    @Bean\n    Binding bindingCanal() {\n        return BindingBuilder.bind(canalQueue()).to(canalExchange()).with(RabbitConstant.CanalRouting);\n    }\n}\n```\n消息消费，我这里写的比较简单，如果消息消费失败之后我会把它重新放回消息队列，但是这时候消息队列会一直把这个消息发给消费者，所以这块还需要优化一下。\n\n```java\n\npackage com.karlyn.dogie.Canal;\n\nimport com.alibaba.fastjson.JSON;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.karlyn.dogie.entity.enums.UserContactStatusEnum;\nimport com.karlyn.dogie.entity.po.UserContact;\nimport com.karlyn.dogie.entity.query.UserContactQuery;\nimport com.karlyn.dogie.mappers.UserContactMapper;\nimport com.karlyn.dogie.redis.RedisComponent;\nimport com.karlyn.dogie.util.JsonUtils;\nimport com.rabbitmq.client.Channel;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.amqp.support.AmqpHeaders;\nimport org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;\nimport org.springframework.messaging.handler.annotation.Header;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * Canal消息消费者\n */\n@Component\n@Slf4j\n@RabbitListener(queues = RabbitConstant.CanalQueue)\npublic class CanalConsumer {\n    private final UserContactMapper userContactMapper;\n    private final RedisComponent redisComponent;\n\n    public CanalConsumer(UserContactMapper userContactMapper, RedisComponent redisComponent) {\n        this.userContactMapper = userContactMapper;\n        this.redisComponent = redisComponent;\n    }\n\n    @RabbitHandler\n    public void Listener(String message, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG) long tag) throws IOException, InterruptedException {\n        System.out.println(\"收到canal消息：\" + message);\n        ObjectMapper objectMapper = new ObjectMapper();\n        Map\u003CString, Object> msg = objectMapper.readValue(message,new TypeReference\u003CMap\u003CString, Object>>() {});\n        boolean isDdl = (boolean) msg.get(\"isDdl\");\n        // 不处理DDL事件\n        if (isDdl) {\n            return;\n        }\n        String database = (String) msg.get(\"database\");\n        String table = (String) msg.get(\"table\");\n        String type = (String) msg.get(\"type\");\n        List\u003CLinkedHashMap> data = (List\u003CLinkedHashMap>) msg.get(\"data\");\n\n        if(database.equals(\"dogie\")&&table.equals(\"user_contact\")){\n            try{\n                for (LinkedHashMap s : data) {\n                    String UserId = (String) s.get(\"user_id\");\n                    log.info(\"更新{}的联系人缓存\",UserId);\n                    UserContactQuery userContactQuery = new UserContactQuery();\n                    userContactQuery.setUserId(UserId);\n                    userContactQuery.setStatus(UserContactStatusEnum.FRIEND.getStatus());\n                    List\u003CUserContact> userContactList = this.userContactMapper.selectList(userContactQuery);\n                    List\u003CString> contactIds = userContactList.stream().map(item->item.getContactId()).collect(Collectors.toList());\n                    this.redisComponent.cleanUserContact(UserId);\n                    if(!contactIds.isEmpty()){\n                        this.redisComponent.addUserContactBatch(UserId, contactIds);\n                    }\n                }\n                channel.basicAck(tag,false);\n            }catch (Exception e){\n                System.out.println(e.getMessage());\n                channel.basicNack(tag,false,true);\n            }\n        }\n    }\n}\n```","src/content/posts/origin/2025-04-01-通过Canal订阅binlog自动更新Redis.md","c86cd3e745098174",{"html":232,"metadata":233},"\u003Ch1 id=\"写在前面\">写在前面\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 写在前面\" href=\"#写在前面\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>这是我扩充我的项目的一个点，有点摸着石头过河的意思，可能很多思路也不够企业化，然后技术选型什么的也不够正确。\u003C/p>\n\u003Ch1 id=\"背景介绍\">背景介绍\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 背景介绍\" href=\"#背景介绍\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>因为我的项目是一个IM聊天项目，所以前端发来消息带有Uid和联系人Id，这时候后端需要进行权限验证，判断是不是好友，不是好友禁止发消息，这种验证是频繁的，所以用户的联系人要放在缓存里。但是用户可能会频繁的添加删除好友，这时候就需要维护缓存和数据库的一致性。\u003C/p>\n\u003Cp>我一开始是采用手动删除，延迟双删的思路，用户发第一条消息的时候就会出现明显的卡顿。所以其实应该在更新完联系人之后就把新的联系人信息放到缓存里。但是手工操作容易出错忽略在哪里没有删。\u003C/p>\n\u003Cp>刚好看八股看到了这种思路，就是通过订阅binlog，根据消息队列的消息里找出哪个用户的联系人信息被修改了，就来更新对应用户的联系人信息的缓存。\u003C/p>\n\u003Cp>所以就有了这篇博客。\u003C/p>\n\u003Ch1 id=\"mysql开启binlog并且设定为raw模式\">MySQL开启binlog并且设定为RAW模式\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to MySQL开启binlog并且设定为RAW模式\" href=\"#mysql开启binlog并且设定为raw模式\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>mysql> show variables like'%log_bin%';\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>+---------------------------------+-----------------------------+\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>| Variable_name                   | Value                       |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>+---------------------------------+-----------------------------+\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>| log_bin                         | ON                          |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>| log_bin_basename                | /var/lib/mysql/binlog       |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>| log_bin_index                   | /var/lib/mysql/binlog.index |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>| log_bin_trust_function_creators | OFF                         |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>| log_bin_use_v1_row_events       | OFF                         |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>| sql_log_bin                     | ON                          |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>+---------------------------------+-----------------------------+\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>6 rows in set (0.03 sec)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>这里我简单看了一下我的库，不知道为什么是自己开启的，但是还是准备去配置文件看一眼是不是配置了server_id\u003C/p>\n\u003Cp>这里进去\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>/etc/mysql# vi my.cnf\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>加一下配置开启binlog就行了\n令人烦躁时的我50块的京东云服务器的2G内存快要顶不住压力了：）\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>[mysqld]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan># 开启 binlog\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>log-bin = /var/log/mysql/mysql-bin.log\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan># 设置 server-id（每个 MySQL 实例必须唯一）\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>server-id = 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan># 可选：设置 binlog 格式（ROW 是推荐的格式）\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>binlog_format = ROW\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan># 可选：设置 binlog 过期时间（单位为天）\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>expire_logs_days = 7\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan># 可选：限制 binlog 文件大小（单位为字节，默认值为 1GB）\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>max_binlog_size = 100M\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"canal下载并配置\">Canal下载并配置\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to Canal下载并配置\" href=\"#canal下载并配置\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>然后是下载Canal，技术选型方面，其实我能选择的不太多，主要就是Canal 和 Debezium。\u003C/p>\n\u003Cp>我选择Canal的原因大抵如下：\u003C/p>\n\u003Cp>轻量级：Canal专注于 MySQL 数据库的 CDC，架构相对简单，更加轻量化。\u003C/p>\n\u003Cp>独立于 Kafka：不像 Debezium一样，最初专为Kafka设计。\u003C/p>\n\u003Cp>易于部署：Canal 的部署相对简单，尤其是对单一数据库的监听、\u003C/p>\n\u003Cp>下载然后一键tar-zxf之后进行一下简单的配置，在提供的样例里修改。\u003C/p>\n\u003Ch2 id=\"修改confexampleinstanceproperties\">修改conf/example/instance.properties\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 修改conf/example/instance.properties\" href=\"#修改confexampleinstanceproperties\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Ch2 id=\"mysql-serverid\">mysql serverId\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to mysql serverId\" href=\"#mysql-serverid\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>canal.instance.mysql.slaveId = 100\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>## 这个要和数据库的server-id不相同\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>canal.instance.master.address = 127.0.0.1:3306 \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>canal.instance.dbUsername = zhima  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>canal.instance.dbPassword = ********\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>配置完之后可以自己先启动一下，就很简单，bash /bin/startup.sh\u003C/p>\n\u003Cp>然后稍微修改一下数据库中的一行，之后看一下example输出的日志\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"log\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">2025-03-31\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> 22:00:50.725\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> [destination = example , address = /\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">127\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">3306\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> , EventParser] \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">ERROR\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> com.alibaba.otter.canal.common.alarm.LogAlarmHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> - destination:example[\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">com.alibaba.otter.canal.parse.exception.CanalParseException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">java.io.IOException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">: connect /\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">127\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">3306\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> failure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">Caused by: \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">java.io.IOException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">: connect /\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">127\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">3306\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> failure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">    at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.connect(MysqlConnector.java:85)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">    at com.alibaba.otter.canal.parse.inbound.mysql.MysqlConnection.connect(MysqlConnection.java:104)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">    at com.alibaba.otter.canal.parse.inbound.mysql.MysqlEventParser.preDump(MysqlEventParser.java:89)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">    at com.alibaba.otter.canal.parse.inbound.AbstractEventParser$1.run(AbstractEventParser.java:171)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">    at java.lang.Thread.run(Thread.java:750)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">Caused by: \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">java.io.IOException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">Error\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> When doing Client Authentication:ErrorPacket [errorNumber=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1698\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, fieldCount=-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, message=Access denied for user \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'root'\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">@\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'localhost'\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, sqlState=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">28000\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, sqlStateMarker=#]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">    at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.negotiate(MysqlConnector.java:325)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">    at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.connect(MysqlConnector.java:81)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ... \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> more\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>如果像这样一般是配置有问题没连上，修改一下就行，之后成功连上之后就可以自己写一个客户端来进行调用啦，下面这段代码用来测试就很合适。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">package\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.alibaba.otter.canal.client.CanalConnector;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.alibaba.otter.canal.client.CanalConnectors;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.alibaba.otter.canal.protocol.CanalEntry.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.alibaba.otter.canal.protocol.Message;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.net.InetSocketAddress;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.List;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> SimpleCanalClientExample\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 连接信息配置\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String hostname \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"*.*.*.*\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> port \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 11111\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String destination \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"example\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String username \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String password \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 创建链接\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        CanalConnector connector \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> CanalConnectors.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">newSingleConnector\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> InetSocketAddress\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(hostname, port), destination, username, password\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"连接创立成功\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> batchSize \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1000\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            connector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">connect\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            connector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">subscribe\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\".*\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\\\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">..*\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            connector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">rollback\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                Message message \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> connector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getWithoutAck\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(batchSize); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 获取指定数量的数据\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                long\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> batchId \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> message.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getId\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> message.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getEntries\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">size\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                // 没有拿到数据\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (batchId \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        Thread.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sleep\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (InterruptedException \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">printf\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"message[batchId=%s, size=%s] \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, batchId, size);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    printEntry\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(message.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getEntries\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                connector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">ack\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(batchId); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 提交确认\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                // connector.rollback(batchId); // 处理失败, 回滚数据\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">finally\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            connector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">disconnect\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> printEntry\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(List&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Entry\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">entries\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (Entry entry \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> entries) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (entry.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getEntryType\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> EntryType.TRANSACTIONBEGIN \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> entry.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getEntryType\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> EntryType.TRANSACTIONEND) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                continue\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            RowChange rowChange \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                rowChange \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> RowChange.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">parseFrom\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(entry.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getStoreValue\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (Exception \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> RuntimeException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"ERROR ## parser of eromanga-event has an error , data:\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> entry.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            EventType eventType \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> rowChange.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getEventType\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(String.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">format\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"binlog[%s:%s] , name[%s,%s] , eventType : %s\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    entry.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getHeader\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getLogfileName\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    entry.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getHeader\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getLogfileOffset\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    entry.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getHeader\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getSchemaName\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    entry.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getHeader\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getTableName\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    eventType));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            // 数据变化\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (RowData rowData \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> rowChange.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getRowDatasList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (eventType \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> EventType.DELETE) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    printColumn\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(rowData.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getBeforeColumnsList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (eventType \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> EventType.INSERT) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    printColumn\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(rowData.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getAfterColumnsList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    printColumn\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(rowData.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getAfterColumnsList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> printColumn\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(List&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Column\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">columns\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (Column column \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> columns) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(column.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getName\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \" : \"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> column.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getValue\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">        run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>之后开始和消息队列和Springboot整合啦\u003C/p>\n\u003Ch2 id=\"修改canal配置canalproperties\">修改canal配置canal.properties\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 修改canal配置canal.properties\" href=\"#修改canal配置canalproperties\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>canal.serverMode = rabbitMQ\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>##################################################\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>#########           RabbitMQ         #############\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>##################################################\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>rabbitmq.host = 127.0.0.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>rabbitmq.virtual.host = /\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>rabbitmq.exchange = canal-exchange\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>rabbitmq.username = root\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>rabbitmq.password = 123456\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>同时继续修改instance.properties\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># mq config\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan># canal.mq.topic=example\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>canal.mq.topic=canal-routing-key\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>##为了过滤指定的表，我还加了如下限定\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>canal.instance.defaultDatabaseName=dogie\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan># table regex\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>canal.instance.filter.regex=dogie\\\\.user_contact\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>然后重启canal服务\u003C/p>\n\u003Ch1 id=\"springboot集成\">Springboot集成\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to Springboot集成\" href=\"#springboot集成\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>消息订阅\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">package\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.\u003C/span>\u003Cspan style=\"color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic\">C\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">anal;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.amqp.core.Binding;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.amqp.core.BindingBuilder;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.amqp.core.DirectExchange;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.context.annotation.Bean;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.context.annotation.Configuration;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.amqp.core.Queue;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">@\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Configuration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> CanalProvider\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * 队列\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Bean\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Queue \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">canalQueue\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">         * durable:是否持久化，默认false，持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在；暂存队列：当前连接有效\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">         * exclusive:默认为false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">         * autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">         */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Queue\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(RabbitConstant.CanalQueue, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * 交换机，这里使用直连交换机\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Bean\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    DirectExchange \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">canalExchange\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> DirectExchange\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(RabbitConstant.CanalExchange, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * 绑定交换机和队列，并设置匹配键\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Bean\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Binding \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">bindingCanal\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> BindingBuilder.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">bind\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">canalQueue\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">to\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">canalExchange\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">with\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(RabbitConstant.CanalRouting);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>消息消费，我这里写的比较简单，如果消息消费失败之后我会把它重新放回消息队列，但是这时候消息队列会一直把这个消息发给消费者，所以这块还需要优化一下。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">package\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.\u003C/span>\u003Cspan style=\"color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic\">C\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">anal;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.alibaba.fastjson.JSON;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.fasterxml.jackson.databind.ObjectMapper;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.fasterxml.jackson.core.type.TypeReference;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.entity.enums.UserContactStatusEnum;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.entity.po.UserContact;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.entity.query.UserContactQuery;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.mappers.UserContactMapper;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.redis.RedisComponent;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.karlyn.dogie.util.JsonUtils;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> com.rabbitmq.client.Channel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> lombok.extern.slf4j.Slf4j;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.amqp.rabbit.annotation.RabbitHandler;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.amqp.rabbit.annotation.RabbitListener;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.amqp.support.AmqpHeaders;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.messaging.handler.annotation.Header;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> org.springframework.stereotype.Component;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.IOException;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.LinkedHashMap;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.List;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Map;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.stream.Collectors;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Canal消息消费者\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">@\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">@\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Slf4j\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">@\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">RabbitListener\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">queues\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> RabbitConstant.CanalQueue)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> CanalConsumer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> UserContactMapper userContactMapper;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> RedisComponent redisComponent;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> CanalConsumer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(UserContactMapper \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">userContactMapper\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, RedisComponent \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">redisComponent\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.userContactMapper \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> userContactMapper;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.redisComponent \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> redisComponent;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">RabbitHandler\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Listener\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(String \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">message\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, Channel \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Header\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(AmqpHeaders.DELIVERY_TAG) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">long\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> tag\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> IOException, InterruptedException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"收到canal消息：\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> message);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ObjectMapper objectMapper \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ObjectMapper\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Map&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Object\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> msg \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> objectMapper.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">readValue\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(message,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> TypeReference&#x3C;Map&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Object\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>>() {});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        boolean\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> isDdl \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">boolean\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) msg.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"isDdl\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 不处理DDL事件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (isDdl) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String database \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (String) msg.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"database\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String table \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (String) msg.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"table\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String type \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (String) msg.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"type\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        List&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">LinkedHashMap\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> data \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (List\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">LinkedHashMap\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) msg.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"data\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(database.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">equals\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"dogie\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">table.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">equals\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"user_contact\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (LinkedHashMap s \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    String UserId \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (String) s.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"user_id\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    log.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">info\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"更新{}的联系人缓存\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,UserId);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    UserContactQuery userContactQuery \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> UserContactQuery\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    userContactQuery.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">setUserId\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(UserId);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    userContactQuery.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">setStatus\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(UserContactStatusEnum.FRIEND.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getStatus\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    List&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">UserContact\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> userContactList \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.userContactMapper.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">selectList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(userContactQuery);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    List&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> contactIds \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> userContactList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">stream\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(item\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">->\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">item.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getContactId\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Collectors.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">toList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">                    this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.redisComponent.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">cleanUserContact\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(UserId);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">contactIds.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isEmpty\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">                        this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.redisComponent.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">addUserContactBatch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(UserId, contactIds);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">basicAck\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tag,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (Exception \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(e.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getMessage\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">basicNack\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tag,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>",{"headings":234,"localImagePaths":257,"remoteImagePaths":258,"frontmatter":259,"imagePaths":264},[235,237,239,242,245,248,251,254],{"depth":25,"slug":236,"text":236},"写在前面",{"depth":25,"slug":238,"text":238},"背景介绍",{"depth":25,"slug":240,"text":241},"mysql开启binlog并且设定为raw模式","MySQL开启binlog并且设定为RAW模式",{"depth":25,"slug":243,"text":244},"canal下载并配置","Canal下载并配置",{"depth":118,"slug":246,"text":247},"修改confexampleinstanceproperties","修改conf/example/instance.properties",{"depth":118,"slug":249,"text":250},"mysql-serverid","mysql serverId",{"depth":118,"slug":252,"text":253},"修改canal配置canalproperties","修改canal配置canal.properties",{"depth":25,"slug":255,"text":256},"springboot集成","Springboot集成",[],[],{"title":221,"tags":260,"categories":261,"mathjax":105,"sticky":25,"swiper_index":25,"abbrlink":227,"published":262,"description":223,"minutes":263},[101,225,102,226],[144],["Date","2025-04-01T00:08:49.000Z"],9,[],"origin/2025-03-20-io模式详解",{"id":265,"data":267,"body":274,"filePath":275,"digest":276,"rendered":277},{"title":268,"published":269,"description":270,"tags":271,"draft":103,"pin":104,"toc":105,"lang":106,"abbrlink":273},"IO模式详解",["Date","2025-03-20T14:28:14.000Z"],"设计了一个BIO和NIO的小实验，包含IO设计模式的理解以及NIO的粘包问题复现及解决、I/O多路复用",[101,272],"IO","io-introduce","~~我看了B站一堆教程，很少有能把IO多路复用讲明白的，所以我试一试看看能不能讲明白吧。~~\n\n误！其实还是有的，我这里直接挂个链接！\n\n[BIO、NIO、IO多路复用](https://www.bilibili.com/video/BV1gozdYSEkR)\n\n# BIO\n\nBIO的概念是同步阻塞IO，两个关键词，同步，阻塞。\n\n同步在这里主要是看有消息返回之后，是否需要原线程继续处理。\n\n阻塞是指一个线程在等待某个操作完成时暂停其执行的状态。\n\n我们以Socket通信的方式来实现这些BIO，以一方请求另一方为例子。\n\n我们先设计一个Socket的服务端，客户端每次发来消息就让线程休息5s，来模拟执行耗时，5s后给客户端发送一条消息。\n\n当前我们设计一个客户端，一共进行四次输入，第一次客户端输入不阻塞等带服务器的返回。\n\n服务端代码如下：\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Date;\n\npublic class BIOServer {\n    public static void main(String[] args) throws IOException {\n        //定义服务器的接收端口\n        ServerSocket serverSocket = new ServerSocket(8080);\n        System.out.println(\"Server started on port \"+8080);\n        while(true){\n            Socket socket = serverSocket.accept();//阻塞等待客户端连接\n            new Thread(new BioHandler(socket)).start(); // 为每个客户端连接启动新线程\n        }\n    }\n\n    static class BioHandler implements Runnable {\n        private Socket socket;\n\n        public BioHandler(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            try {\n                BufferedReader in = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));\n                PrintWriter out = new PrintWriter(this.socket.getOutputStream(), true);\n\n                String inputLine;\n                while ((inputLine = in.readLine()) != null) { // 阻塞等待输入\n                    System.out.println(\"Received: \" + inputLine);\n                    System.out.println(new Date());\n                    //sleep5s，模拟处理时间\n                    Thread.sleep(5000);\n                    out.println(\"Echo: \" + inputLine); // 回显消息\n                }\n            } catch (IOException | InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```\n\n客户端不阻塞等待返回如下：\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\nimport java.util.Date;\n\npublic class BIOClient {\n    public static void main(String[] args) throws IOException {\n        //假设我们固定服务器的端口号为8080，之后我们会访问这个端口号，然后我们会模拟服务器需要很久才会返回\n        Socket socket = new Socket(\"localhost\",8080);\n        //定义发送流\n        PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\n        //定义接受流\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        System.out.println(\"Connected to server. Type messages and press enter.\");\n        String userInput;\n        //我一共进行四次输入，按理来说我这四次输入间隔时间应该是很短的\n        for(int i=0;i\u003C=4;i++){\n            userInput = \"mess\"+i;\n            out.println(userInput); // 发送到服务器\n            System.out.println(\"消息:\\\"\"+userInput+\"\\\"已经成功发送，当前时间是\"+new Date());//描述成功发送到服务器\n        }\n\n        out.close();\n        in.close();\n        socket.close();\n\n    }\n}\n```\n\n然后我们看客户端和服务器端分别的时间\n\n客户端\n\n![BIO非阻塞客户端](/picture/bio_c_nBlock.png)\n\n服务端\n\n![BIO非阻塞服务端](/picture/bio_s_nBlock.png)\n\n可以看出，非阻塞的客户端是能直接把全部的消息发给服务器端的，只不过服务器端是一个一个处理的\n\n那如果我们的客户端阻塞等待服务器端的返回呢？\n\n只需要在客户端里加上一行代码就可以了。\n\n```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\nimport java.util.Date;\n\npublic class BIOClient {\n    public static void main(String[] args) throws IOException {\n        //假设我们固定服务器的端口号为8080，之后我们会访问这个端口号，然后我们会模拟服务器需要很久才会返回\n        Socket socket = new Socket(\"localhost\",8080);\n        //定义发送流\n        PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\n        //定义接受流\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        System.out.println(\"Connected to server. Type messages and press enter.\");\n        String userInput;\n        //我一共进行四次输入，按理来说我这四次输入间隔时间应该是很短的\n        for(int i=0;i\u003C=4;i++){\n            userInput = \"mess\"+i;\n            out.println(userInput); // 发送到服务器\n            System.out.println(\"消息:\\\"\"+userInput+\"\\\"已经成功发送，当前时间是\"+new Date());//描述成功发送到服务器\n            System.out.println(\"echo: \" + in.readLine()); // 阻塞等待服务器返回消息\n        }\n\n        out.close();\n        in.close();\n        socket.close();\n\n    }\n}\n```\n\n那么这时候客户端的发送的方式是什么呢？\n\n![BIO阻塞客户端](/picture/bio_c_Block.png)\n\n从结果我们发现，客户端阻塞在这里，等待服务器消费完一条消息才能执行自己接下来要做的事情，如果这时候客户端不是要给服务器发送消息，而是做其他的事情，是不是这些等待时间就是不必要的，完全可以去做其他的事情。\n\n那么这时候，我们是不是能有这样一种方法，我们不在这里等着服务器处理完，我可以先去做其他的事情，然后时不时看服务器有没有处理完，处理完了我再获取这个数据呢。这时候NIO就应运而生了。\n\n# NIO\n\nNIO的概念是同步非阻塞IO，也就是说我不用阻塞在这里等待对方执行完毕。而是我传递完消息之后就去做我自己的事情，时不时的通过Selector来看一看它是不是有返回值，也就是ReadAble状态。\n\n所以接下来我们就通过Java来简单实现一下客户端和服务端。\n\n首先介绍一下Selector，它提供了一种机制来管理多个通道（Channel）的I/O操作。通过使用selector，可以利用一个线程来监视多个通道上的事件（如连接请求、数据到达等），从而实现高效的服务端应用设计，尤其是在处理大量并发连接时。\n\n我们先来改造客户端吧，改造比较容易，首先是消息就不通过PrintWriter发送了，因为他们属于不同的I/O模型，我们这次就得使用ByteBuffer来存我们的输入数据，然后让Channel去write。\n\n同时呢，我们需要把Channel注册到Selector上去，让Selector来为我们轮询Channel的状态，当然也未必是轮询，后面我们讲到I/O多路复用的时候会说到。虽然这部分的代码内容稍多一些，但是我的注释写的还是比较翔实的。\n\n比较有趣的是，这个客户端的实现没有考虑到粘包问题，刚好让我碰到了我以前比较好奇为什么会出现的粘包问题，这部分我们会逐渐优化给大家看。\n\n```java\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class NIOClient {\n    private static ConcurrentLinkedQueue\u003CString> messageQueue = new ConcurrentLinkedQueue\u003C>();\n\n    private static int count=5;\n\n    public static void main(String[] args) throws Exception {\n        SocketChannel clientChannel = SocketChannel.open();\n        clientChannel.configureBlocking(false);\n        clientChannel.connect(new InetSocketAddress(\"localhost\", 8080));\n\n        Selector selector = Selector.open();\n        //将Channel注册到selector中去，并且设置该通道关注可连接事件\n        clientChannel.register(selector, SelectionKey.OP_CONNECT);\n        //当channel没被关的时候一直循环\n        while (clientChannel.isOpen()) {\n            //这段代码还是会阻塞当前线程，直到有注册到selector的通道准备好了进行某项操作\n            selector.select();\n            //一旦 select() 方法返回，通过调用 selectedKeys() 方法来获取一个包含所有已准备好进行操作的通道的 SelectionKey 集合。\n            // 每个 SelectionKey 都代表了一个与特定通道和操作相关的键。\n            // 这些键包含了关于哪些通道准备好进行哪种类型的操作的信息（例如可读、可写等）。\n            // 其实这里包含了多路复用的实现，因为获得了准备好的所有channel的信息，而不是一个channel准备好了就切换回用户态\n            Set\u003CSelectionKey> keys = selector.selectedKeys();\n            Iterator\u003CSelectionKey> iter = keys.iterator();\n            //然后对所有准备好的通道依次处理\n            while (iter.hasNext()) {\n                SelectionKey key = iter.next();\n                iter.remove();\n                //在第一次channel可用时候，其实只会触发这个isConnectable()，因为我们只注册该通道为可连接的\n                //这时候就会调用我们定义好的连接handler\n                if (key.isConnectable()) {\n                    handleConnect(key);\n                }\n                //在之后我们关注了可写事件，如果这个通道可写了，selector返回的key里就会设置为可写的\n                //这时候就会调用我们定义好的writeHandler\n                //可写其实是频繁触发的\n                if (key.isWritable()) {\n                    handleWrite(key);\n                }\n                //这时候如果服务器返回消息了，就会触发可读事件，selector返回的key里就会设置为可读的\n                //这时候就调用我们定义好的readHandler\n                if (key.isReadable()) {\n                    handleRead(key);\n                }\n            }\n        }\n        clientChannel.close();\n    }\n\n    /**\n     * 连接handler\n     * @param key selector的包含channel信息以及其对应类型的key\n     * @throws Exception\n     */\n    private static void handleConnect(SelectionKey key) throws Exception {\n        //从key里获取channel\n        SocketChannel channel = (SocketChannel) key.channel();\n        //如果连接完毕，就要把channel的关注切换为关注可写事件\n        if (channel.finishConnect()) {\n            System.out.println(\"连接建立成功，开始发送数据...\");\n            key.interestOps(SelectionKey.OP_WRITE);\n            //当然其实也可以这么切换，就是既关注可写事件，又关注可读事件，毕竟谁规定服务器不可以在连接上之后给客户端发消息的\n            //key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);\n            //连接成功之后我们往消息队列里加点数据\n            for (int i = 0; i \u003C 5; i++) {\n                messageQueue.add(\"mess\" + i);\n            }\n        }\n    }\n\n    private static void handleWrite(SelectionKey key) throws Exception {\n        SocketChannel channel = (SocketChannel) key.channel();\n        //触发可写事件的时候，我们从消息队列里挑选一条消息发过去\n        //所以我们可能会触发粘包事件\n        if (!messageQueue.isEmpty()) {\n            System.out.println(\"触发可写事件且有消息要发！\");\n            //分配写入字节流\n            ByteBuffer buffer = ByteBuffer.allocate(50);\n            //从消息队列获取消息\n            String msg = messageQueue.peek();\n            //重置缓冲区，将限制设置为50，并将位置重置为0\n            buffer.clear();\n            buffer.put(msg.getBytes());\n            //将缓冲区从写模式切换到读模式。\n            //它通过设置限制（limit）为当前位置，并将位置（position）重置为0。\n            //这意味着接下来可以从位置0开始读取数据，直到达到之前的位置（现在变成了限制）。\n            buffer.flip();\n            //向channel写入数据\n            int bytesWritten = channel.write(buffer);\n            //如果写入数据长度为0，就不进行接下来的操作了，也就是从消息队列里删除，那时候就会重新发送消息\n            if (bytesWritten == 0) return;\n            //如果全部写入成功，就会把消息删除，并且打印已发送\n            if (!buffer.hasRemaining()) {\n                String sentMsg = messageQueue.poll();\n                System.out.println(\"消息:\\\"\" + sentMsg + \"\\\"已发送，时间：\" + new Date());\n            }\n        }\n\n        // 切换关注读事件，但保持写事件关注\n        key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);\n    }\n\n    private static void handleRead(SelectionKey key) throws Exception {\n        SocketChannel channel = (SocketChannel) key.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(50);\n        int bytesRead;\n\n        while ((bytesRead = channel.read(buffer)) > 0) {\n            //同样是把buffer设置为读状态\n            buffer.flip();\n            //读取响应消息\n            System.out.println(\"收到响应：\" + new String(buffer.array(), 0, bytesRead)+\" ,当前时间是:\"+new Date());\n            buffer.clear();\n        }\n        //为了验证读消息之后还能触发写事件，我们每次读完往messageQueue里加2条消息\n        for (int i = count; i \u003C count+2; i++) {\n            messageQueue.add(\"mess\" + i);\n        }\n        count+=2;\n    }\n}\n```\n\n好，设计完客户端之后，就是设计服务端了，与之前BIO处理多个连接的方式不同，我们服务端这次不使用多线程来管理多个连接，而是直接使用Selector来管理多个Channel，ServerSocketChannel和SocketChannel一视同仁，都交给一个Selector管理。\n\n让我们端上来吧！\n\n```java\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NIOServer {\n    public static void main(String[] args) throws Exception {\n        // NIO基于Channel控制，所以有Selector管理所有的Channel\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        // 设置为非阻塞模式\n        serverSocketChannel.configureBlocking(false);\n        // 设置监听端口\n        serverSocketChannel.bind(new InetSocketAddress(8080));\n        // 设置Selector管理所有Channel\n        Selector selector = Selector.open();\n        // 注册并设置连接时处理\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        System.out.println(\"服务启动成功，监听端口为：\" + 8080);\n        // NIO使用轮询，当有请求连接时，则启动一个线程\n        int keySelect = 0;\n        while (serverSocketChannel.isOpen()) {\n            selector.select();\n            Set\u003CSelectionKey> selectionKeys = selector.selectedKeys();\n            Iterator\u003CSelectionKey> iterator = selectionKeys.iterator();\n            while (iterator.hasNext()) {\n                SelectionKey next = iterator.next();\n                if (next.isAcceptable()) {    //  如果是连接的\n                    SocketChannel accept = serverSocketChannel.accept();\n                    if (accept != null) {\n                        //把新的会话测channel注册到selector里去，让Selector来管理它\n                        accept.configureBlocking(false);\n                        //并且把它的感兴趣状态变为可读状态\n                        accept.register(selector,SelectionKey.OP_READ);\n                    }\n                    iterator.remove();\n                }\n                //一旦可读了，就代表客户端发来了消息，那我们就去处理这个消息\n                if(next.isReadable()){\n                    handleRead(next);\n                }\n            }\n        }\n        serverSocketChannel.close();\n    }\n\n\n    //其实处理这个消息我们依然有一处是阻塞的，就是我们返回给客户端的时候，要求客户端是写可用的。\n    //但是写可用的触发是很多次的，一般都是写可用的，所以我们就没有做过多的干预\n    private static void handleRead(SelectionKey key) throws Exception {\n        SocketChannel channel = (SocketChannel) key.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(50);\n        buffer.clear();\n        int read = channel.read(buffer);\n        String msg = new String(buffer.array(), 0, read).trim();\n        System.out.println(\"服务端收到消息：\"+msg);\n        String outMsg = \"【Echo】\" + msg; // 生成回应信息\n        //模拟消息处理时长\n        Thread.sleep(5000);\n        buffer.clear();\n        buffer.put(outMsg.getBytes());  //回传信息放入缓冲区\n        buffer.flip();\n        channel.write(buffer);// 回传信息\n    }\n}\n```\n\n服务器的实现我们写的时候还是阻塞的，但是其实写可用触发频率是很高的，所以我们就不把这个阻塞考虑进去了。\n\n这时候我们起一个服务端，一个客户端看看情况如何！\n\n![NIO单客户端](/picture/nio_single.png)\n\n是不是出现了粘包问题！在服务器处理mess0（也就是sleep 5s的时候），后面的mess1、mess2、mess3、mess4都到了，但是我们没有使用头部或者区分符号来进行区分，导致出现了粘包问题。\n\n但是恰恰是这个粘包，也进一步佐证了我们实现了NIO，因为粘包是NIO的常见问题之一。\n\n那是否我们的服务器在不使用多线程的情况下，不阻塞的同时响应两个客户端呢，我们来试一下就行哩！\n\n![NIO多客户端](/picture/nio_two.png)\n\n由此可见，是可以的！只不过单线程响应就要做好逐个处理的缓慢准备。\n\n## 如何解决粘包问题\n\n其实解决粘包问题很简单，就是设计一个自己通用的协议，比如说设定一个自己通用的终止符号或者设计一个定长的头，用这个头来规定长度。\n\n我们就选择后者实现。\n\n下面是服务端的代码，这部分注释就少很多了，主要还是看handleRead部分\n\n```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class NIOServer {\n    public static void main(String[] args) throws Exception {\n        // NIO基于Channel控制，所以有Selector管理所有的Channel\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        // 设置为非阻塞模式\n        serverSocketChannel.configureBlocking(false);\n        // 设置监听端口\n        serverSocketChannel.bind(new InetSocketAddress(8080));\n        // 设置Selector管理所有Channel\n        Selector selector = Selector.open();\n        // 注册并设置连接时处理\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        System.out.println(\"服务启动成功，监听端口为：\" + 8080);\n        // NIO使用轮询，当有请求连接时，则启动一个线程\n        while (serverSocketChannel.isOpen()) {\n            selector.select();\n            Set\u003CSelectionKey> selectionKeys = selector.selectedKeys();\n            Iterator\u003CSelectionKey> iterator = selectionKeys.iterator();\n            while (iterator.hasNext()) {\n                SelectionKey next = iterator.next();\n                if (next.isAcceptable()) {    //  如果是连接的\n                    SocketChannel accept = serverSocketChannel.accept();\n                    if (accept != null) {\n                        //把新的会话测channel注册到selector里去，让Selector来管理它\n                        accept.configureBlocking(false);\n                        //并且把它的感兴趣状态变为可读状态\n                        accept.register(selector,SelectionKey.OP_READ);\n                    }\n                    iterator.remove();\n                }\n                //一旦可读了，就代表客户端发来了消息，那我们就去处理这个消息\n                if(next.isReadable()){\n                    handleRead(next);\n                }\n            }\n        }\n        serverSocketChannel.close();\n    }\n\n    public static void handleRead(SelectionKey key) throws Exception{\n        SocketChannel channel = (SocketChannel) key.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        int expectedLength = -1;\n        buffer.clear();\n        int read = channel.read(buffer);\n        if(read ==-1 ) return;\n        buffer.flip();\n        while (buffer.remaining() > 0) {\n            if (expectedLength == -1) { // 等待读取长度头\n                if (buffer.remaining() >= 4) {\n                    expectedLength = buffer.getInt(); // 读取4字节长度头\n                } else {\n                    break; // 长度头未接收完整\n                }\n            }\n            if (buffer.remaining() >= expectedLength) {\n                byte[] bodyBytes = new byte[expectedLength];\n                buffer.get(bodyBytes);\n                String message = new String(bodyBytes);\n                System.out.println(\"服务端收到消息：\"+message);\n                String response = \"【Echo】\" + message;\n                // 模拟处理延迟\n                Thread.sleep(5000);\n                byte[] responseBytes = response.getBytes();\n                // 构造响应：4字节长度头 + 消息体\n                ByteBuffer responseBuffer = ByteBuffer.allocate(4 + responseBytes.length);\n                responseBuffer.putInt(responseBytes.length);\n                responseBuffer.put(responseBytes);\n                responseBuffer.flip();\n\n                // 发送响应\n                while (responseBuffer.hasRemaining()) {\n                    channel.write(responseBuffer);\n                }\n                expectedLength = -1; // 重置等待下一个消息\n            }else {\n                break; //消息体未接收完整\n            }\n        }\n        buffer.compact(); // 压缩缓冲区，保留未处理数据\n    }\n}\n```\n\n客户端部分的代码修改为下：\n\n```java\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class NIOClient {\n    private static ConcurrentLinkedQueue\u003CString> messageQueue = new ConcurrentLinkedQueue\u003C>();\n\n    private static int count=5;\n\n    public static void main(String[] args) throws Exception {\n        SocketChannel clientChannel = SocketChannel.open();\n        clientChannel.configureBlocking(false);\n        clientChannel.connect(new InetSocketAddress(\"localhost\", 8080));\n\n        Selector selector = Selector.open();\n        clientChannel.register(selector, SelectionKey.OP_CONNECT);\n\n\n        while (!messageQueue.isEmpty() || clientChannel.isOpen()) {\n            selector.select();\n            Set\u003CSelectionKey> keys = selector.selectedKeys();\n            Iterator\u003CSelectionKey> iter = keys.iterator();\n\n            while (iter.hasNext()) {\n                SelectionKey key = iter.next();\n                iter.remove();\n\n                if (key.isConnectable()) {\n                    handleConnect(key);\n                }\n                if (key.isWritable()) {\n                    handleWrite(key);\n                }\n                if (key.isReadable()) {\n                    handleRead(key);\n                }\n            }\n        }\n        clientChannel.close();\n    }\n\n    /**\n     * 连接handler\n     * @param key selector的包含channel信息以及其对应类型的key\n     * @throws Exception\n     */\n    private static void handleConnect(SelectionKey key) throws Exception {\n        //从key里获取channel\n        SocketChannel channel = (SocketChannel) key.channel();\n        //如果连接完毕，就要把channel的关注切换为关注可写事件\n        if (channel.finishConnect()) {\n            System.out.println(\"连接建立成功，开始发送数据...\");\n            key.interestOps(SelectionKey.OP_WRITE);\n            //当然其实也可以这么切换，就是既关注可写事件，又关注可读事件，毕竟谁规定服务器不可以在连接上之后给客户端发消息的\n            //key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);\n            //连接成功之后我们往消息队列里加点数据\n            for (int i = 0; i \u003C 5; i++) {\n                messageQueue.add(\"mess\" + i);\n            }\n        }\n    }\n\n    private static void handleWrite(SelectionKey key) throws Exception {\n        SocketChannel channel = (SocketChannel) key.channel();\n        //触发可写事件的时候，我们从消息队列里挑选一条消息发过去\n        //所以我们可能会触发粘包事件\n        if (!messageQueue.isEmpty()) {\n            System.out.println(\"触发可写事件且有消息要发！\");\n            //分配写入字节流\n            ByteBuffer buffer = ByteBuffer.allocate(1024);\n            //从消息队列获取消息\n            String msg = messageQueue.peek();\n            byte[] msgBytes = msg.getBytes();\n            //数据总长为4+真实数据，4是一个int，用来存储数据长度\n            int totalLength = 4 + msgBytes.length; // 头部4字节 + 消息体\n            //重置缓冲区，将限制设置为500，并将位置重置为0\n            buffer.clear();\n            buffer.putInt(msgBytes.length); // 写入4字节长度头（大端序）\n            buffer.put(msgBytes);           // 写入消息体\n            //将缓冲区从写模式切换到读模式。\n            //它通过设置限制（limit）为当前位置，并将位置（position）重置为0。\n            //这意味着接下来可以从位置0开始读取数据，直到达到之前的位置（现在变成了限制）。\n            buffer.flip();\n            //向channel写入数据\n            int bytesWritten = channel.write(buffer);\n            //如果写入数据长度为0，就不进行接下来的操作了，也就是从消息队列里删除，那时候就会重新发送消息\n            if (bytesWritten == 0) return;\n            //如果全部写入成功，就会把消息删除，并且打印已发送\n            if (!buffer.hasRemaining()) {\n                String sentMsg = messageQueue.poll();\n                System.out.println(\"消息:\\\"\" + sentMsg + \"\\\"已发送，时间：\" + new Date());\n            }\n        }\n        key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);\n    }\n\n    private static void handleRead(SelectionKey key) throws Exception {\n        SocketChannel channel = (SocketChannel) key.channel();\n        ByteBuffer readBuffer = ByteBuffer.allocate(1024);\n        readBuffer.clear();\n        int bytesRead = channel.read(readBuffer);\n        if (bytesRead == -1) {\n            channel.close();\n            return;\n        }\n        readBuffer.flip();\n        int expectedLength =-1;\n        while (readBuffer.remaining() > 0) {\n            if (expectedLength == -1) { // 等待读取长度头\n                if (readBuffer.remaining() >= 4) {\n                    expectedLength = readBuffer.getInt(); // 读取4字节长度头\n                } else {\n                    break; // 长度头未接收完整\n                }\n            }\n\n            if (readBuffer.remaining() >= expectedLength) {\n                byte[] bodyBytes = new byte[expectedLength];\n                readBuffer.get(bodyBytes);\n                String response = new String(bodyBytes);\n                System.out.println(\"收到响应：\" + response + \"，时间：\" + new Date());\n                expectedLength = -1; // 重置等待下一个消息\n            } else {\n                break; // 消息体未接收完整,继续回去候着\n            }\n        }\n        readBuffer.compact(); // 压缩缓冲区，保留未处理数据\n    }\n}\n```\n\n最终的结果如下：\n\n![解决NIO粘包问题](/picture/nianbao.png)\n\n可以发现，成功解决哩！\n\n那么接下来，我们就可以转战I/O多路复用了。\n\n# I/O多路复用\n\n其实，在实现之前的NIO的时候，我们已经有用到I/O多路复用了，还记得我们使用了Selector吗，我们把所有的SocketChannel注册到一个Selector上，Selector帮我们判断他们是否能够满足我们关注的事件，如果能满足我们关注的事件，就触发对应的事件关注模式。\n\n那这时候大家有没有一个疑惑呢？为什么调用``` Set\u003CSelectionKey> keys = selector.selectedKeys();```这段代码，返回的结果是一个集合呢？它监视了select管理的全部channel的状态，这就是IO多路复用的体现！由此，我们在实现NIO的服务器的时候并没有在程序里显示创建额外的子线程来响应，而是创建了一个文件描述符channel，并把它交给selector管理！客户端其实是不需要IO多路复用的，因为客户端只设置了一个Channel。\n\n想象一下，如果没有IO多路复用，这段代码的逻辑是什么呢？\n\n我们还是更加具体的讲一下Selector的工作流程吧\n\n1. **注册通道与兴趣操作**：首先，通过调用`SelectableChannel.register(Selector sel, int ops)`方法将一个或多个通道注册到选择器上，并指定对该通道感兴趣的I/O操作类型（如`OP_READ`, `OP_WRITE`, `OP_CONNECT`, 或 `OP_ACCEPT`）。这一步骤主要是在用户态完成的。\n2. **轮询请求**：当调用`selector.select()`或者其变种时，Java程序会进入等待状态，也就是触发一个打断，由用户态切换到内核态，直到至少有一个已注册的通道准备好执行至少一个你感兴趣的操作。在这个过程中，Java运行时环境会发起系统调用（例如，在Unix/Linux系统上的`epoll_wait`或在Windows上的`WSAWaitForMultipleEvents`），这些系统调用实际上会使控制权转移到操作系统内核。\n3. **内核态处理**：一旦控制权转移到内核，操作系统会监视所有被注册的通道，检查它们是否满足任何已注册的兴趣条件。这一过程高效地利用了操作系统提供的事件通知机制，比如Linux上的`epoll`、BSD系统上的`kqueue`或Windows上的I/O完成端口(IOCP)等。如果某个或某些通道的状态发生了变化（例如，新的数据到达使得读操作变为可能），内核就会识别出这些事件。\n4. **返回用户态并更新就绪状态**：当有通道变得“就绪”时，操作系统会返回相应的信息给Java的NIO层，然后从`select()`方法返回，允许Java程序继续执行。此时，你可以通过`selectedKeys()`方法获取所有已经准备好的通道对应的`SelectionKey`对象集合，并对这些通道进行相应的I/O操作。\n\n如果没有IO多路复用呢？是不是处理就不一样了呢？需要手动的遍历每个文件描述符，也就是我们要手动遍历每一个Channel，然后去内核态判断他们是不是可接受、可连接、可读、可写的，然后再回到用户态来进行对应的操作。似乎这样是可行的？\n\n但是需要注意一点，这样又一个很明显的问题，就是频繁的进行了用户态和内核态的切换，这种切换是需要额外耗时的。\n\n那么除此之外，其实还有一些其他的问题：\n\n1. 每个连接都需要一个独立的线程或进程：在这种情况下，为了处理多个并发连接，常见的做法是为每个连接分配一个独立的线程或进程。这个线程或进程将负责执行读写操作，直到该连接关闭。这导致了所谓的“一连接一线程”模型。\n2. 缺乏高效的事件通知机制：在没有IO多路复用（如select、poll、epoll等）的情况下，程序员需要手动检查每个文件描述符的状态，或者依赖于每个线程/进程阻塞在一个特定的文件描述符上等待数据的到来。这种方式无法高效地管理和监控大量文件描述符。\n3. 资源消耗大且扩展性差：由于每个连接都需要一个独立的线程或进程，随着连接数的增加，系统资源（如内存和CPU时间）会被迅速耗尽。此外，大量的上下文切换也会降低系统的整体性能，使得这种方法难以扩展到支持数千甚至数万个并发连接。\n\n所以这时候我们就可以理解什么是IO多路复用了，简单来说就是：允许单个线程同时监视多个文件描述符。那么具体是怎么实现的，就是下面要讨论的内容了。分为：select、poll、epoll三种。其实到后面已经有点脱离Java的范畴了，所以在这里提前说一下。Java的Selector的select方法是灵活的，主要还是根据系统不同来实现的，如果在Linux内核上，会默认使用epoll来实现，如果epoll有些特性无法满足则会使用poll。在Windows内核上就需要使用select来实现。\n\n## Select\n\nSelect模型的实现是基于轮询的，也就是每一次都把文件描述符的bitmap从用户态拷贝到内核态。这个bitmap最大大小为1024，所以select模型的一个selector最多只能监管1024个channel\n\n用户态的bitmap存储了哪些文件描述符需要被监视，如果需要被监视，bitmap对应位置置为1。\n\n内核态遍历为1的bitmap，如果文件描述符已经就绪，那就将对应位置置为1，否则为0，然后将bitmap返回给用户态\n\n主要流程如下：\n\n- 将当前进程的所有文件描述符，一次性的从用户态拷贝到内核态；\n- 在内核中快速的无差别遍历每个fd，判断是否有数据到达；\n- 将所有fd状态，从内核态拷贝到用户态，并返回已就绪fd的个数；\n- 在用户态遍历判断具体哪个fd已就绪，然后进行相应的事件处理。\n\n缺点是很明显的：\n\n1. 能管理的文件描述符有限，最多为1024\n2. 每次都需要将文件描述符的bitmap从用户态拷贝到内核态，再从内核态拷贝到用户态\n3. 内核态返回bitmap之后，用户态仍然需要遍历才能知道哪个文件描述符就绪了\n\n一共有三个bitmap，分别对应了readfds、writefds、errorfds。主要检查三个对应的项目。\n\n读缓冲区（readfds）：检测里边有没有数据，如果有数据该缓冲区对应的文件描述符就绪\n写缓冲区（writefds）：检测写缓冲区是否可以写(有没有容量)，如果有容量可以写，缓冲区对应的文件描述符就绪\n读写异常（errorfds）：检测读写缓冲区是否有异常，如果有该缓冲区对应的文件描述符就绪\n\n## Poll\n\nPoll模型其实和Select模型是比较类似的，也是需要轮询的。\n\n区别在于：\n\nselect使用位图来标记想关注的文件描述符，使用三个位图来标记想关注的读事件，写事件，错误事件。\n\npoll使用一个结构体pollfd数组来标志想关注的文件描述符和在这个描述符上感兴趣的事件，poll的优点是数组的长度突破了1024的限制，其他的区别不大。\n\nselect可以跨平台，但是poll只支持Linux使用\n\n两者同样都需要进行多次内核态和用户态的拷贝\n\n## EPoll\n\n其实epoll才是最难理解的部分，但是也是对前两者设计了优化，解决了文件描述符限制和多次内核态和用户态拷贝导致的性能开销问题。\n\nEpoll其实基于一个比较重要的模型，就是事件驱动模型，使用了回调机制。\n\nSelect模型和Poll模型每次都需要遍历全部的文件描述符来检查它是否就绪，而epoll不同，它允许用户在注册时指定感兴趣的事件，这样在事件发生时，内核只需要更新它的内部数据结构，而不是每次都遍历全部的文件描述符。\n\n### 执行原理\n\n```C\nint num_size = 5;//epoll监听的文件描述符的个数，其实在linux2.6.8的时候就取消这个限制了，这个数字的存在只是为了兼容\nint epoll_fd = poll_create(num_size);//创建一个epoll模型，其实也是一个文件描述符\n//然后会创建一个内部数据结构，重点是两个部分，一个是红黑树的根，另一个是rd_list，也就是已就绪的双端队列\n//假设这个时候有5个客户端连接到了服务端，epoll就会调用五次event_ctl，会在红黑树上创建5个节点，使用的方法是ADD，如果已经建立完成客户端，就要使用MOD修改监听的事件为读事件\n//event_ctl方法需要传入的包括红黑树的根也就是even模型，需要操作的文件描述符，对这个文件描述符的操作，需要监视文件描述符事件集合\n//event_ctl方法向内存注册fd和事件的时候，注册了一个回调函数，当操作系统将数据拷贝到缓冲区后，就会执行回调函数\n//创建完成之后，如果有三个客户端向服务端的网卡发送数据，网卡会用DMA-Copy技术将数据拷贝到内存缓冲区，执行回调函数，这时候会将缓冲区的内容和文件描述符加入到rd_list，其实没有做拷贝操作，只是做了指针的连接操作\n//这时候如果服务端调用epoll_wait方法，就会判断哪些文件描述符上的哪些事件已经就绪了，也就是把rd_link的内容拷贝到返回数组中，然后返回内核态\n```\n\n### 为什么会快\n\n只有被调用epoll_wait方法的时候，epoll才会进行一次内核态到用户态的拷贝，所以上下文切换较少。\n\nepoll返回的事件只有就绪的事件，不需要遍历比较。\n\n而且epoll是通过回调的方式来将就绪的事件加入到就绪队列中。\n\n# 总结\n\n至此，IO系列基本就分析完了，如果有问题欢迎各种平台交流。","src/content/posts/origin/2025-03-20-IO模式详解.md","0788c7549b6708ff",{"html":278,"metadata":279},"\u003Cp>\u003Cdel>我看了B站一堆教程，很少有能把IO多路复用讲明白的，所以我试一试看看能不能讲明白吧。\u003C/del>\u003C/p>\n\u003Cp>误！其实还是有的，我这里直接挂个链接！\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.bilibili.com/video/BV1gozdYSEkR\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">BIO、NIO、IO多路复用\u003C/a>\u003C/p>\n\u003Ch1 id=\"bio\">BIO\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to BIO\" href=\"#bio\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>BIO的概念是同步阻塞IO，两个关键词，同步，阻塞。\u003C/p>\n\u003Cp>同步在这里主要是看有消息返回之后，是否需要原线程继续处理。\u003C/p>\n\u003Cp>阻塞是指一个线程在等待某个操作完成时暂停其执行的状态。\u003C/p>\n\u003Cp>我们以Socket通信的方式来实现这些BIO，以一方请求另一方为例子。\u003C/p>\n\u003Cp>我们先设计一个Socket的服务端，客户端每次发来消息就让线程休息5s，来模拟执行耗时，5s后给客户端发送一条消息。\u003C/p>\n\u003Cp>当前我们设计一个客户端，一共进行四次输入，第一次客户端输入不阻塞等带服务器的返回。\u003C/p>\n\u003Cp>服务端代码如下：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.BufferedReader;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.IOException;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.InputStreamReader;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.PrintWriter;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.net.ServerSocket;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.net.Socket;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Date;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> BIOServer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> IOException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //定义服务器的接收端口\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ServerSocket serverSocket \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ServerSocket\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Server started on port \"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Socket socket \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> serverSocket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">accept\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//阻塞等待客户端连接\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Thread\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> BioHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(socket)).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">start\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 为每个客户端连接启动新线程\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> BioHandler\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        private\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Socket socket;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> BioHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Socket \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">socket\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">            this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.socket \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> socket;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                BufferedReader in \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> BufferedReader\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> InputStreamReader\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.socket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getInputStream\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                PrintWriter out \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> PrintWriter\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.socket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getOutputStream\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(), \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                String inputLine;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((inputLine \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> in.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">readLine\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) { \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 阻塞等待输入\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Received: \"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> inputLine);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                    //sleep5s，模拟处理时间\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    Thread.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sleep\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5000\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Echo: \"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> inputLine); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 回显消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (IOException | InterruptedException \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                e.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">printStackTrace\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">finally\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    socket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (IOException \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    e.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">printStackTrace\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>客户端不阻塞等待返回如下：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.BufferedReader;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.IOException;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.InputStreamReader;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.PrintWriter;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.net.Socket;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Date;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> BIOClient\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> IOException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //假设我们固定服务器的端口号为8080，之后我们会访问这个端口号，然后我们会模拟服务器需要很久才会返回\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Socket socket \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Socket\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"localhost\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //定义发送流\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        PrintWriter out \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> PrintWriter\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(socket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getOutputStream\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(), \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //定义接受流\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        BufferedReader in \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> BufferedReader\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> InputStreamReader\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(socket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getInputStream\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Connected to server. Type messages and press enter.\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String userInput;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //我一共进行四次输入，按理来说我这四次输入间隔时间应该是很短的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            userInput \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"mess\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">i;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(userInput); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 发送到服务器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"消息:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">userInput\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">已经成功发送，当前时间是\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//描述成功发送到服务器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        in.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        socket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>然后我们看客户端和服务器端分别的时间\u003C/p>\n\u003Cp>客户端\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/bio_c_nBlock.png\" alt=\"BIO非阻塞客户端\">\u003Cfigcaption>BIO非阻塞客户端\u003C/figcaption>\u003C/figure>\n\u003Cp>服务端\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/bio_s_nBlock.png\" alt=\"BIO非阻塞服务端\">\u003Cfigcaption>BIO非阻塞服务端\u003C/figcaption>\u003C/figure>\n\u003Cp>可以看出，非阻塞的客户端是能直接把全部的消息发给服务器端的，只不过服务器端是一个一个处理的\u003C/p>\n\u003Cp>那如果我们的客户端阻塞等待服务器端的返回呢？\u003C/p>\n\u003Cp>只需要在客户端里加上一行代码就可以了。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.BufferedReader;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.IOException;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.InputStreamReader;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.PrintWriter;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.net.Socket;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Date;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> BIOClient\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> IOException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //假设我们固定服务器的端口号为8080，之后我们会访问这个端口号，然后我们会模拟服务器需要很久才会返回\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Socket socket \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Socket\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"localhost\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //定义发送流\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        PrintWriter out \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> PrintWriter\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(socket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getOutputStream\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(), \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //定义接受流\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        BufferedReader in \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> BufferedReader\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> InputStreamReader\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(socket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getInputStream\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Connected to server. Type messages and press enter.\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String userInput;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //我一共进行四次输入，按理来说我这四次输入间隔时间应该是很短的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            userInput \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"mess\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">i;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(userInput); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 发送到服务器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"消息:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">userInput\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">已经成功发送，当前时间是\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//描述成功发送到服务器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"echo: \"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> in.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">readLine\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 阻塞等待服务器返回消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        in.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        socket.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>那么这时候客户端的发送的方式是什么呢？\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/bio_c_Block.png\" alt=\"BIO阻塞客户端\">\u003Cfigcaption>BIO阻塞客户端\u003C/figcaption>\u003C/figure>\n\u003Cp>从结果我们发现，客户端阻塞在这里，等待服务器消费完一条消息才能执行自己接下来要做的事情，如果这时候客户端不是要给服务器发送消息，而是做其他的事情，是不是这些等待时间就是不必要的，完全可以去做其他的事情。\u003C/p>\n\u003Cp>那么这时候，我们是不是能有这样一种方法，我们不在这里等着服务器处理完，我可以先去做其他的事情，然后时不时看服务器有没有处理完，处理完了我再获取这个数据呢。这时候NIO就应运而生了。\u003C/p>\n\u003Ch1 id=\"nio\">NIO\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to NIO\" href=\"#nio\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>NIO的概念是同步非阻塞IO，也就是说我不用阻塞在这里等待对方执行完毕。而是我传递完消息之后就去做我自己的事情，时不时的通过Selector来看一看它是不是有返回值，也就是ReadAble状态。\u003C/p>\n\u003Cp>所以接下来我们就通过Java来简单实现一下客户端和服务端。\u003C/p>\n\u003Cp>首先介绍一下Selector，它提供了一种机制来管理多个通道（Channel）的I/O操作。通过使用selector，可以利用一个线程来监视多个通道上的事件（如连接请求、数据到达等），从而实现高效的服务端应用设计，尤其是在处理大量并发连接时。\u003C/p>\n\u003Cp>我们先来改造客户端吧，改造比较容易，首先是消息就不通过PrintWriter发送了，因为他们属于不同的I/O模型，我们这次就得使用ByteBuffer来存我们的输入数据，然后让Channel去write。\u003C/p>\n\u003Cp>同时呢，我们需要把Channel注册到Selector上去，让Selector来为我们轮询Channel的状态，当然也未必是轮询，后面我们讲到I/O多路复用的时候会说到。虽然这部分的代码内容稍多一些，但是我的注释写的还是比较翔实的。\u003C/p>\n\u003Cp>比较有趣的是，这个客户端的实现没有考虑到粘包问题，刚好让我碰到了我以前比较好奇为什么会出现的粘包问题，这部分我们会逐渐优化给大家看。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.net.InetSocketAddress;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.ByteBuffer;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.SelectionKey;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.Selector;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.SocketChannel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Date;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Iterator;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Set;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.ConcurrentLinkedQueue;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NIOClient\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ConcurrentLinkedQueue&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> messageQueue \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ConcurrentLinkedQueue&#x3C;>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        SocketChannel clientChannel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> SocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        clientChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">configureBlocking\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        clientChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">connect\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> InetSocketAddress\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"localhost\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Selector selector \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //将Channel注册到selector中去，并且设置该通道关注可连接事件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        clientChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">register\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(selector, SelectionKey.OP_CONNECT);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //当channel没被关的时候一直循环\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (clientChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isOpen\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //这段代码还是会阻塞当前线程，直到有注册到selector的通道准备好了进行某项操作\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">select\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //一旦 select() 方法返回，通过调用 selectedKeys() 方法来获取一个包含所有已准备好进行操作的通道的 SelectionKey 集合。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            // 每个 SelectionKey 都代表了一个与特定通道和操作相关的键。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            // 这些键包含了关于哪些通道准备好进行哪种类型的操作的信息（例如可读、可写等）。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            // 其实这里包含了多路复用的实现，因为获得了准备好的所有channel的信息，而不是一个channel准备好了就切换回用户态\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Set&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SelectionKey\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> keys \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">selectedKeys\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Iterator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SelectionKey\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> iter \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> keys.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //然后对所有准备好的通道依次处理\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (iter.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hasNext\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                SelectionKey key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> iter.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                iter.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //在第一次channel可用时候，其实只会触发这个isConnectable()，因为我们只注册该通道为可连接的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //这时候就会调用我们定义好的连接handler\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isConnectable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    handleConnect\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(key);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //在之后我们关注了可写事件，如果这个通道可写了，selector返回的key里就会设置为可写的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //这时候就会调用我们定义好的writeHandler\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //可写其实是频繁触发的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isWritable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    handleWrite\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(key);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //这时候如果服务器返回消息了，就会触发可读事件，selector返回的key里就会设置为可读的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //这时候就调用我们定义好的readHandler\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isReadable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    handleRead\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(key);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        clientChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * 连接handler\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> key\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> selector的包含channel信息以及其对应类型的key\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Exception\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> handleConnect\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SelectionKey \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //从key里获取channel\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        SocketChannel channel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (SocketChannel) key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //如果连接完毕，就要把channel的关注切换为关注可写事件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">finishConnect\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"连接建立成功，开始发送数据...\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">interestOps\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SelectionKey.OP_WRITE);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //当然其实也可以这么切换，就是既关注可写事件，又关注可读事件，毕竟谁规定服务器不可以在连接上之后给客户端发消息的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //连接成功之后我们往消息队列里加点数据\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 5\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                messageQueue.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"mess\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> handleWrite\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SelectionKey \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        SocketChannel channel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (SocketChannel) key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //触发可写事件的时候，我们从消息队列里挑选一条消息发过去\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //所以我们可能会触发粘包事件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">messageQueue.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isEmpty\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"触发可写事件且有消息要发！\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //分配写入字节流\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            ByteBuffer buffer \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ByteBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">allocate\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //从消息队列获取消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            String msg \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> messageQueue.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">peek\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //重置缓冲区，将限制设置为50，并将位置重置为0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">clear\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(msg.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getBytes\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //将缓冲区从写模式切换到读模式。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //它通过设置限制（limit）为当前位置，并将位置（position）重置为0。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //这意味着接下来可以从位置0开始读取数据，直到达到之前的位置（现在变成了限制）。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">flip\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //向channel写入数据\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bytesWritten \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">write\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(buffer);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //如果写入数据长度为0，就不进行接下来的操作了，也就是从消息队列里删除，那时候就会重新发送消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (bytesWritten \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //如果全部写入成功，就会把消息删除，并且打印已发送\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hasRemaining\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                String sentMsg \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> messageQueue.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">poll\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"消息:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sentMsg \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">已发送，时间：\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 切换关注读事件，但保持写事件关注\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">interestOps\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SelectionKey.OP_READ \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">|\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> SelectionKey.OP_WRITE);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> handleRead\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SelectionKey \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        SocketChannel channel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (SocketChannel) key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ByteBuffer buffer \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ByteBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">allocate\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bytesRead;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((bytesRead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">read\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(buffer)) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //同样是把buffer设置为读状态\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">flip\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //读取响应消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"收到响应：\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">array\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(), \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, bytesRead)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" ,当前时间是:\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">clear\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //为了验证读消息之后还能触发写事件，我们每次读完往messageQueue里加2条消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> count; i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            messageQueue.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"mess\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>好，设计完客户端之后，就是设计服务端了，与之前BIO处理多个连接的方式不同，我们服务端这次不使用多线程来管理多个连接，而是直接使用Selector来管理多个Channel，ServerSocketChannel和SocketChannel一视同仁，都交给一个Selector管理。\u003C/p>\n\u003Cp>让我们端上来吧！\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.net.InetSocketAddress;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.ByteBuffer;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.SelectionKey;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.Selector;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.ServerSocketChannel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.SocketChannel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Iterator;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Set;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NIOServer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // NIO基于Channel控制，所以有Selector管理所有的Channel\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ServerSocketChannel serverSocketChannel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ServerSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 设置为非阻塞模式\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">configureBlocking\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 设置监听端口\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">bind\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> InetSocketAddress\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 设置Selector管理所有Channel\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Selector selector \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 注册并设置连接时处理\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">register\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(selector, SelectionKey.OP_ACCEPT);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"服务启动成功，监听端口为：\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // NIO使用轮询，当有请求连接时，则启动一个线程\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> keySelect \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isOpen\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">select\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Set&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SelectionKey\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> selectionKeys \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">selectedKeys\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Iterator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SelectionKey\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> iterator \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> selectionKeys.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hasNext\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                SelectionKey next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (next.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isAcceptable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {    \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//  如果是连接的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    SocketChannel accept \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">accept\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (accept \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        //把新的会话测channel注册到selector里去，让Selector来管理它\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        accept.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">configureBlocking\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        //并且把它的感兴趣状态变为可读状态\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        accept.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">register\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(selector,SelectionKey.OP_READ);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //一旦可读了，就代表客户端发来了消息，那我们就去处理这个消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(next.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isReadable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    handleRead\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(next);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //其实处理这个消息我们依然有一处是阻塞的，就是我们返回给客户端的时候，要求客户端是写可用的。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //但是写可用的触发是很多次的，一般都是写可用的，所以我们就没有做过多的干预\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> handleRead\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SelectionKey \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        SocketChannel channel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (SocketChannel) key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ByteBuffer buffer \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ByteBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">allocate\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">clear\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> read \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">read\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(buffer);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String msg \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">array\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(), \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, read).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">trim\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"服务端收到消息：\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">msg);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String outMsg \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"【Echo】\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> msg; \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 生成回应信息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //模拟消息处理时长\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Thread.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sleep\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5000\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">clear\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(outMsg.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getBytes\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());  \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//回传信息放入缓冲区\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">flip\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">write\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(buffer);\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 回传信息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>服务器的实现我们写的时候还是阻塞的，但是其实写可用触发频率是很高的，所以我们就不把这个阻塞考虑进去了。\u003C/p>\n\u003Cp>这时候我们起一个服务端，一个客户端看看情况如何！\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/nio_single.png\" alt=\"NIO单客户端\">\u003Cfigcaption>NIO单客户端\u003C/figcaption>\u003C/figure>\n\u003Cp>是不是出现了粘包问题！在服务器处理mess0（也就是sleep 5s的时候），后面的mess1、mess2、mess3、mess4都到了，但是我们没有使用头部或者区分符号来进行区分，导致出现了粘包问题。\u003C/p>\n\u003Cp>但是恰恰是这个粘包，也进一步佐证了我们实现了NIO，因为粘包是NIO的常见问题之一。\u003C/p>\n\u003Cp>那是否我们的服务器在不使用多线程的情况下，不阻塞的同时响应两个客户端呢，我们来试一下就行哩！\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/nio_two.png\" alt=\"NIO多客户端\">\u003Cfigcaption>NIO多客户端\u003C/figcaption>\u003C/figure>\n\u003Cp>由此可见，是可以的！只不过单线程响应就要做好逐个处理的缓慢准备。\u003C/p>\n\u003Ch2 id=\"如何解决粘包问题\">如何解决粘包问题\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 如何解决粘包问题\" href=\"#如何解决粘包问题\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>其实解决粘包问题很简单，就是设计一个自己通用的协议，比如说设定一个自己通用的终止符号或者设计一个定长的头，用这个头来规定长度。\u003C/p>\n\u003Cp>我们就选择后者实现。\u003C/p>\n\u003Cp>下面是服务端的代码，这部分注释就少很多了，主要还是看handleRead部分\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.io.IOException;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.net.InetSocketAddress;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.ByteBuffer;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.SelectionKey;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.Selector;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.ServerSocketChannel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.SocketChannel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Iterator;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Set;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.ExecutorService;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.Executors;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NIOServer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // NIO基于Channel控制，所以有Selector管理所有的Channel\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ServerSocketChannel serverSocketChannel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ServerSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 设置为非阻塞模式\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">configureBlocking\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 设置监听端口\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">bind\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> InetSocketAddress\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 设置Selector管理所有Channel\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Selector selector \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 注册并设置连接时处理\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">register\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(selector, SelectionKey.OP_ACCEPT);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"服务启动成功，监听端口为：\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // NIO使用轮询，当有请求连接时，则启动一个线程\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isOpen\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">select\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Set&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SelectionKey\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> selectionKeys \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">selectedKeys\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Iterator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SelectionKey\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> iterator \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> selectionKeys.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hasNext\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                SelectionKey next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (next.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isAcceptable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {    \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//  如果是连接的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    SocketChannel accept \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">accept\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (accept \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        //把新的会话测channel注册到selector里去，让Selector来管理它\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        accept.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">configureBlocking\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        //并且把它的感兴趣状态变为可读状态\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        accept.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">register\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(selector,SelectionKey.OP_READ);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //一旦可读了，就代表客户端发来了消息，那我们就去处理这个消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(next.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isReadable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    handleRead\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(next);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> handleRead\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SelectionKey \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        SocketChannel channel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (SocketChannel) key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ByteBuffer buffer \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ByteBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">allocate\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1024\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> expectedLength \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">clear\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> read \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">read\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(buffer);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(read \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">flip\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remaining\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (expectedLength \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) { \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 等待读取长度头\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remaining\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    expectedLength \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getInt\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 读取4字节长度头\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 长度头未接收完整\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remaining\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> expectedLength) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                byte\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] bodyBytes \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> byte\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[expectedLength];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(bodyBytes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                String message \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(bodyBytes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"服务端收到消息：\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">message);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                String response \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"【Echo】\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> message;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                // 模拟处理延迟\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                Thread.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sleep\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5000\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                byte\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] responseBytes \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> response.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getBytes\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                // 构造响应：4字节长度头 + 消息体\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                ByteBuffer responseBuffer \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ByteBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">allocate\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> responseBytes.length);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                responseBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">putInt\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(responseBytes.length);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                responseBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(responseBytes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                responseBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">flip\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                // 发送响应\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (responseBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hasRemaining\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">write\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(responseBuffer);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                expectedLength \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 重置等待下一个消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//消息体未接收完整\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">compact\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 压缩缓冲区，保留未处理数据\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>客户端部分的代码修改为下：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.net.InetSocketAddress;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.ByteBuffer;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.SelectionKey;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.Selector;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.SocketChannel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Date;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Iterator;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Set;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.ConcurrentLinkedQueue;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NIOClient\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ConcurrentLinkedQueue&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> messageQueue \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ConcurrentLinkedQueue&#x3C;>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        SocketChannel clientChannel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> SocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        clientChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">configureBlocking\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        clientChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">connect\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> InetSocketAddress\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"localhost\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Selector selector \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        clientChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">register\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(selector, SelectionKey.OP_CONNECT);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">messageQueue.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isEmpty\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> clientChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isOpen\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">select\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Set&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SelectionKey\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> keys \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">selectedKeys\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Iterator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SelectionKey\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> iter \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> keys.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (iter.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hasNext\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                SelectionKey key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> iter.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                iter.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isConnectable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    handleConnect\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(key);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isWritable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    handleWrite\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(key);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isReadable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    handleRead\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(key);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        clientChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * 连接handler\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> key\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> selector的包含channel信息以及其对应类型的key\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Exception\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> handleConnect\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SelectionKey \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //从key里获取channel\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        SocketChannel channel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (SocketChannel) key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //如果连接完毕，就要把channel的关注切换为关注可写事件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">finishConnect\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"连接建立成功，开始发送数据...\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">interestOps\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SelectionKey.OP_WRITE);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //当然其实也可以这么切换，就是既关注可写事件，又关注可读事件，毕竟谁规定服务器不可以在连接上之后给客户端发消息的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //连接成功之后我们往消息队列里加点数据\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 5\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                messageQueue.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"mess\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> handleWrite\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SelectionKey \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        SocketChannel channel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (SocketChannel) key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //触发可写事件的时候，我们从消息队列里挑选一条消息发过去\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //所以我们可能会触发粘包事件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">messageQueue.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isEmpty\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"触发可写事件且有消息要发！\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //分配写入字节流\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            ByteBuffer buffer \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ByteBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">allocate\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1024\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //从消息队列获取消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            String msg \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> messageQueue.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">peek\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            byte\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] msgBytes \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> msg.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getBytes\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //数据总长为4+真实数据，4是一个int，用来存储数据长度\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> totalLength \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> msgBytes.length; \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 头部4字节 + 消息体\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //重置缓冲区，将限制设置为500，并将位置重置为0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">clear\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">putInt\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(msgBytes.length); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 写入4字节长度头（大端序）\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(msgBytes);           \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 写入消息体\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //将缓冲区从写模式切换到读模式。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //它通过设置限制（limit）为当前位置，并将位置（position）重置为0。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //这意味着接下来可以从位置0开始读取数据，直到达到之前的位置（现在变成了限制）。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">flip\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //向channel写入数据\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bytesWritten \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">write\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(buffer);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //如果写入数据长度为0，就不进行接下来的操作了，也就是从消息队列里删除，那时候就会重新发送消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (bytesWritten \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //如果全部写入成功，就会把消息删除，并且打印已发送\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hasRemaining\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                String sentMsg \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> messageQueue.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">poll\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"消息:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sentMsg \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">已发送，时间：\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">interestOps\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SelectionKey.OP_READ \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">|\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> SelectionKey.OP_WRITE);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> handleRead\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SelectionKey \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        SocketChannel channel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (SocketChannel) key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ByteBuffer readBuffer \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ByteBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">allocate\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1024\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        readBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">clear\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bytesRead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">read\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(readBuffer);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (bytesRead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        readBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">flip\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> expectedLength \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (readBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remaining\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (expectedLength \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) { \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 等待读取长度头\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (readBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remaining\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    expectedLength \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> readBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getInt\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 读取4字节长度头\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 长度头未接收完整\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (readBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remaining\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> expectedLength) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                byte\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] bodyBytes \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> byte\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[expectedLength];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                readBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(bodyBytes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                String response \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(bodyBytes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"收到响应：\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> response \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"，时间：\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                expectedLength \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 重置等待下一个消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 消息体未接收完整,继续回去候着\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        readBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">compact\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 压缩缓冲区，保留未处理数据\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>最终的结果如下：\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/nianbao.png\" alt=\"解决NIO粘包问题\">\u003Cfigcaption>解决NIO粘包问题\u003C/figcaption>\u003C/figure>\n\u003Cp>可以发现，成功解决哩！\u003C/p>\n\u003Cp>那么接下来，我们就可以转战I/O多路复用了。\u003C/p>\n\u003Ch1 id=\"io多路复用\">I/O多路复用\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to I/O多路复用\" href=\"#io多路复用\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>其实，在实现之前的NIO的时候，我们已经有用到I/O多路复用了，还记得我们使用了Selector吗，我们把所有的SocketChannel注册到一个Selector上，Selector帮我们判断他们是否能够满足我们关注的事件，如果能满足我们关注的事件，就触发对应的事件关注模式。\u003C/p>\n\u003Cp>那这时候大家有没有一个疑惑呢？为什么调用\u003Ccode> Set&#x3C;SelectionKey> keys = selector.selectedKeys();\u003C/code>这段代码，返回的结果是一个集合呢？它监视了select管理的全部channel的状态，这就是IO多路复用的体现！由此，我们在实现NIO的服务器的时候并没有在程序里显示创建额外的子线程来响应，而是创建了一个文件描述符channel，并把它交给selector管理！客户端其实是不需要IO多路复用的，因为客户端只设置了一个Channel。\u003C/p>\n\u003Cp>想象一下，如果没有IO多路复用，这段代码的逻辑是什么呢？\u003C/p>\n\u003Cp>我们还是更加具体的讲一下Selector的工作流程吧\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>注册通道与兴趣操作\u003C/strong>：首先，通过调用\u003Ccode>SelectableChannel.register(Selector sel, int ops)\u003C/code>方法将一个或多个通道注册到选择器上，并指定对该通道感兴趣的I/O操作类型（如\u003Ccode>OP_READ\u003C/code>, \u003Ccode>OP_WRITE\u003C/code>, \u003Ccode>OP_CONNECT\u003C/code>, 或 \u003Ccode>OP_ACCEPT\u003C/code>）。这一步骤主要是在用户态完成的。\u003C/li>\n\u003Cli>\u003Cstrong>轮询请求\u003C/strong>：当调用\u003Ccode>selector.select()\u003C/code>或者其变种时，Java程序会进入等待状态，也就是触发一个打断，由用户态切换到内核态，直到至少有一个已注册的通道准备好执行至少一个你感兴趣的操作。在这个过程中，Java运行时环境会发起系统调用（例如，在Unix/Linux系统上的\u003Ccode>epoll_wait\u003C/code>或在Windows上的\u003Ccode>WSAWaitForMultipleEvents\u003C/code>），这些系统调用实际上会使控制权转移到操作系统内核。\u003C/li>\n\u003Cli>\u003Cstrong>内核态处理\u003C/strong>：一旦控制权转移到内核，操作系统会监视所有被注册的通道，检查它们是否满足任何已注册的兴趣条件。这一过程高效地利用了操作系统提供的事件通知机制，比如Linux上的\u003Ccode>epoll\u003C/code>、BSD系统上的\u003Ccode>kqueue\u003C/code>或Windows上的I/O完成端口(IOCP)等。如果某个或某些通道的状态发生了变化（例如，新的数据到达使得读操作变为可能），内核就会识别出这些事件。\u003C/li>\n\u003Cli>\u003Cstrong>返回用户态并更新就绪状态\u003C/strong>：当有通道变得“就绪”时，操作系统会返回相应的信息给Java的NIO层，然后从\u003Ccode>select()\u003C/code>方法返回，允许Java程序继续执行。此时，你可以通过\u003Ccode>selectedKeys()\u003C/code>方法获取所有已经准备好的通道对应的\u003Ccode>SelectionKey\u003C/code>对象集合，并对这些通道进行相应的I/O操作。\u003C/li>\n\u003C/ol>\n\u003Cp>如果没有IO多路复用呢？是不是处理就不一样了呢？需要手动的遍历每个文件描述符，也就是我们要手动遍历每一个Channel，然后去内核态判断他们是不是可接受、可连接、可读、可写的，然后再回到用户态来进行对应的操作。似乎这样是可行的？\u003C/p>\n\u003Cp>但是需要注意一点，这样又一个很明显的问题，就是频繁的进行了用户态和内核态的切换，这种切换是需要额外耗时的。\u003C/p>\n\u003Cp>那么除此之外，其实还有一些其他的问题：\u003C/p>\n\u003Col>\n\u003Cli>每个连接都需要一个独立的线程或进程：在这种情况下，为了处理多个并发连接，常见的做法是为每个连接分配一个独立的线程或进程。这个线程或进程将负责执行读写操作，直到该连接关闭。这导致了所谓的“一连接一线程”模型。\u003C/li>\n\u003Cli>缺乏高效的事件通知机制：在没有IO多路复用（如select、poll、epoll等）的情况下，程序员需要手动检查每个文件描述符的状态，或者依赖于每个线程/进程阻塞在一个特定的文件描述符上等待数据的到来。这种方式无法高效地管理和监控大量文件描述符。\u003C/li>\n\u003Cli>资源消耗大且扩展性差：由于每个连接都需要一个独立的线程或进程，随着连接数的增加，系统资源（如内存和CPU时间）会被迅速耗尽。此外，大量的上下文切换也会降低系统的整体性能，使得这种方法难以扩展到支持数千甚至数万个并发连接。\u003C/li>\n\u003C/ol>\n\u003Cp>所以这时候我们就可以理解什么是IO多路复用了，简单来说就是：允许单个线程同时监视多个文件描述符。那么具体是怎么实现的，就是下面要讨论的内容了。分为：select、poll、epoll三种。其实到后面已经有点脱离Java的范畴了，所以在这里提前说一下。Java的Selector的select方法是灵活的，主要还是根据系统不同来实现的，如果在Linux内核上，会默认使用epoll来实现，如果epoll有些特性无法满足则会使用poll。在Windows内核上就需要使用select来实现。\u003C/p>\n\u003Ch2 id=\"select\">Select\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to Select\" href=\"#select\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>Select模型的实现是基于轮询的，也就是每一次都把文件描述符的bitmap从用户态拷贝到内核态。这个bitmap最大大小为1024，所以select模型的一个selector最多只能监管1024个channel\u003C/p>\n\u003Cp>用户态的bitmap存储了哪些文件描述符需要被监视，如果需要被监视，bitmap对应位置置为1。\u003C/p>\n\u003Cp>内核态遍历为1的bitmap，如果文件描述符已经就绪，那就将对应位置置为1，否则为0，然后将bitmap返回给用户态\u003C/p>\n\u003Cp>主要流程如下：\u003C/p>\n\u003Cul>\n\u003Cli>将当前进程的所有文件描述符，一次性的从用户态拷贝到内核态；\u003C/li>\n\u003Cli>在内核中快速的无差别遍历每个fd，判断是否有数据到达；\u003C/li>\n\u003Cli>将所有fd状态，从内核态拷贝到用户态，并返回已就绪fd的个数；\u003C/li>\n\u003Cli>在用户态遍历判断具体哪个fd已就绪，然后进行相应的事件处理。\u003C/li>\n\u003C/ul>\n\u003Cp>缺点是很明显的：\u003C/p>\n\u003Col>\n\u003Cli>能管理的文件描述符有限，最多为1024\u003C/li>\n\u003Cli>每次都需要将文件描述符的bitmap从用户态拷贝到内核态，再从内核态拷贝到用户态\u003C/li>\n\u003Cli>内核态返回bitmap之后，用户态仍然需要遍历才能知道哪个文件描述符就绪了\u003C/li>\n\u003C/ol>\n\u003Cp>一共有三个bitmap，分别对应了readfds、writefds、errorfds。主要检查三个对应的项目。\u003C/p>\n\u003Cp>读缓冲区（readfds）：检测里边有没有数据，如果有数据该缓冲区对应的文件描述符就绪\n写缓冲区（writefds）：检测写缓冲区是否可以写(有没有容量)，如果有容量可以写，缓冲区对应的文件描述符就绪\n读写异常（errorfds）：检测读写缓冲区是否有异常，如果有该缓冲区对应的文件描述符就绪\u003C/p>\n\u003Ch2 id=\"poll\">Poll\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to Poll\" href=\"#poll\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>Poll模型其实和Select模型是比较类似的，也是需要轮询的。\u003C/p>\n\u003Cp>区别在于：\u003C/p>\n\u003Cp>select使用位图来标记想关注的文件描述符，使用三个位图来标记想关注的读事件，写事件，错误事件。\u003C/p>\n\u003Cp>poll使用一个结构体pollfd数组来标志想关注的文件描述符和在这个描述符上感兴趣的事件，poll的优点是数组的长度突破了1024的限制，其他的区别不大。\u003C/p>\n\u003Cp>select可以跨平台，但是poll只支持Linux使用\u003C/p>\n\u003Cp>两者同样都需要进行多次内核态和用户态的拷贝\u003C/p>\n\u003Ch2 id=\"epoll\">EPoll\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to EPoll\" href=\"#epoll\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>其实epoll才是最难理解的部分，但是也是对前两者设计了优化，解决了文件描述符限制和多次内核态和用户态拷贝导致的性能开销问题。\u003C/p>\n\u003Cp>Epoll其实基于一个比较重要的模型，就是事件驱动模型，使用了回调机制。\u003C/p>\n\u003Cp>Select模型和Poll模型每次都需要遍历全部的文件描述符来检查它是否就绪，而epoll不同，它允许用户在注册时指定感兴趣的事件，这样在事件发生时，内核只需要更新它的内部数据结构，而不是每次都遍历全部的文件描述符。\u003C/p>\n\u003Ch3 id=\"执行原理\">执行原理\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 执行原理\" href=\"#执行原理\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>int num_size = 5;//epoll监听的文件描述符的个数，其实在linux2.6.8的时候就取消这个限制了，这个数字的存在只是为了兼容\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>int epoll_fd = poll_create(num_size);//创建一个epoll模型，其实也是一个文件描述符\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>//然后会创建一个内部数据结构，重点是两个部分，一个是红黑树的根，另一个是rd_list，也就是已就绪的双端队列\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>//假设这个时候有5个客户端连接到了服务端，epoll就会调用五次event_ctl，会在红黑树上创建5个节点，使用的方法是ADD，如果已经建立完成客户端，就要使用MOD修改监听的事件为读事件\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>//event_ctl方法需要传入的包括红黑树的根也就是even模型，需要操作的文件描述符，对这个文件描述符的操作，需要监视文件描述符事件集合\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>//event_ctl方法向内存注册fd和事件的时候，注册了一个回调函数，当操作系统将数据拷贝到缓冲区后，就会执行回调函数\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>//创建完成之后，如果有三个客户端向服务端的网卡发送数据，网卡会用DMA-Copy技术将数据拷贝到内存缓冲区，执行回调函数，这时候会将缓冲区的内容和文件描述符加入到rd_list，其实没有做拷贝操作，只是做了指针的连接操作\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>//这时候如果服务端调用epoll_wait方法，就会判断哪些文件描述符上的哪些事件已经就绪了，也就是把rd_link的内容拷贝到返回数组中，然后返回内核态\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch3 id=\"为什么会快\">为什么会快\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 为什么会快\" href=\"#为什么会快\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>只有被调用epoll_wait方法的时候，epoll才会进行一次内核态到用户态的拷贝，所以上下文切换较少。\u003C/p>\n\u003Cp>epoll返回的事件只有就绪的事件，不需要遍历比较。\u003C/p>\n\u003Cp>而且epoll是通过回调的方式来将就绪的事件加入到就绪队列中。\u003C/p>\n\u003Ch1 id=\"总结\">总结\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 总结\" href=\"#总结\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>至此，IO系列基本就分析完了，如果有问题欢迎各种平台交流。\u003C/p>",{"headings":280,"localImagePaths":307,"remoteImagePaths":308,"frontmatter":309,"imagePaths":315},[281,284,287,289,292,295,298,301,303,305],{"depth":25,"slug":282,"text":283},"bio","BIO",{"depth":25,"slug":285,"text":286},"nio","NIO",{"depth":118,"slug":288,"text":288},"如何解决粘包问题",{"depth":25,"slug":290,"text":291},"io多路复用","I/O多路复用",{"depth":118,"slug":293,"text":294},"select","Select",{"depth":118,"slug":296,"text":297},"poll","Poll",{"depth":118,"slug":299,"text":300},"epoll","EPoll",{"depth":126,"slug":302,"text":302},"执行原理",{"depth":126,"slug":304,"text":304},"为什么会快",{"depth":25,"slug":306,"text":306},"总结",[],[],{"title":268,"tags":310,"categories":311,"mathjax":105,"abbrlink":273,"sticky":25,"swiper_index":25,"published":313,"description":270,"minutes":314},[101,272],[312],"小实验",["Date","2025-03-20T14:28:14.000Z"],37,[],"origin/2025-04-16-hashmap的增加和扩容原理",{"id":316,"data":318,"body":325,"filePath":326,"digest":327,"rendered":328},{"title":319,"published":320,"description":321,"tags":322,"draft":103,"pin":104,"toc":105,"lang":106,"abbrlink":324},"HashMap的增加和扩容原理",["Date","2025-04-16T14:52:44.000Z"],"关于HashMap的扩容，停留于八股其实是没意思的，看看源码或许会让我理解的深入一点。",[101,323],"代码","hash-map-about","# 写在前面\n\nHashMap的知识，看八股肯定是不够的，所以来看看源码。\n\n看很多源码之后才知道Java的一些类的实现有多么优雅，我只能用优雅来形容。\n\n# 源码解读\n\n我主要是从两个方面来看这部分的源码，一个是创建，一个是添加。其实重点还是添加，只不过我在添加的时候看到了懒初始化的操作，所以回去看了一眼创建。\n\n添加操作关注的主要有两个部分，\n\n1. 桶深过深转红黑树的操作\n2. 达到负载因子标准之后的扩容操作\n\n## 创建\n\n下面这行代码，请问HashMap的数组是在哪一行代码处创建的呢？\n\n```java\nimport java.util.HashMap;\n\npublic class HashMapLearn {\n    public static void main(String[] args) {\n      \t//1\n        HashMap\u003CInteger,Integer> hashMap = new HashMap\u003C>(16, 0.75F);\n        //2\n      \thashMap.put(1,2);\n    }\n}\n```\n\n其实是在2处才创建。\n\n还是看源码，可以看到，通过构造函数初始化的时候，只是赋值了一些容量类的参数。\n\n也就是说，HashMap内部数组的创建，是懒式创建的。这点在我们后面看put源码的时候会看到。\n\n懒初始化可以延迟资源的分配直到真正需要的时候，从而提高资源利用率和程序启动速度。\n\n```java\n/* ---------------- Public operations -------------- */\n\n/**\n * Constructs an empty {@code HashMap} with the specified initial\n * capacity and load factor.\n *\n * @param  initialCapacity the initial capacity\n * @param  loadFactor      the load factor\n * @throws IllegalArgumentException if the initial capacity is negative\n *         or the load factor is nonpositive\n */\npublic HashMap(int initialCapacity, float loadFactor) {\n    if (initialCapacity \u003C 0)\n        throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                           initialCapacity);\n    if (initialCapacity > MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    if (loadFactor \u003C= 0 || Float.isNaN(loadFactor))\n        throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                           loadFactor);\n    this.loadFactor = loadFactor;\n    this.threshold = tableSizeFor(initialCapacity);\n}\n```\n\n 但是也未必是用了就是好的，其实懒初始化也会有别的可能的问题：\n\n1. **初次访问延迟**：由于实际的资源分配被推迟到第一次使用时，这可能会导致初次访问时出现明显的延迟。\n2. **并发问题**：在多线程环境下，如果没有适当的同步机制，懒创建可能导致竞态条件。比如两个线程几乎同时检测到资源未初始化并尝试同时初始化它，这可能会引起错误或不必要的重复工作。\n3. **复杂性增加**：为了确保懒创建的安全性和效率，特别是在线程安全的场景下，可能需要引入额外的逻辑控制，如双重检查锁定模式(Double-Checked Locking)，增加了代码的复杂性和维护难度。\n\n## 加入\n\nput的源码其实也不是特别多，或者说其实HashMap的源码部分就不是特别多，我把我的思路及分析都写在了注释中了。\n\n```java\npublic V put(K key, V value) {\n    return putVal(hash(key), key, value, false, true);\n}\n\n/**\n * Implements Map.put and related methods.\n *\n * @param hash hash for key\n * @param key the key\n * @param value the value to put\n * @param onlyIfAbsent if true, don't change existing value\n * @param evict if false, the table is in creation mode.\n * @return previous value, or null if none\n */\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    Node\u003CK,V>[] tab; Node\u003CK,V> p; int n, i;\n  \t//太优雅了，懒汉创建，但是如果不加锁的话可能会出现竞争问题\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n  \t//如果桶的位置为空，直接就加入了\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node\u003CK,V> e; K k;\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n      \t//如果不是链表的存储方式而是红黑树，那就得用树的插入方式\n        else if (p instanceof TreeNode)\n            e = ((TreeNode\u003CK,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n          \t//否则就寻找链表的最后一个节点或者对应的等key节点\n            for (int binCount = 0; ; ++binCount) {\n              \t//如果找遍了全部的桶都没找到，就创建一个新节点加在最后\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                  \t//如果桶深度等于8，同时还需要转成红黑树\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n      \t//找到了对应的key\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n  \t//没找到对应的key，在上面加了Node，同时要修改modCount\n    ++modCount;\n  \t//size超过阈值，就要扩容\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\n下面我们先看看扩容吧，其实转红黑树的代码我未必能看懂，所以我还是决定先看看扩容。\n\n## 扩容\n\n```java\n/**\n * Initializes or doubles table size.  If null, allocates in\n * accord with initial capacity target held in field threshold.\n * Otherwise, because we are using power-of-two expansion, the\n * elements from each bin must either stay at same index, or move\n * with a power of two offset in the new table.\n *\n * @return the table\n */\nfinal Node\u003CK,V>[] resize() {\n    Node\u003CK,V>[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    if (oldCap > 0) {\n      \t//如果扩容的时候，数组的长度已经大于等于最大容量了，就直接把阈值放飞了\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n      \t//双倍扩容的情况\n        else if ((newCap = oldCap \u003C\u003C 1) \u003C MAXIMUM_CAPACITY &&\n                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr \u003C\u003C 1; // double threshold\n    }\n  \t//初始化定容量的情况\n    else if (oldThr > 0) // initial capacity was placed in threshold\n        newCap = oldThr;\n    else {               // zero initial threshold signifies using defaults\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n  \t//定义新的阈值\n    if (newThr == 0) {\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap \u003C MAXIMUM_CAPACITY && ft \u003C (float)MAXIMUM_CAPACITY ?\n                  (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n    Node\u003CK,V>[] newTab = (Node\u003CK,V>[])new Node[newCap];\n  \t//直接将原表地址替换为新表地址\n    table = newTab;\n    if (oldTab != null) {\n      \t//开始迁移\n        for (int j = 0; j \u003C oldCap; ++j) {\n            Node\u003CK,V> e;\n            if ((e = oldTab[j]) != null) {\n              \t//在第一步的时候就把原数组的对象引用释放掉\n              \t//这部分操作其实是存疑的，这么做一部分原因是为了减少原数组引用对对象带来的影响\n              \t//这么做是为了支持多线程，但是这样反而会在多线程同时扩容数组的时候带来数据的丢失\n                oldTab[j] = null;\n                if (e.next == null)\n                  \t//如果是单个节点，直接迁移，因为是高位扩容，所以直接放不会冲突\n                    newTab[e.hash & (newCap - 1)] = e;\n                else if (e instanceof TreeNode)\n                  \t//关于红黑树的拆分放桶的方法，这里就不多扩展了，后面补充在附录里吧\n                    ((TreeNode\u003CK,V>)e).split(this, newTab, j, oldCap);\n                else { // preserve order\n                  \t//然后就是按照链表的顺序开始\n                    Node\u003CK,V> loHead = null, loTail = null;\n                    Node\u003CK,V> hiHead = null, hiTail = null;\n                    Node\u003CK,V> next;\n                    do {\n                      \t//然后这个时候就是进行while循环的处理\n                        next = e.next;\n                      \t//看这个节点是不是留在原桶,因为需要维护两个桶的尾\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                      \t//如果不在原桶就要放到高位桶里\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                  \t//原桶的放到原桶位置\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                  \t//高位桶的放到高位\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n```\n\n扩容这部分其实就些内容，其实难点还是在红黑树的那一块，但是我比较懒散没有详细去看。\n\n## 桶过深转红黑树\n\n主要是通过这一个方法来实现的\n\n```java\nfinal void treeifyBin(Node\u003CK,V>[] tab, int hash) {\n    int n, index;\n    Node\u003CK,V> e;\n\n    // 如果数组容量小于 MIN_TREEIFY_CAPACITY，则优先扩容，这个值是64\n    if (tab == null || (n = tab.length) \u003C MIN_TREEIFY_CAPACITY)\n        resize();\n    else if ((e = tab[index = (n - 1) & hash]) != null) {\n        // 将链表转换为红黑树\n        TreeNode\u003CK,V> hd = null, tl = null;\n        do {\n            TreeNode\u003CK,V> p = replacementTreeNode(e, null);\n          \t//如果是第一个节点，那么就是头节点，把p给hd\n            if (tl == null)\n                hd = p;\n          \t//如果不是，就是构建前后关系\n            else {\n                p.prev = tl;\n                tl.next = p;\n            }\n            tl = p;\n        } while ((e = e.next) != null);\n      \t//然后就是调用这个转红黑树的方法\n        if ((tab[index] = hd) != null)\n            hd.treeify(tab);\n    }\n}\n```\n\n这是最核心的部分了，也就是红黑树的构建。\n\n```java\n/**\n * Forms tree of the nodes linked from this node.\n */\nfinal void treeify(Node\u003CK,V>[] tab) {\n    TreeNode\u003CK,V> root = null;\n    for (TreeNode\u003CK,V> x = this, next; x != null; x = next) {\n      \t//遍历节点\n        next = (TreeNode\u003CK,V>)x.next;\n      \t//首先是清空左右，为了防止遗留问题\n        x.left = x.right = null;\n      \t//如果是第一个节点，就把它设置为根节点，无父亲节点，非红节点\n        if (root == null) {\n            x.parent = null;\n            x.red = false;\n            root = x;\n        }\n      \t//否则就按照key的hash进行红黑树构建了\n        else {\n            K k = x.key;\n            int h = x.hash;\n          \t//用于存储键的比较类（如果键实现了 Comparable 接口）。\n            Class\u003C?> kc = null;\n          \t//从根节点开始遍历\n            for (TreeNode\u003CK,V> p = root;;) {\n              \t//dir表示当前节点应该插入到左子树（-1）还是右子树（1）。\n                int dir, ph;\n                K pk = p.key;\n              \t//哈希值比较：\n                //如果当前节点的哈希值小于 p 的哈希值，则插入到左子树。\n                //如果当前节点的哈希值大于 p 的哈希值，则插入到右子树。\n                if ((ph = p.hash) > h)\n                    dir = -1;\n                else if (ph \u003C h)\n                    dir = 1;\n              \t//如果哈希值相等，则进一步比较键值：\n                //如果键实现了 Comparable 接口，则使用 Comparable 进行比较。\n                //如果键未实现 Comparable 或比较结果相等，则调用 tieBreakOrder 方法进行仲裁。\n                else if ((kc == null &&\n                        (kc = comparableClassFor(k)) == null) ||\n                        (dir = compareComparables(kc, k, pk)) == 0)\n                    dir = tieBreakOrder(k, pk);\n\t\t\t\t\t\t\t\t//找到对应的插入位置\n                TreeNode\u003CK,V> xp = p;\n                if ((p = (dir \u003C= 0) ? p.left : p.right) == null) {\n                    x.parent = xp;\n                    if (dir \u003C= 0)\n                        xp.left = x;\n                    else\n                        xp.right = x;\n                  \t//平衡红黑树\n                    root = balanceInsertion(root, x);\n                    break;\n                }\n            }\n        }\n    }\n  \t//绑定头节点到数组上\n    moveRootToFront(tab, root);\n}\n```\n\n平衡红黑树部分的代码感觉有点不太想看说实话，过段时间再看吧。\n\n# ConcurrentHashMap\n\n其实我们可以关注到，HashMap几乎没有实现对多线程的关注，所以他是线程不安全的，那么ConcurrentHashMap又是如何实现线程的安全呢？其实这个比较容易被问到的问题，几乎所有的八股都会说什么分段锁啊，CAS操作啊，但是具体的源码实现是什么样子呢？很少有人关注，所以我这里来看一眼吧。\n\n## 构造方法\n\n首先还是看看构造方法\n\n```java\n/**\n * Creates a new, empty map with an initial table size based on\n * the given number of elements ({@code initialCapacity}), initial\n * table density ({@code loadFactor}), and number of concurrently\n * updating threads ({@code concurrencyLevel}).\n *\n * @param initialCapacity the initial capacity. The implementation\n * performs internal sizing to accommodate this many elements,\n * given the specified load factor.\n * @param loadFactor the load factor (table density) for\n * establishing the initial table size\n * @param concurrencyLevel the estimated number of concurrently\n * updating threads. The implementation may use this value as\n * a sizing hint.\n * @throws IllegalArgumentException if the initial capacity is\n * negative or the load factor or concurrencyLevel are\n * nonpositive\n */\npublic ConcurrentHashMap(int initialCapacity,\n                         float loadFactor, int concurrencyLevel) {\n    if (!(loadFactor > 0.0f) || initialCapacity \u003C 0 || concurrencyLevel \u003C= 0)\n        throw new IllegalArgumentException();\n  \t//初始容量不能小于并发级别\n    if (initialCapacity \u003C concurrencyLevel)   // Use at least as many bins\n        initialCapacity = concurrencyLevel;   // as estimated threads\n    long size = (long)(1.0 + (long)initialCapacity / loadFactor);\n    int cap = (size >= (long)MAXIMUM_CAPACITY) ?\n        MAXIMUM_CAPACITY : tableSizeFor((int)size);\n    this.sizeCtl = cap;\n}\n```\n\n其实没有太多的修改，主要是增加了并发级别，要求了初始容量不能小于并发级别，其余的与HashMap一致\n\n接下来就看看插入操作到底是怎么实现保证一致性的\n\n```java\n/**\n * Maps the specified key to the specified value in this table.\n * Neither the key nor the value can be null.\n *\n * \u003Cp>The value can be retrieved by calling the {@code get} method\n * with a key that is equal to the original key.\n *\n * @param key key with which the specified value is to be associated\n * @param value value to be associated with the specified key\n * @return the previous value associated with {@code key}, or\n *         {@code null} if there was no mapping for {@code key}\n * @throws NullPointerException if the specified key or value is null\n */\npublic V put(K key, V value) {\n    return putVal(key, value, false);\n}\n\n/** Implementation for put and putIfAbsent */\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n    if (key == null || value == null) throw new NullPointerException();\n  \t//spread 方法：\n    //对键的哈希值进行重新计算，以减少哈希冲突。\n    //公式为：(h ^ (h >>> 16)) & HASH_BITS，其中 HASH_BITS 是一个掩码。\n    int hash = spread(key.hashCode());\n    int binCount = 0;\n    for (Node\u003CK,V>[] tab = table;;) {\n        Node\u003CK,V> f; int n, i, fh; K fk; V fv;\n      \t//如果tab为空，初始化tab，为了阅读的连贯性，我们后面再看这个方法\n        if (tab == null || (n = tab.length) == 0)\n            tab = initTable();\n      \t//如果为空桶，使用casTabAt\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n            if (casTabAt(tab, i, null, new Node\u003CK,V>(hash, key, value)))\n                break;                   // no lock when adding to empty bin\n        }\n      \t//这个MOVED其实是个特殊标记，表示当前正在进行扩容操作\n      \t//static final int MOVED     = -1; // hash for forwarding nodes\n        else if ((fh = f.hash) == MOVED)\n          \t//这个方法还是挺核心的，主要作用是检测当前是否正在进行扩容操作，并参与协助完成扩容任务。\n          \t//如果发现某个桶（bucket）已经被标记为正在迁移（通过 ForwardingNode 标记），则该方法会尝试参与到迁移过程中。\n\t\t\t\t\t\t//它的主要目标是加速扩容过程，通过允许多个线程并行地完成数据迁移。\n            tab = helpTransfer(tab, f);\n        else if (onlyIfAbsent // check first node without acquiring lock\n                 && fh == hash\n                 && ((fk = f.key) == key || (fk != null && key.equals(fk)))\n                 && (fv = f.val) != null)\n            return fv;\n        else {\n          \t//如果对应问题都没有出现，那就对f枷锁，然后把节点放入到对应的位置中去，这里的思路其实与HashMap一致\n            V oldVal = null;\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {\n                    if (fh >= 0) {\n                        binCount = 1;\n                        for (Node\u003CK,V> e = f;; ++binCount) {\n                            K ek;\n                            if (e.hash == hash &&\n                                ((ek = e.key) == key ||\n                                 (ek != null && key.equals(ek)))) {\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node\u003CK,V> pred = e;\n                            if ((e = e.next) == null) {\n                                pred.next = new Node\u003CK,V>(hash, key, value);\n                                break;\n                            }\n                        }\n                    }\n                    else if (f instanceof TreeBin) {\n                        Node\u003CK,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin\u003CK,V>)f).putTreeVal(hash, key,\n                                                       value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                    else if (f instanceof ReservationNode)\n                        throw new IllegalStateException(\"Recursive update\");\n                }\n            }\n            if (binCount != 0) {\n                if (binCount >= TREEIFY_THRESHOLD)\n                    treeifyBin(tab, i);\n                if (oldVal != null)\n                    return oldVal;\n                break;\n            }\n        }\n    }\n    addCount(1L, binCount);\n    return null;\n}\n```\n\n然后我们最后再看一眼InitTable\n\n```java\n/**\n * Initializes table, using the size recorded in sizeCtl.\n */\nprivate final Node\u003CK,V>[] initTable() {\n    Node\u003CK,V>[] tab; int sc;\n  \t//for循环，组钥匙cas操作\n    while ((tab = table) == null || tab.length == 0) {\n        if ((sc = sizeCtl) \u003C 0)\n          \t//如果sizeCtl\u003C0，表示有其他值在init，就把时间片让出去\n            Thread.yield(); // lost initialization race; just spin\n      \t//否则就开始CAS操作，设置sizeCtl为-1，表示自己要初始化了\n      \t//初始化完成之后就break即可\n        else if (U.compareAndSetInt(this, SIZECTL, sc, -1)) {\n            try {\n              \t//但是在CAS成功之后，会判断table是不是为空，如果为空才执行初始化，否则就直接进入finally段，单后break了。\n              \t//也就是CAS自旋成功之后才会break这个循环\n                if ((tab = table) == null || tab.length == 0) {\n                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                    @SuppressWarnings(\"unchecked\")\n                    Node\u003CK,V>[] nt = (Node\u003CK,V>[])new Node\u003C?,?>[n];\n                    table = tab = nt;\n                    sc = n - (n >>> 2);\n                }\n            } finally {\n                sizeCtl = sc;\n            }\n            break;\n        }\n    }\n    return tab;\n}\n```\n\n# 完结\n\n基本完结啦，后面如果我有时间的话会认真看看红黑树部分的代码的，但是现在可能对我来说留给我的时间确实不多了\n\n# 附录，红黑树的split，注释和代码均来自通义千问\n\n以下是 `TreeNode.split` 方法的核心逻辑（简化版）：\n\n```java\nfinal void split(HashMap\u003CK,V> map, Node\u003CK,V>[] tab, int index, int bit) {\n    TreeNode\u003CK,V> b = this;\n    // loHead 和 loTail 表示保留在原桶的节点链\n    TreeNode\u003CK,V> loHead = null, loTail = null;\n    // hiHead 和 hiTail 表示需要移动到新桶的节点链\n    TreeNode\u003CK,V> hiHead = null, hiTail = null;\n    int lc = 0, hc = 0;\n\n    // 遍历红黑树的所有节点\n    for (TreeNode\u003CK,V> e = b, next; e != null; e = next) {\n        next = (TreeNode\u003CK,V>)e.next;\n        e.next = null;\n\n        // 判断节点属于哪个桶\n        if ((e.hash & bit) == 0) {\n            if ((e.prev = loTail) == null)\n                loHead = e;\n            else\n                loTail.next = e;\n            loTail = e;\n            ++lc;\n        } else {\n            if ((e.prev = hiTail) == null)\n                hiHead = e;\n            else\n                hiTail.next = e;\n            hiTail = e;\n            ++hc;\n        }\n    }\n\n    // 将低桶（原桶）的节点放入新数组\n    if (loHead != null) {\n        if (lc \u003C= UNTREEIFY_THRESHOLD)\n            tab[index] = loHead.untreeify(map);\n        else {\n            tab[index] = loHead;\n            if (hiHead != null) // 如果高桶也有节点，则需要保持红黑树结构\n                loHead.treeify(tab);\n        }\n    }\n\n    // 将高桶（新桶）的节点放入新数组\n    if (hiHead != null) {\n        if (hc \u003C= UNTREEIFY_THRESHOLD)\n            tab[index + bit] = hiHead.untreeify(map);\n        else {\n            tab[index + bit] = hiHead;\n            if (loHead != null) // 如果低桶也有节点，则需要保持红黑树结构\n                hiHead.treeify(tab);\n        }\n    }\n}\n```","src/content/posts/origin/2025-04-16-HashMap的增加和扩容原理.md","6097d7252a8b7e43",{"html":329,"metadata":330},"\u003Ch1 id=\"写在前面\">写在前面\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 写在前面\" href=\"#写在前面\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>HashMap的知识，看八股肯定是不够的，所以来看看源码。\u003C/p>\n\u003Cp>看很多源码之后才知道Java的一些类的实现有多么优雅，我只能用优雅来形容。\u003C/p>\n\u003Ch1 id=\"源码解读\">源码解读\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 源码解读\" href=\"#源码解读\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>我主要是从两个方面来看这部分的源码，一个是创建，一个是添加。其实重点还是添加，只不过我在添加的时候看到了懒初始化的操作，所以回去看了一眼创建。\u003C/p>\n\u003Cp>添加操作关注的主要有两个部分，\u003C/p>\n\u003Col>\n\u003Cli>桶深过深转红黑树的操作\u003C/li>\n\u003Cli>达到负载因子标准之后的扩容操作\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"创建\">创建\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 创建\" href=\"#创建\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>下面这行代码，请问HashMap的数组是在哪一行代码处创建的呢？\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.HashMap;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> HashMapLearn\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        HashMap&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Integer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Integer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> hashMap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> HashMap&#x3C;>(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">16\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0.75F\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">      \thashMap.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>其实是在2处才创建。\u003C/p>\n\u003Cp>还是看源码，可以看到，通过构造函数初始化的时候，只是赋值了一些容量类的参数。\u003C/p>\n\u003Cp>也就是说，HashMap内部数组的创建，是懒式创建的。这点在我们后面看put源码的时候会看到。\u003C/p>\n\u003Cp>懒初始化可以延迟资源的分配直到真正需要的时候，从而提高资源利用率和程序启动速度。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/* ---------------- Public operations -------------- */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Constructs an empty {@code HashMap} with the specified initial\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * capacity and load factor.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">  initialCapacity\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> the initial capacity\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">  loadFactor\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      the load factor\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IllegalArgumentException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> if the initial capacity is negative\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *         or the load factor is nonpositive\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> HashMap\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> initialCapacity, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">float\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> loadFactor) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (initialCapacity \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IllegalArgumentException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Illegal initial capacity: \"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                           initialCapacity);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (initialCapacity \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> MAXIMUM_CAPACITY)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        initialCapacity \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> MAXIMUM_CAPACITY;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (loadFactor \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Float.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isNaN\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(loadFactor))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IllegalArgumentException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Illegal load factor: \"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                           loadFactor);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.loadFactor \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> loadFactor;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.threshold \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> tableSizeFor\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(initialCapacity);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>但是也未必是用了就是好的，其实懒初始化也会有别的可能的问题：\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>初次访问延迟\u003C/strong>：由于实际的资源分配被推迟到第一次使用时，这可能会导致初次访问时出现明显的延迟。\u003C/li>\n\u003Cli>\u003Cstrong>并发问题\u003C/strong>：在多线程环境下，如果没有适当的同步机制，懒创建可能导致竞态条件。比如两个线程几乎同时检测到资源未初始化并尝试同时初始化它，这可能会引起错误或不必要的重复工作。\u003C/li>\n\u003Cli>\u003Cstrong>复杂性增加\u003C/strong>：为了确保懒创建的安全性和效率，特别是在线程安全的场景下，可能需要引入额外的逻辑控制，如双重检查锁定模式(Double-Checked Locking)，增加了代码的复杂性和维护难度。\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"加入\">加入\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 加入\" href=\"#加入\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>put的源码其实也不是特别多，或者说其实HashMap的源码部分就不是特别多，我把我的思路及分析都写在了注释中了。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> V \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(K key, V value) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> putVal\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hash\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(key), key, value, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Implements Map.put and related methods.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> hash\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> hash for key\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> key\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> the key\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> value\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> the value to put\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> onlyIfAbsent\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> if true, don't change existing value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> evict\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> if false, the table is in creation mode.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@return\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> previous value, or null if none\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> V \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">putVal\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hash, K key, V value, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">boolean\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> onlyIfAbsent,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">               boolean\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> evict) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>[] tab; Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> p; \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n, i;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//太优雅了，懒汉创建，但是如果不加锁的话可能会出现竞争问题\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((tab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> table) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tab.length) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (tab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> resize\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()).length;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//如果桶的位置为空，直接就加入了\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((p \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tab[i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hash]) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        tab[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> newNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(hash, key, value, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> e; K k;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (p.hash \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hash \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            ((k \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p.key) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">equals\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(k))))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//如果不是链表的存储方式而是红黑树，那就得用树的插入方式\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (p \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> TreeNode)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((TreeNode\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)p).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">putTreeVal\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, tab, hash, key, value);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//否则就寻找链表的最后一个节点或者对应的等key节点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> binCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; ; \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">binCount) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">              \t//如果找遍了全部的桶都没找到，就创建一个新节点加在最后\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p.next) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    p.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> newNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(hash, key, value, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                  \t//如果桶深度等于8，同时还需要转成红黑树\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (binCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> TREEIFY_THRESHOLD \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// -1 for 1st\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                        treeifyBin\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tab, hash);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (e.hash \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hash \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    ((k \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e.key) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">equals\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(k))))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                p \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//找到了对应的key\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) { \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// existing mapping for key\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            V oldValue \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e.value;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">onlyIfAbsent \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldValue \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                e.value \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">            afterNodeAccess\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldValue;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//没找到对应的key，在上面加了Node，同时要修改modCount\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    ++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">modCount;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//size超过阈值，就要扩容\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">size \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> threshold)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">        resize\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">    afterNodeInsertion\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(evict);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>下面我们先看看扩容吧，其实转红黑树的代码我未必能看懂，所以我还是决定先看看扩容。\u003C/p>\n\u003Ch2 id=\"扩容\">扩容\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 扩容\" href=\"#扩容\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Initializes or doubles table size.  If null, allocates in\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * accord with initial capacity target held in field threshold.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Otherwise, because we are using power-of-two expansion, the\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * elements from each bin must either stay at same index, or move\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * with a power of two offset in the new table.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@return\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> the table\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Node\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">resize\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>[] oldTab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> table;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldCap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (oldTab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldTab.length;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldThr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> threshold;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> newCap, newThr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (oldCap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//如果扩容的时候，数组的长度已经大于等于最大容量了，就直接把阈值放飞了\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (oldCap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> MAXIMUM_CAPACITY) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            threshold \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Integer.MAX_VALUE;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldTab;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//双倍扩容的情况\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((newCap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldCap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> MAXIMUM_CAPACITY \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                 oldCap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> DEFAULT_INITIAL_CAPACITY)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            newThr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldThr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// double threshold\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//初始化定容量的情况\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (oldThr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// initial capacity was placed in threshold\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        newCap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldThr;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {               \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// zero initial threshold signifies using defaults\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        newCap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> DEFAULT_INITIAL_CAPACITY;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        newThr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)(DEFAULT_LOAD_FACTOR \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> DEFAULT_INITIAL_CAPACITY);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//定义新的阈值\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (newThr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        float\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ft \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">float\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)newCap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> loadFactor;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        newThr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (newCap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> MAXIMUM_CAPACITY \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ft \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">float\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)MAXIMUM_CAPACITY \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                  (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)ft \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Integer.MAX_VALUE);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    threshold \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> newThr;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SuppressWarnings\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">({\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"rawtypes\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"unchecked\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>[] newTab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (Node\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[])\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> Node\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[newCap];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//直接将原表地址替换为新表地址\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    table \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> newTab;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (oldTab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//开始迁移\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; j \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldCap; \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">j) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldTab[j]) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">              \t//在第一步的时候就把原数组的对象引用释放掉\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">              \t//这部分操作其实是存疑的，这么做一部分原因是为了减少原数组引用对对象带来的影响\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">              \t//这么做是为了支持多线程，但是这样反而会在多线程同时扩容数组的时候带来数据的丢失\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                oldTab[j] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (e.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                  \t//如果是单个节点，直接迁移，因为是高位扩容，所以直接放不会冲突\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    newTab[e.hash \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (newCap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> TreeNode)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                  \t//关于红黑树的拆分放桶的方法，这里就不多扩展了，后面补充在附录里吧\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    ((TreeNode\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)e).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, newTab, j, oldCap);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// preserve order\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                  \t//然后就是按照链表的顺序开始\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> loHead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, loTail \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> hiHead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, hiTail \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    do\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                      \t//然后这个时候就是进行while循环的处理\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                      \t//看这个节点是不是留在原桶,因为需要维护两个桶的尾\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((e.hash \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldCap) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (loTail \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                loHead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                            else\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                loTail.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                            loTail \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                      \t//如果不在原桶就要放到高位桶里\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                        else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (hiTail \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                hiHead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                            else\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                hiTail.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                            hiTail \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> next) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                  \t//原桶的放到原桶位置\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (loTail \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        loTail.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        newTab[j] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> loHead;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                  \t//高位桶的放到高位\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (hiTail \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        hiTail.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        newTab[j \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldCap] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hiHead;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> newTab;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>扩容这部分其实就些内容，其实难点还是在红黑树的那一块，但是我比较懒散没有详细去看。\u003C/p>\n\u003Ch2 id=\"桶过深转红黑树\">桶过深转红黑树\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 桶过深转红黑树\" href=\"#桶过深转红黑树\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>主要是通过这一个方法来实现的\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> treeifyBin\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Node\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] tab, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hash) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n, index;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    // 如果数组容量小于 MIN_TREEIFY_CAPACITY，则优先扩容，这个值是64\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (tab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tab.length) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> MIN_TREEIFY_CAPACITY)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">        resize\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tab[index \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hash]) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 将链表转换为红黑树\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        TreeNode&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> hd \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, tl \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        do\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            TreeNode&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> p \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> replacementTreeNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(e, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//如果是第一个节点，那么就是头节点，把p给hd\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (tl \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                hd \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//如果不是，就是构建前后关系\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                p.prev \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tl;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                tl.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            tl \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e.next) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//然后就是调用这个转红黑树的方法\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((tab[index] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hd) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            hd.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">treeify\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tab);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>这是最核心的部分了，也就是红黑树的构建。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Forms tree of the nodes linked from this node.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> treeify\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Node\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] tab) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    TreeNode&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> root \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (TreeNode&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> x \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, next; x \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; x \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> next) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//遍历节点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (TreeNode\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)x.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//首先是清空左右，为了防止遗留问题\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        x.left \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x.right \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//如果是第一个节点，就把它设置为根节点，无父亲节点，非红节点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (root \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            x.parent \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            x.red \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            root \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//否则就按照key的hash进行红黑树构建了\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            K k \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x.key;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> h \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x.hash;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//用于存储键的比较类（如果键实现了 Comparable 接口）。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Class&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> kc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//从根节点开始遍历\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (TreeNode&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> p \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> root;;) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">              \t//dir表示当前节点应该插入到左子树（-1）还是右子树（1）。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dir, ph;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                K pk \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p.key;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">              \t//哈希值比较：\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //如果当前节点的哈希值小于 p 的哈希值，则插入到左子树。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //如果当前节点的哈希值大于 p 的哈希值，则插入到右子树。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((ph \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p.hash) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> h)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    dir \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (ph \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> h)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    dir \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">              \t//如果哈希值相等，则进一步比较键值：\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //如果键实现了 Comparable 接口，则使用 Comparable 进行比较。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //如果键未实现 Comparable 或比较结果相等，则调用 tieBreakOrder 方法进行仲裁。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((kc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        (kc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> comparableClassFor\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(k)) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        (dir \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> compareComparables\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(kc, k, pk)) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    dir \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> tieBreakOrder\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(k, pk);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">\t\t\t\t\t\t\t\t//找到对应的插入位置\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                TreeNode&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> xp \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((p \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (dir \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p.left \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p.right) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    x.parent \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> xp;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (dir \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        xp.left \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    else\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        xp.right \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> x;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                  \t//平衡红黑树\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    root \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> balanceInsertion\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(root, x);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//绑定头节点到数组上\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">    moveRootToFront\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tab, root);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>平衡红黑树部分的代码感觉有点不太想看说实话，过段时间再看吧。\u003C/p>\n\u003Ch1 id=\"concurrenthashmap\">ConcurrentHashMap\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to ConcurrentHashMap\" href=\"#concurrenthashmap\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>其实我们可以关注到，HashMap几乎没有实现对多线程的关注，所以他是线程不安全的，那么ConcurrentHashMap又是如何实现线程的安全呢？其实这个比较容易被问到的问题，几乎所有的八股都会说什么分段锁啊，CAS操作啊，但是具体的源码实现是什么样子呢？很少有人关注，所以我这里来看一眼吧。\u003C/p>\n\u003Ch2 id=\"构造方法\">构造方法\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 构造方法\" href=\"#构造方法\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>首先还是看看构造方法\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Creates a new, empty map with an initial table size based on\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * the given number of elements ({@code initialCapacity}), initial\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * table density ({@code loadFactor}), and number of concurrently\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * updating threads ({@code concurrencyLevel}).\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> initialCapacity\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> the initial capacity. The implementation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * performs internal sizing to accommodate this many elements,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * given the specified load factor.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> loadFactor\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> the load factor (table density) for\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * establishing the initial table size\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> concurrencyLevel\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> the estimated number of concurrently\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * updating threads. The implementation may use this value as\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * a sizing hint.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IllegalArgumentException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> if the initial capacity is\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * negative or the load factor or concurrencyLevel are\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * nonpositive\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ConcurrentHashMap\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> initialCapacity,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                         float\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> loadFactor, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> concurrencyLevel) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(loadFactor \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0.0f\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> initialCapacity \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> concurrencyLevel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IllegalArgumentException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//初始容量不能小于并发级别\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (initialCapacity \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> concurrencyLevel)   \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// Use at least as many bins\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        initialCapacity \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> concurrencyLevel;   \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// as estimated threads\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    long\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">long\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1.0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">long\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)initialCapacity \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">/\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> loadFactor);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (size \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">long\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)MAXIMUM_CAPACITY) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        MAXIMUM_CAPACITY \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> tableSizeFor\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)size);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.sizeCtl \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cap;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>其实没有太多的修改，主要是增加了并发级别，要求了初始容量不能小于并发级别，其余的与HashMap一致\u003C/p>\n\u003Cp>接下来就看看插入操作到底是怎么实现保证一致性的\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Maps the specified key to the specified value in this table.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Neither the key nor the value can be null.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * &#x3C;p>The value can be retrieved by calling the {@code get} method\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * with a key that is equal to the original key.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> key\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> key with which the specified value is to be associated\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> value\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> value to be associated with the specified key\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@return\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> the previous value associated with {@code key}, or\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *         {@code null} if there was no mapping for {@code key}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NullPointerException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> if the specified key or value is null\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> V \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(K key, V value) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> putVal\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(key, value, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/** Implementation for put and putIfAbsent */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> V \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">putVal\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(K key, V value, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">boolean\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> onlyIfAbsent) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NullPointerException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//spread 方法：\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //对键的哈希值进行重新计算，以减少哈希冲突。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //公式为：(h ^ (h >>> 16)) &#x26; HASH_BITS，其中 HASH_BITS 是一个掩码。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hash \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> spread\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hashCode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> binCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>[] tab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> table;;) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> f; \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n, i, fh; K fk; V fv;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//如果tab为空，初始化tab，为了阅读的连贯性，我们后面再看这个方法\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (tab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tab.length) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            tab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> initTable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//如果为空桶，使用casTabAt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((f \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> tabAt\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tab, i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hash)) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">casTabAt\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tab, i, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>(hash, key, value)))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;                   \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// no lock when adding to empty bin\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//这个MOVED其实是个特殊标记，表示当前正在进行扩容操作\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//static final int MOVED     = -1; // hash for forwarding nodes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((fh \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> f.hash) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> MOVED)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//这个方法还是挺核心的，主要作用是检测当前是否正在进行扩容操作，并参与协助完成扩容任务。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//如果发现某个桶（bucket）已经被标记为正在迁移（通过 ForwardingNode 标记），则该方法会尝试参与到迁移过程中。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">\t\t\t\t\t\t//它的主要目标是加速扩容过程，通过允许多个线程并行地完成数据迁移。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            tab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> helpTransfer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tab, f);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (onlyIfAbsent \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// check first node without acquiring lock\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                 &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> fh \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hash\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                 &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((fk \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> f.key) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (fk \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">equals\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(fk)))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                 &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (fv \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> f.val) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> fv;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//如果对应问题都没有出现，那就对f枷锁，然后把节点放入到对应的位置中去，这里的思路其实与HashMap一致\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            V oldVal \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            synchronized\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (f) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">tabAt\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tab, i) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> f) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (fh \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        binCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> f;; \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">binCount) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                            K ek;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (e.hash \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hash \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                ((ek \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e.key) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                 (ek \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">equals\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ek)))) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                oldVal \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e.val;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">onlyIfAbsent)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                    e.val \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                                break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                            Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> pred \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e.next) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                pred.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>(hash, key, value);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                                break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (f \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> TreeBin) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> p;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        binCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((p \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((TreeBin\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)f).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">putTreeVal\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(hash, key,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                                       value)) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                            oldVal \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> p.val;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">onlyIfAbsent)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                p.val \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (f \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">instanceof\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ReservationNode)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IllegalStateException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Recursive update\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (binCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (binCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> TREEIFY_THRESHOLD)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    treeifyBin\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tab, i);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (oldVal \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldVal;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">    addCount\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1L\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, binCount);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>然后我们最后再看一眼InitTable\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Initializes table, using the size recorded in sizeCtl.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Node\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">initTable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>[] tab; \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sc;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//for循环，组钥匙cas操作\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((tab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> table) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tab.length \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((sc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sizeCtl) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//如果sizeCtl&#x3C;0，表示有其他值在init，就把时间片让出去\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Thread.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">yield\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// lost initialization race; just spin\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//否则就开始CAS操作，设置sizeCtl为-1，表示自己要初始化了\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//初始化完成之后就break即可\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (U.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">compareAndSetInt\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, SIZECTL, sc, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">              \t//但是在CAS成功之后，会判断table是不是为空，如果为空才执行初始化，否则就直接进入finally段，单后break了。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">              \t//也就是CAS自旋成功之后才会break这个循环\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((tab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> table) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tab.length \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (sc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> DEFAULT_CAPACITY;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SuppressWarnings\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"unchecked\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>[] nt \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (Node\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[])\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>[n];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    table \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tab \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nt;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    sc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>>>\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">finally\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                sizeCtl \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sc;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tab;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"完结\">完结\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 完结\" href=\"#完结\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>基本完结啦，后面如果我有时间的话会认真看看红黑树部分的代码的，但是现在可能对我来说留给我的时间确实不多了\u003C/p>\n\u003Ch1 id=\"附录红黑树的split注释和代码均来自通义千问\">附录，红黑树的split，注释和代码均来自通义千问\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 附录，红黑树的split，注释和代码均来自通义千问\" href=\"#附录红黑树的split注释和代码均来自通义千问\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>以下是 \u003Ccode>TreeNode.split\u003C/code> 方法的核心逻辑（简化版）：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> split\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(HashMap\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> map, Node\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] tab, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> index, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bit) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    TreeNode&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> b \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    // loHead 和 loTail 表示保留在原桶的节点链\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    TreeNode&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> loHead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, loTail \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    // hiHead 和 hiTail 表示需要移动到新桶的节点链\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    TreeNode&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> hiHead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, hiTail \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> lc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, hc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    // 遍历红黑树的所有节点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (TreeNode&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b, next; e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> next) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (TreeNode\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)e.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        e.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 判断节点属于哪个桶\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((e.hash \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bit) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((e.prev \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> loTail) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                loHead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            else\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                loTail.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            loTail \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            ++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">lc;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((e.prev \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hiTail) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                hiHead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            else\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                hiTail.next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            hiTail \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            ++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">hc;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    // 将低桶（原桶）的节点放入新数组\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (loHead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (lc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> UNTREEIFY_THRESHOLD)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            tab[index] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> loHead.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">untreeify\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(map);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            tab[index] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> loHead;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (hiHead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 如果高桶也有节点，则需要保持红黑树结构\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                loHead.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">treeify\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tab);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    // 将高桶（新桶）的节点放入新数组\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (hiHead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (hc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> UNTREEIFY_THRESHOLD)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            tab[index \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bit] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hiHead.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">untreeify\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(map);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            tab[index \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bit] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> hiHead;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (loHead \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 如果低桶也有节点，则需要保持红黑树结构\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                hiHead.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">treeify\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(tab);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>",{"headings":331,"localImagePaths":353,"remoteImagePaths":354,"frontmatter":355,"imagePaths":361},[332,333,335,337,339,341,343,346,348,350],{"depth":25,"slug":236,"text":236},{"depth":25,"slug":334,"text":334},"源码解读",{"depth":118,"slug":336,"text":336},"创建",{"depth":118,"slug":338,"text":338},"加入",{"depth":118,"slug":340,"text":340},"扩容",{"depth":118,"slug":342,"text":342},"桶过深转红黑树",{"depth":25,"slug":344,"text":345},"concurrenthashmap","ConcurrentHashMap",{"depth":118,"slug":347,"text":347},"构造方法",{"depth":25,"slug":349,"text":349},"完结",{"depth":25,"slug":351,"text":352},"附录红黑树的split注释和代码均来自通义千问","附录，红黑树的split，注释和代码均来自通义千问",[],[],{"title":319,"tags":356,"categories":357,"mathjax":105,"sticky":118,"swiper_index":118,"description":321,"abbrlink":324,"published":359,"minutes":360},[101,323],[358],"源码阅读",["Date","2025-04-16T14:52:44.000Z"],21,[],"origin/2025-03-21-螺旋矩阵汇总",{"id":362,"data":364,"body":370,"filePath":371,"assetImports":372,"digest":380,"rendered":381},{"title":365,"published":366,"description":367,"tags":368,"draft":103,"pin":104,"toc":105,"lang":106,"abbrlink":369},"螺旋矩阵汇总",["Date","2025-03-21T19:15:48.000Z"],"如果觉得螺旋矩阵写的不够优雅可以看看这篇，虽然我也写得很一般。",[187,101],"spiral-matrix","# 写在前面\n\n其实螺旋矩阵类的题目按理来说应该是简单的，因为是纯粹的模拟，只不大家定义方向的方式各有不同，以及方向的转换以及判断不够灵活，所以我们就简单试试！\n\n# 螺旋矩阵\n\n[LeetCode原题链接](https://leetcode.cn/problems/spiral-matrix/)\n\n## 题目描述\n\n给你一个 `m` 行 `n` 列的矩阵 `matrix` ，请按照 **顺时针螺旋顺序** ，返回矩阵中的所有元素。\n\n**示例1**\n\n![示例1](https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg)\n\n```\n输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n输出：[1,2,3,6,9,8,7,4,5]\n```\n\n**示例 2：**\n\n![示例2](https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg)\n\n```\n输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n输出：[1,2,3,4,8,12,11,10,9,5,6,7]\n```\n\n\n\n**提示：**\n\n- `m == matrix.length`\n- `n == matrix[i].length`\n- `1 \u003C= m, n \u003C= 10`\n- `-100 \u003C= matrix[i][j] \u003C= 100`\n\n\n\n## 解读\n\n其实这是很经典的顺时针螺旋矩阵了，只需要定义好方向，判断好数组边界以及已访问边界，就可以很顺利解决了。所以接下来我们简单看看实现。\n\n最重要的事情其实是定义好方向，然后根据方向进行走步。\n\n学会优雅的第一步，就是勇敢的派出一个探子，让它去尝试，如果它失败了我们就换方向走一步，否则就原方向走一步\n\n```java\nclass Solution {\n    public List\u003CInteger> spiralOrder(int[][] matrix) {\n        List\u003CInteger> res = new ArrayList\u003C>();\n        int n = matrix.length;\n        int m= matrix[0].length;\n        //此处定义方向，按序分别为右、下、左、上，也就是我们螺旋的顺序\n        int[][] direction = {{0,1},{1,0},{0,-1},{-1,0}};\n        //初始化\n        int dir_key=0;\n        int i=0,j=0;\n        for(int c = 0; c \u003C n * m; c++){\n            res.add(matrix[i][j]);\n            //因为有范围为-100，100，标记已经访问过就可以用101\n            matrix[i][j]=101;\n            //别管碰不碰壁，先派个探子去送死,如果探子没事我们就坚持方向，如果有事我们就换方向\n            int i_try = i + direction[dir_key][0];\n            int j_try = j + direction[dir_key][1];\n            if(i_try\u003C0 || i_try>=n || j_try\u003C0 || j_try>=m || matrix[i_try][j_try]>100){\n                dir_key = (dir_key+1)%4;\n            }\n            i = i+direction[dir_key][0];\n            j = j+direction[dir_key][1];\n        }\n        return res;\n    }\n}\n```\n\n# 螺旋矩阵II\n\n[LeetCode原题链接](https://leetcode.cn/problems/spiral-matrix-ii/)\n\n## 题目描述\n\n给你一个正整数 `n` ，生成一个包含 `1` 到 `n2` 所有元素，且元素按顺时针顺序螺旋排列的 `n x n` 正方形矩阵 `matrix` 。\n\n**示例 1：**\n\n![示例1](https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg)\n\n```\n输入：n = 3\n输出：[[1,2,3],[8,9,4],[7,6,5]]\n```\n\n**示例 2：**\n\n```\n输入：n = 1\n输出：[[1]]\n```\n\n**提示：**\n\n- `1 \u003C= n \u003C= 20`\n\n## 解读\n\n其实本质上和上题是同样的思路，只不过一个是写入，一个是读取，不多赘述\n\n```java\nclass Solution {\n    public int[][] generateMatrix(int n) {\n        int[][] res = new int[n][n];\n        int[][] way = {{0,1},{1,0},{0,-1},{-1,0}};\n        int c=0,l=0;\n        int way_key = 0;\n        for(int i=1;i\u003C=n*n;i++){\n            res[c][l]=i;\n            int nextc = c + way[way_key][0];\n            int nextl = l + way[way_key][1];\n            if (nextc \u003C 0 || nextc >= n || nextl \u003C 0 || nextl >= n || res[nextc][nextl] != 0) {\n                way_key = (way_key + 1) % 4;\n            }\n            c = c+way[way_key][0];\n            l = l+way[way_key][1];\n        }\n        return res;\n    }\n}\n```\n\n\n\n# 螺旋矩阵III\n\n这题还有有一点令人难受的，因为需要剪枝才能让效率稍微好一些，但是我剪的也不是非常好\n\n[LeetCode原题链接](https://leetcode.cn/problems/spiral-matrix-iii/)\n\n## 题目描述\n\n在 `rows x cols` 的网格上，你从单元格 `(rStart, cStart)` 面朝东面开始。网格的西北角位于第一行第一列，网格的东南角位于最后一行最后一列。\n\n你需要以顺时针按螺旋状行走，访问此网格中的每个位置。每当移动到网格的边界之外时，需要继续在网格之外行走（但稍后可能会返回到网格边界）。\n\n最终，我们到过网格的所有 `rows x cols` 个空间。\n\n按照访问顺序返回表示网格位置的坐标列表。\n\n**示例 1：**\n\n![示例1](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_1.png)\n\n```\n输入：rows = 1, cols = 4, rStart = 0, cStart = 0\n输出：[[0,0],[0,1],[0,2],[0,3]]\n```\n\n**示例 2：**\n\n![示例2](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_2.png)\n\n```\n输入：rows = 5, cols = 6, rStart = 1, cStart = 4\n输出：[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\n```\n\n**提示：**\n\n- `1 \u003C= rows, cols \u003C= 100`\n- `0 \u003C= rStart \u003C rows`\n- `0 \u003C= cStart \u003C cols`\n\n## 解读\n\n其实还是老模板，只不过这次不会碰壁，是由内而外，所以需要自己判断螺旋什么时候需要走多少步。\n\n其实我们可以发现，只要方向由上下变为左右的时候，就需要把螺旋的边长增加1，这点需要自己品味，为什么我设置的初始方向是向上，初始step是0，其实都是有一点意思的。\n\n```java\nclass Solution {\n    public int[][] spiralMatrixIII(int rows, int cols, int rStart, int cStart) {\n        int r_n=rStart;\n        int c_n=cStart;\n        int step =0;\n        int[][] direction = {{0,1},{1,0},{0,-1},{-1,0}};\n        int dir_key = 3;\n        int count=1;\n        int[][] res=new int[rows*cols][2];\n        res[0][0]=r_n;\n        res[0][1]=c_n;\n        while(count\u003Crows*cols){\n          \t//方向转换\n            if(dir_key%2==1){\n                step+=1;\n            }\n            dir_key = (dir_key+1)%4;\n          \t//\t剪枝，如果方向错了，就不用一步一步走了，反正都不会加进去，直接一步走到底\n            if((r_n\u003C0&&direction[dir_key][0]\u003C=0)||\n                (c_n\u003C0&&direction[dir_key][1]\u003C=0)||\n                (r_n>=rows&&direction[dir_key][0]>=0)||\n                (c_n>=cols&&direction[dir_key][1]>=0)){\n                r_n=r_n+direction[dir_key][0]*step;\n                c_n=c_n+direction[dir_key][1]*step;\n                continue;\n            }\n          \t// 走步\n            for(int i=0;i\u003Cstep;i++){\n                r_n=r_n+direction[dir_key][0];\n                c_n=c_n+direction[dir_key][1];\n                if(r_n>=0&&r_n\u003Crows&&c_n>=0&&c_n\u003Ccols){\n                    res[count][0]=r_n;\n                    res[count][1]=c_n;\n                    count++;\n                }\n            }\n        }\n        return res;\n    }\n}\n```\n\n# 螺旋矩阵IV\n\n[LeetCode原题链接](https://leetcode.cn/problems/spiral-matrix-iv/)\n\n## 题目描述\n\n给你两个整数：`m` 和 `n` ，表示矩阵的维数。\n\n另给你一个整数链表的头节点 `head` 。\n\n请你生成一个大小为 `m x n` 的螺旋矩阵，矩阵包含链表中的所有整数。链表中的整数从矩阵 **左上角** 开始、**顺时针** 按 **螺旋** 顺序填充。如果还存在剩余的空格，则用 `-1` 填充。\n\n返回生成的矩阵。\n\n**示例 1：**\n\n![img](https://assets.leetcode.com/uploads/2022/05/09/ex1new.jpg)\n\n```\n输入：m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]\n输出：[[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]\n解释：上图展示了链表中的整数在矩阵中是如何排布的。\n注意，矩阵中剩下的空格用 -1 填充。\n```\n\n**示例 2：**\n\n![img](https://assets.leetcode.com/uploads/2022/05/11/ex2.jpg)\n\n```\n输入：m = 1, n = 4, head = [0,1,2]\n输出：[[0,1,2,-1]]\n解释：上图展示了链表中的整数在矩阵中是如何从左到右排布的。 \n注意，矩阵中剩下的空格用 -1 填充。\n```\n\n**提示：**\n\n- `1 \u003C= m, n \u003C= 105`\n- `1 \u003C= m * n \u003C= 105`\n- 链表中节点数目在范围 `[1, m * n]` 内\n- `0 \u003C= Node.val \u003C= 1000`\n\n## 解读\n\n这题不多说啊，直接照搬II的代码就可以了。\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public int[][] spiralMatrix(int m, int n, ListNode head) {\n        int[][] res = new int[m][n];\n        for(int i=0;i\u003Cm;i++){\n            Arrays.fill(res[i],-1);\n        }\n        //此处定义方向，按序分别为右、下、左、上，也就是我们螺旋的顺序\n        int[][] direction = {{0,1},{1,0},{0,-1},{-1,0}};\n        //初始化\n        int dir_key=0;\n        int i=0,j=0;\n        ListNode pre=head;\n        while(pre!=null){\n            res[i][j] = pre.val;\n            pre=pre.next;\n            //别管碰不碰壁，先派个探子去送死,如果探子没事我们就坚持方向，如果有事我们就换方向\n            int i_try = i + direction[dir_key][0];\n            int j_try = j + direction[dir_key][1];\n            if(i_try\u003C0 || i_try>=m || j_try\u003C0 || j_try>=n || res[i_try][j_try]!=-1){\n                dir_key = (dir_key+1)%4;\n            }\n            i = i+direction[dir_key][0];\n            j = j+direction[dir_key][1];\n        }\n        return res;\n    }\n}\n```\n\n## 关于边界处理\n\n其实I和IV都取巧了，就是在判断有没有达到边界的时候，用了数值的范围。\n\n所以其实墙壁也需要交给我们管理的，所以对于IV的代码，我们也可以这么写。\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public int[][] spiralMatrix(int m, int n, ListNode head) {\n        int[][] res = new int[m][n];\n        for(int i=0;i\u003Cm;i++){\n            Arrays.fill(res[i],-1);\n        }\n        //此处定义方向，按序分别为右、下、左、上，也就是我们螺旋的顺序\n        int[][] direction = {{0,1},{1,0},{0,-1},{-1,0}};\n        //初始化\n        int dir_key=0;\n        int i=0,j=0;\n        ListNode pre=head;\n      \t//初始化边界\n        int top=0,left=0,bottom=m-1,right=n-1;\n        while(pre!=null){\n            res[i][j] = pre.val;\n            pre=pre.next;\n            //别管碰不碰壁，先派个探子去送死,如果探子没事我们就坚持方向，如果有事我们就换方向\n            int i_try = i + direction[dir_key][0];\n            int j_try = j + direction[dir_key][1];\n            if(i_try\u003Ctop || i_try>bottom || j_try\u003Cleft || j_try>right){\n                //碰壁就缩小墙壁\n                dir_key = (dir_key+1)%4;\n                if(dir_key==0) left+=1;\n                if(dir_key==1) top+=1;\n                if(dir_key==2) right-=1;\n                if(dir_key==3) bottom-=1;\n            }\n            i = i+direction[dir_key][0];\n            j = j+direction[dir_key][1];\n        }\n        return res;\n    }\n}\n```","src/content/posts/origin/2025-03-21-螺旋矩阵汇总.md",[373,374,375,376,377,378,379],"https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg","https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg","https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg","https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_1.png","https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_2.png","https://assets.leetcode.com/uploads/2022/05/09/ex1new.jpg","https://assets.leetcode.com/uploads/2022/05/11/ex2.jpg","a9da605c18f98bf4",{"html":382,"metadata":383},"\u003Ch1 id=\"写在前面\">写在前面\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 写在前面\" href=\"#写在前面\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>其实螺旋矩阵类的题目按理来说应该是简单的，因为是纯粹的模拟，只不大家定义方向的方式各有不同，以及方向的转换以及判断不够灵活，所以我们就简单试试！\u003C/p>\n\u003Ch1 id=\"螺旋矩阵\">螺旋矩阵\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 螺旋矩阵\" href=\"#螺旋矩阵\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/spiral-matrix/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">LeetCode原题链接\u003C/a>\u003C/p>\n\u003Ch2 id=\"题目描述\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>给你一个 \u003Ccode>m\u003C/code> 行 \u003Ccode>n\u003C/code> 列的矩阵 \u003Ccode>matrix\u003C/code> ，请按照 \u003Cstrong>顺时针螺旋顺序\u003C/strong> ，返回矩阵中的所有元素。\u003C/p>\n\u003Cp>\u003Cstrong>示例1\u003C/strong>\u003C/p>\n\u003Cfigure>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;inferSize&#x22;:true,&#x22;src&#x22;:&#x22;https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg&#x22;,&#x22;alt&#x22;:&#x22;示例1&#x22;,&#x22;index&#x22;:0}\">\u003Cfigcaption>示例1\u003C/figcaption>\u003C/figure>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[1,2,3,6,9,8,7,4,5]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cfigure>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;inferSize&#x22;:true,&#x22;src&#x22;:&#x22;https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg&#x22;,&#x22;alt&#x22;:&#x22;示例2&#x22;,&#x22;index&#x22;:0}\">\u003Cfigcaption>示例2\u003C/figcaption>\u003C/figure>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[1,2,3,4,8,12,11,10,9,5,6,7]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>m == matrix.length\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>n == matrix[i].length\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>1 &#x3C;= m, n &#x3C;= 10\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>-100 &#x3C;= matrix[i][j] &#x3C;= 100\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"解读\">解读\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 解读\" href=\"#解读\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>其实这是很经典的顺时针螺旋矩阵了，只需要定义好方向，判断好数组边界以及已访问边界，就可以很顺利解决了。所以接下来我们简单看看实现。\u003C/p>\n\u003Cp>最重要的事情其实是定义好方向，然后根据方向进行走步。\u003C/p>\n\u003Cp>学会优雅的第一步，就是勇敢的派出一个探子，让它去尝试，如果它失败了我们就换方向走一步，否则就原方向走一步\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Solution\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> List&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Integer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">spiralOrder\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">matrix\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        List&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Integer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ArrayList&#x3C;>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> matrix.length;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> m\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> matrix[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">].length;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //此处定义方向，按序分别为右、下、左、上，也就是我们螺旋的顺序\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] direction \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //初始化\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dir_key\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,j\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> c \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; c \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> m; c\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            res.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(matrix[i][j]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //因为有范围为-100，100，标记已经访问过就可以用101\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            matrix[i][j]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">101\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //别管碰不碰壁，先派个探子去送死,如果探子没事我们就坚持方向，如果有事我们就换方向\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i_try \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j_try \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(i_try\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i_try\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j_try\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j_try\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">m \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> matrix[i_try][j_try]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                dir_key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (dir_key\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">%\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            j \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"螺旋矩阵ii\">螺旋矩阵II\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 螺旋矩阵II\" href=\"#螺旋矩阵ii\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/spiral-matrix-ii/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">LeetCode原题链接\u003C/a>\u003C/p>\n\u003Ch2 id=\"题目描述-1\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-1\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>给你一个正整数 \u003Ccode>n\u003C/code> ，生成一个包含 \u003Ccode>1\u003C/code> 到 \u003Ccode>n2\u003C/code> 所有元素，且元素按顺时针顺序螺旋排列的 \u003Ccode>n x n\u003C/code> 正方形矩阵 \u003Ccode>matrix\u003C/code> 。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cfigure>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;inferSize&#x22;:true,&#x22;src&#x22;:&#x22;https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg&#x22;,&#x22;alt&#x22;:&#x22;示例1&#x22;,&#x22;index&#x22;:0}\">\u003Cfigcaption>示例1\u003C/figcaption>\u003C/figure>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：n = 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[[1,2,3],[8,9,4],[7,6,5]]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：n = 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[[1]]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= n &#x3C;= 20\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"解读-1\">解读\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 解读\" href=\"#解读-1\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>其实本质上和上题是同样的思路，只不过一个是写入，一个是读取，不多赘述\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Solution\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">generateMatrix\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> n\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[n][n];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] way \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> c\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,l\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> way_key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            res[c][l]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">i;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nextc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> c \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> way[way_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nextl \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> way[way_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (nextc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nextc \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nextl \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nextl \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res[nextc][nextl] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                way_key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (way_key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">%\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            c \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> c\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">way[way_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            l \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> l\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">way[way_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"螺旋矩阵iii\">螺旋矩阵III\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 螺旋矩阵III\" href=\"#螺旋矩阵iii\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>这题还有有一点令人难受的，因为需要剪枝才能让效率稍微好一些，但是我剪的也不是非常好\u003C/p>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/spiral-matrix-iii/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">LeetCode原题链接\u003C/a>\u003C/p>\n\u003Ch2 id=\"题目描述-2\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-2\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>在 \u003Ccode>rows x cols\u003C/code> 的网格上，你从单元格 \u003Ccode>(rStart, cStart)\u003C/code> 面朝东面开始。网格的西北角位于第一行第一列，网格的东南角位于最后一行最后一列。\u003C/p>\n\u003Cp>你需要以顺时针按螺旋状行走，访问此网格中的每个位置。每当移动到网格的边界之外时，需要继续在网格之外行走（但稍后可能会返回到网格边界）。\u003C/p>\n\u003Cp>最终，我们到过网格的所有 \u003Ccode>rows x cols\u003C/code> 个空间。\u003C/p>\n\u003Cp>按照访问顺序返回表示网格位置的坐标列表。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cfigure>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;inferSize&#x22;:true,&#x22;src&#x22;:&#x22;https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_1.png&#x22;,&#x22;alt&#x22;:&#x22;示例1&#x22;,&#x22;index&#x22;:0}\">\u003Cfigcaption>示例1\u003C/figcaption>\u003C/figure>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：rows = 1, cols = 4, rStart = 0, cStart = 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[[0,0],[0,1],[0,2],[0,3]]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cfigure>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;inferSize&#x22;:true,&#x22;src&#x22;:&#x22;https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_2.png&#x22;,&#x22;alt&#x22;:&#x22;示例2&#x22;,&#x22;index&#x22;:0}\">\u003Cfigcaption>示例2\u003C/figcaption>\u003C/figure>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：rows = 5, cols = 6, rStart = 1, cStart = 4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= rows, cols &#x3C;= 100\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= rStart &#x3C; rows\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= cStart &#x3C; cols\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"解读-2\">解读\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 解读\" href=\"#解读-2\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>其实还是老模板，只不过这次不会碰壁，是由内而外，所以需要自己判断螺旋什么时候需要走多少步。\u003C/p>\n\u003Cp>其实我们可以发现，只要方向由上下变为左右的时候，就需要把螺旋的边长增加1，这点需要自己品味，为什么我设置的初始方向是向上，初始step是0，其实都是有一点意思的。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Solution\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">spiralMatrixIII\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> rows\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> cols\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> rStart\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> cStart\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> r_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">rStart;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> c_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">cStart;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> step \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] direction \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dir_key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] res\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=new\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[rows\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">cols][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        res[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">r_n;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        res[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">c_n;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">rows\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">cols){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//方向转换\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(dir_key\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">%\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                step\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            dir_key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (dir_key\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">%\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//\t剪枝，如果方向错了，就不用一步一步走了，反正都不会加进去，直接一步走到底\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">((r_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                (c_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                (r_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">rows\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                (c_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">cols\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                r_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">r_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">step;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                c_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">c_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">step;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                continue\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t// 走步\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">step;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                r_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">r_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                c_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">c_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(r_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">r_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">rows\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">c_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">c_n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">cols){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    res[count][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">r_n;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    res[count][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">c_n;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"螺旋矩阵iv\">螺旋矩阵IV\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 螺旋矩阵IV\" href=\"#螺旋矩阵iv\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/spiral-matrix-iv/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">LeetCode原题链接\u003C/a>\u003C/p>\n\u003Ch2 id=\"题目描述-3\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-3\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>给你两个整数：\u003Ccode>m\u003C/code> 和 \u003Ccode>n\u003C/code> ，表示矩阵的维数。\u003C/p>\n\u003Cp>另给你一个整数链表的头节点 \u003Ccode>head\u003C/code> 。\u003C/p>\n\u003Cp>请你生成一个大小为 \u003Ccode>m x n\u003C/code> 的螺旋矩阵，矩阵包含链表中的所有整数。链表中的整数从矩阵 \u003Cstrong>左上角\u003C/strong> 开始、\u003Cstrong>顺时针\u003C/strong> 按 \u003Cstrong>螺旋\u003C/strong> 顺序填充。如果还存在剩余的空格，则用 \u003Ccode>-1\u003C/code> 填充。\u003C/p>\n\u003Cp>返回生成的矩阵。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cfigure>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;inferSize&#x22;:true,&#x22;src&#x22;:&#x22;https://assets.leetcode.com/uploads/2022/05/09/ex1new.jpg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003Cfigcaption>img\u003C/figcaption>\u003C/figure>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：上图展示了链表中的整数在矩阵中是如何排布的。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>注意，矩阵中剩下的空格用 -1 填充。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cfigure>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;inferSize&#x22;:true,&#x22;src&#x22;:&#x22;https://assets.leetcode.com/uploads/2022/05/11/ex2.jpg&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003Cfigcaption>img\u003C/figcaption>\u003C/figure>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：m = 1, n = 4, head = [0,1,2]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[[0,1,2,-1]]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：上图展示了链表中的整数在矩阵中是如何从左到右排布的。 \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>注意，矩阵中剩下的空格用 -1 填充。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= m, n &#x3C;= 105\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>1 &#x3C;= m * n &#x3C;= 105\u003C/code>\u003C/li>\n\u003Cli>链表中节点数目在范围 \u003Ccode>[1, m * n]\u003C/code> 内\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= Node.val &#x3C;= 1000\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"解读-3\">解读\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 解读\" href=\"#解读-3\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>这题不多说啊，直接照搬II的代码就可以了。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Definition for singly-linked list.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * public class ListNode {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *     int val;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *     ListNode next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *     ListNode() {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *     ListNode(int val) { this.val = val; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Solution\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">spiralMatrix\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> m\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> n\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, ListNode \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">head\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[m][n];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">m;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Arrays.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">fill\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(res[i],\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //此处定义方向，按序分别为右、下、左、上，也就是我们螺旋的顺序\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] direction \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //初始化\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dir_key\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,j\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ListNode pre\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(pre\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            res[i][j] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre.val;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            pre\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">pre.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //别管碰不碰壁，先派个探子去送死,如果探子没事我们就坚持方向，如果有事我们就换方向\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i_try \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j_try \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(i_try\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i_try\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">m \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j_try\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> ||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j_try\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res[i_try][j_try]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                dir_key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (dir_key\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">%\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            j \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch2 id=\"关于边界处理\">关于边界处理\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 关于边界处理\" href=\"#关于边界处理\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>其实I和IV都取巧了，就是在判断有没有达到边界的时候，用了数值的范围。\u003C/p>\n\u003Cp>所以其实墙壁也需要交给我们管理的，所以对于IV的代码，我们也可以这么写。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Definition for singly-linked list.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * public class ListNode {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *     int val;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *     ListNode next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *     ListNode() {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *     ListNode(int val) { this.val = val; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Solution\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">spiralMatrix\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> m\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> n\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, ListNode \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">head\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[m][n];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">m;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Arrays.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">fill\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(res[i],\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //此处定义方向，按序分别为右、下、左、上，也就是我们螺旋的顺序\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[][] direction \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},{\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //初始化\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dir_key\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,j\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ListNode pre\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//初始化边界\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> top\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,left\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,bottom\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">m\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,right\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(pre\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            res[i][j] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre.val;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            pre\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">pre.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //别管碰不碰壁，先派个探子去送死,如果探子没事我们就坚持方向，如果有事我们就换方向\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i_try \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j_try \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(i_try\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">top \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i_try\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">bottom \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j_try\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">left \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">||\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j_try\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">right){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //碰壁就缩小墙壁\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                dir_key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (dir_key\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">%\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(dir_key\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) left\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(dir_key\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) top\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(dir_key\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) right\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(dir_key\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) bottom\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            j \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">direction[dir_key][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>",{"headings":384,"localImagePaths":414,"remoteImagePaths":415,"frontmatter":416,"imagePaths":420},[385,386,388,389,391,394,396,398,401,403,405,408,410,412],{"depth":25,"slug":236,"text":236},{"depth":25,"slug":387,"text":387},"螺旋矩阵",{"depth":118,"slug":203,"text":203},{"depth":118,"slug":390,"text":390},"解读",{"depth":25,"slug":392,"text":393},"螺旋矩阵ii","螺旋矩阵II",{"depth":118,"slug":395,"text":203},"题目描述-1",{"depth":118,"slug":397,"text":390},"解读-1",{"depth":25,"slug":399,"text":400},"螺旋矩阵iii","螺旋矩阵III",{"depth":118,"slug":402,"text":203},"题目描述-2",{"depth":118,"slug":404,"text":390},"解读-2",{"depth":25,"slug":406,"text":407},"螺旋矩阵iv","螺旋矩阵IV",{"depth":118,"slug":409,"text":203},"题目描述-3",{"depth":118,"slug":411,"text":390},"解读-3",{"depth":118,"slug":413,"text":413},"关于边界处理",[],[373,374,375,376,377,378,379],{"title":365,"tags":417,"categories":418,"mathjax":105,"description":367,"abbrlink":369,"published":419,"minutes":263},[187,101],[213],["Date","2025-03-21T19:15:48.000Z"],[373,374,375,376,377,378,379],"origin/2025-03-30-关于多线程的一些实验",{"id":421,"data":423,"body":430,"filePath":431,"digest":432,"rendered":433},{"title":424,"published":425,"description":426,"tags":427,"draft":103,"pin":104,"toc":105,"lang":106,"abbrlink":429},"关于多线程的一些实验",["Date","2025-03-30T19:13:02.000Z"],"做点实验来稍微回顾一下Java多线程的常见问题",[101,428],"多线程","thread","# 写在前面\n\n都是做的比较浅显的一些实验，很多问题来自于小林coding，很多内容其实挺八股的，但是我的记忆偶尔会带有一些内存特性，关机就忘了，所以现在想办法通过一点实验和手敲代码落一下盘。\n\n# 正式内容\n\n## 线程\n\n### 进程和线程的区别\n\n线程和进程的区别，这个问题在很多地方都会遇到，无论是在操作系统还是在Java多线程。\n\n其实两者最大的区别就是是否享有独立的执行环境。\n\n我们以Java举例，JVM的运行时内存主要包括这样五块：\n\n1. 虚拟机栈\n2. 堆（常量池什么的其实也在堆里）\n3. 元空间\n4. 本地方法栈(Native)\n5. 程序计数器\n\n一个进程会独立的享有这全部的五个运行时环境，而线程则不是，一个进程创建一个线程，这个线程会获得自己独立的虚拟机栈、程序计数器，对于任意该进程创建的线程，其余三者都是共用的。\n\n举个🌰：\n\n```java\nimport java.util.concurrent.*;\n\npublic class SleepTry {\n\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n      \t//这个StringBuilder是创建在进程堆上的，所以他是会被共享的，创建线程的时候会拷贝一个引用副本\n      \t//所以任何线程都可以操作并修改他，修改的并不是线程自己创建的，而是进程所创建的\n        StringBuilder sb =new StringBuilder();\n        BlockingQueue\u003CRunnable> bq =new LinkedBlockingQueue\u003C>();\n        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(5,10,1000L, TimeUnit.SECONDS,bq);\n        CountDownLatch countDownLatch = new CountDownLatch(2);\n        Runnable task2 = new Runnable() {\n            @Override\n            public void run() {\n                synchronized (sb){\n                    sb.append(\"I am Thread2\\n\");\n                }\n                countDownLatch.countDown();\n            }\n        };\n        Future\u003C?> feature2 =  threadPoolExecutor.submit(task2);\n        feature2.get();\n        System.out.println(sb.toString());\n        threadPoolExecutor.shutdownNow();\n    }\n}\n```\n\n其次，线程是操作系统运算调度的最小单位，因为线程之间的资源共享性质，导致它的上下文切换的开销更小。同时，他们可以通过访问全局变量或者静态变量来通信。\n\n进程的创建和销毁需要创建和销毁上述的全部资源，而进程只需要创建和销毁程序计数器和对应的运行时栈即可。\n\n### 线程的创建\n\n很多面经喜欢把这个问题总结为四类，包括继承Thread、实现Runable和FutureTask、实现Callable、使用线程池，但其实归根到底来说还是三类，因为FutureTask这个抽象类实现了RunnableFuture接口，RunnableFuture这个接口继承了Future接口和Runable接口。\n\n```java\npublic class FutureTask\u003CV> implements RunnableFuture\u003CV> {\n    /*\n     * Revision notes: This differs from previous versions of this\n     * class that relied on AbstractQueuedSynchronizer, mainly to\n     * avoid surprising users about retaining interrupt status during\n     * cancellation races. Sync control in the current design relies\n     * on a \"state\" field updated via CAS to track completion, along\n     * with a simple Treiber stack to hold waiting threads.\n     */\n```\n\n```java\npublic interface RunnableFuture\u003CV> extends Runnable, Future\u003CV> {\n    /**\n     * Sets this Future to the result of its computation\n     * unless it has been cancelled.\n     */\n    void run();\n}\n```\n\n简单来说，创建线程有两件事情，1.确定线程要做的事情，也就是实现run或者call方法。2.启动线程\n\n所以我们可以直接用一个类继承Thread然后重写run方法，就像这样！\n\n```java\nclass Thread3 extends Thread{\n    @Override\n    public void run(){\n        System.out.println(\"Hello zhima.\");\n    }\n}\nThread3 thread3 = new Thread3();\nthread3.start();\n```\n\n或者就像上面那样实现Runable接口。\n\n关于为什么要使用FutureTask这个抽象类，其实主要是希望获得线程的返回值。\n\n就像下面这样：\n\n```java\nclass Thread4 implements Callable\u003CInteger>{\n\n    @Override\n    public Integer call() throws Exception {\n        Random random = new Random();\n        return random.nextInt(114514,114515);\n    }\n}\nFutureTask\u003CInteger> ft = new FutureTask\u003C>(new Thread4());\nThread t4 = new Thread(ft);\nt4.start();\nInteger rand = ft.get();\nSystem.out.println(rand);\n//114514\n```\n\n如果用线程池其实创建方法也很多，可以通过下面几种方法\n\n```java\n//创建大小固定的线程池\nExecutorService executorService = Executors.newFixedThreadPool(10);\n//也可以创建一个\nExecutorService executorService1 = Executors.newSingleThreadExecutor();\n//也可以直接new一个ThreadPoolExecutor\n//要指定的东西就比较多了，包括核心线程数，最大的线程数，非核心空闲线程AliveTime，AliveTime的单位，以及用来存储等待任务的阻塞队列\n//如果阻塞队列用ArrayBlockingQueue的话还要指定最大大小\nBlockingQueue\u003CRunnable> blockingQueue =new LinkedBlockingQueue\u003C>();\nThreadPoolExecutor executorService2 = new ThreadPoolExecutor(5,10,1000L, TimeUnit.SECONDS,blockingQueue);\n```\n\n还有八股里面常问的start和run的区别，run其实就是调用一下你定义的线程要执行的方法，而start才是启动线程。\n\n线程的状态包括：new、runable、blocked、waiting、timed_waiting、terminated\n\n### sleep和wait的区别\n\n这是我决定写这篇博客的出发点，主要是我一开始竟然不知道sleep不会释放当前占用的资源，就比如说我用synchronized关键字同步住了一个资源StringBuilder。\n\n如果我在同步块内调用了一下sleep(0)，虽然线程会放弃对该时间片的占用，但是并不会释放资源。\n\n但是如果在同步块内使用wait()，就会放弃对当前资源和时间片的占用。\n\n做个简单的实验，就是最开始那部分的代码，我们先通过实验进行尝试。\n\n```java\nimport java.util.Random;\nimport java.util.concurrent.*;\n\npublic class SleepTry {\n\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n        StringBuilder sb =new StringBuilder();\n        BlockingQueue\u003CRunnable> bq =new LinkedBlockingQueue\u003C>();\n        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(5,10,1000L, TimeUnit.SECONDS,bq);\n        CountDownLatch countDownLatch = new CountDownLatch(2);\n        Runnable task1 = new Runnable() {\n            @Override\n            public void run() {\n                synchronized (sb){\n                    sb.append(\"hello\\n\");\n                    try {\n                        Thread.sleep(2000);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    sb.append(\"I am Thread1\\n\");\n                }\n                countDownLatch.countDown();\n            }\n        };\n        Runnable task2 = new Runnable() {\n            @Override\n            public void run() {\n                synchronized (sb){\n                    sb.append(\"I am Thread2\\n\");\n                }\n                countDownLatch.countDown();\n            }\n        };\n        Future\u003C?> feature1 =  threadPoolExecutor.submit(task1);\n        Thread.sleep(10);\n        Future\u003C?> feature2 =  threadPoolExecutor.submit(task2);\n        countDownLatch.await();\n        //feature1.get();\n        //feature2.get();\n        System.out.println(sb.toString());\n        threadPoolExecutor.shutdownNow();\n    }\n}\n```\n\n我在同步块里sleep了2s，如果释放了资源，一定是够第二个线程把自己的内容加进去的。\n\n为了让主进程等待两个线程都执行完，我加了一个两步计数器CountDownLatch，每个线程执行完就减一。用被注释掉的两行get其实也可以。\n\n但是实际结果是：\n\n```\nhello\nI am Thread1\nI am Thread2\n```\n\n显然，资源并没有得到释放\n\n此时别的代码都不作修改，在两个线程的同步块内分别调用wait()和notifyAll()方法\n\n```java\nimport java.util.Random;\nimport java.util.concurrent.*;\n\npublic class SleepTry {\n\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n        StringBuilder sb =new StringBuilder();\n        BlockingQueue\u003CRunnable> bq =new LinkedBlockingQueue\u003C>();\n        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(5,10,1000L, TimeUnit.SECONDS,bq);\n        CountDownLatch countDownLatch = new CountDownLatch(2);\n        Runnable task1 = new Runnable() {\n            @Override\n            public void run() {\n                synchronized (sb){\n                    sb.append(\"hello\\n\");\n                    try {\n                        sb.wait();\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    sb.append(\"I am Thread1\\n\");\n                }\n                countDownLatch.countDown();\n            }\n        };\n        Runnable task2 = new Runnable() {\n            @Override\n            public void run() {\n                synchronized (sb){\n                    sb.append(\"I am Thread2\\n\");\n                    sb.notifyAll();\n                }\n                countDownLatch.countDown();\n            }\n        };\n        Future\u003C?> feature1 =  threadPoolExecutor.submit(task1);\n        Thread.sleep(10);\n        Future\u003C?> feature2 =  threadPoolExecutor.submit(task2);\n        //feature1.get();\n        //feature2.get();\n        countDownLatch.await();\n        System.out.println(sb.toString());\n        threadPoolExecutor.shutdownNow();\n    }\n}\n```\n\n结果如下\n\n```\nhello\nI am Thread2\nI am Thread1\n```\n\n资源成功释放，第二个线程也成功写入。\n\n如果第二个线程不notify，而主进程又等着线程1减少计数器，那么进程就会一直等待。\n\n所以此时我们wait的时候可以加个timeout的参数\n\n```java\nsb.wait(100);\n```\n\n所以很多八股其实总结的并不好，wait并不一定需要notify才能唤醒，也可以主动设定timeout，超时也会唤醒。\n\n#### 小小总结一下sleep和wait\n\n1. sleep方法属于Thread类，是一个静态方法，作用是让当前线程进入sleep状态；而wait是一个实例方法，属于Object类，必须被一个初始化了的实力对象调用\n\n2. 如果处于同步块内，sleep不会释放资源，但是wait会释放资源\n\n3. sleep可以不在同步块内调用，但是wait一定要在同步块内调用。也就是说，你要释放这个资源，你必须持有这个资源的锁，否则就会报错如下：\n\n   ```java\n   Exception in thread \"main\" java.util.concurrent.ExecutionException: java.lang.IllegalMonitorStateException: current thread is not owner\n   \tat java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)\n   \tat java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)\n   \tat SleepTry.main(SleepTry.java:44)\n   Caused by: java.lang.IllegalMonitorStateException: current thread is not owner\n   \tat java.base/java.lang.Object.wait(Native Method)\n   \tat java.base/java.lang.Object.wait(Object.java:338)\n   \tat SleepTry$1.run(SleepTry.java:15)\n   \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n   \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n   \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n   \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n   \tat java.base/java.lang.Thread.run(Thread.java:833)\n   ```\n\n   \n\n   \n\n4. 唤醒机制，sleep只能等待超时唤醒，但是wait既可以超时唤醒，也可以通过被notify()或者notifyAll()唤醒\n\n最后这里补充一下notify和notifyAll的区别，这是小林coding上写的，说的特别形象\n\nnotify：唤起一个线程，其他线程还处于waiting状态，如果这个线程结束的时候没有notify，那么其他线程只能继续等待到超时或被中断。而且notify说是随机唤醒，但是在hotspot虚拟机里是先进先出的唤醒。\n\nnotifyAll：所有线程都被唤醒，然后进入资源争夺环节，喜闻乐见的BLOCKED状态\n\n### 线程状态\n\n之前说了线程的六个状态，这里再提醒自己默写一下：\n\nNEW、RUNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINATED\n\nBLOCKED和WAITING其实还挺难分清楚的，我总结为下：\n\n虽然都是阻塞在那里，但是BLOCKED是因为资源竞争导致的阻塞\n\nWAITING是线程无限期地等待另一个线程执行特定操作，比如上面所使用的CountDownLatch，如果调用await()方法，其实是进入WAITING状态，和调用wait方法类似。\n\n### 线程停止\n\n老生常谈，就是Java官方不建议使用Thread.stop()这种方式来停止。\n\n有很多种方法包括\n\n1. 使用volatile关键字来修饰一个boolean变量，线程关注到boolean变量自己内部停止\n\n2. 调用线程中断Thread.interrupt()，然后线程内部检测当前线程是否为中断状态或者触发可中断操作来响应中断。\n\n   可触发中断操作是指sleep或者wait等阻塞操作，如果这时候收到中断请求会直接抛中断异常的。\n\n3. 通过Future管理任务，Future接口是一个可以主动停止任务的接口，Future.cancel()\n\n4. 关闭资源\n\n## 锁\n\n### volatile关键字和synchronized关键字\n\n这两个关键字总是被拿出来说，但其实两者的作用差距还是挺大的。\n\nvolatile的作用主要体现在禁止指令重排导致的修改不可见。\n\n这个🌰其实挺不好举的，我试着看看能不能出现。失败了，很难复现啊，因为并不知道虚拟机底层是如何指令重排和优化的。\n\n但是volatile关键字的目的所在，就是为了让线程知道一个变量它变化了，能感知到它的变化，借由此线程之间可以相互通信。\n\n然后说说volatile关键字的作用域，volatile关键字主要作用于变量声明上，更多的用于**实例变量**或**静态变量**，所以局部变量声明无意义。\n\n### synchronized关键字和 ReentrantLock\n\n接下来就是synchronized关键字，其实它更应该和ReentrantLock放在一起比较才适合，所以我们把它挪到下面来\n\nsynchronized关键字主要用于声明同步，也就是给资源加锁。\n\n与ReentrantLock相同的，synchronized也是一个可重入锁，也就是同一个线程内再次上锁也可以获得资源。\n\nsynchronized是Java提供的原子内置锁，也被称为监视器锁。\n\n使用synchronize关键字修饰的代码块在编译的时候前后会分别加上monitorenter和monitorexit。\n\n这个执行到monitorenter的时候会尝试获取资源，如果获取到资源就把计数器加一，执行到monitorexit的时候就把计数器减一。为0的时候代表是可获取的。\n\n接下来是synchronized关键字的作用域，其实挺复杂的：\n\n1. 作用于类的实例方法上，那就是锁住了当前实例，同一时间只能有一个线程访问该方法的任何 `synchronized` 实例方法。\n\n   ```java\n   import java.util.concurrent.LinkedBlockingQueue;\n   import java.util.concurrent.ThreadPoolExecutor;\n   import java.util.concurrent.TimeUnit;\n   \n   public class SynchronizedTry {\n       public static class beBlocked{\n           private int a;\n           private int b=10;\n           public synchronized int getA() throws InterruptedException {\n               Thread.sleep(10000);\n               return a;\n           }\n           public synchronized int getB(){\n               return b;\n           }\n       }\n   \n       public static void main(String[] args) throws InterruptedException {\n           beBlocked test = new beBlocked();\n           Integer a = 10;\n           ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(5,10,1000L, TimeUnit.SECONDS,new LinkedBlockingQueue\u003C>());\n           threadPoolExecutor.submit(new Runnable() {\n               @Override\n               public void run() {\n                   synchronized (a) {\n                       try {\n                           test.getA();\n                       } catch (InterruptedException e) {\n                           throw new RuntimeException(e);\n                       }\n                   }\n               }\n           });\n           threadPoolExecutor.submit(new Runnable() {\n               @Override\n               public void run() {\n                   int b =test.getB();\n                   System.out.println(b);\n               }\n           });\n           threadPoolExecutor.shutdown();\n       }\n   }\n   ```\n\n   以这段代码为例，调用getA方法sleep的那10s，另一个线程是没有办法获得到哪怕是getB方法的返回值的。\n\n2. 作用于静态方法，那就会锁住类对象，同一时间只能有一个线程访问该方法的任何 `synchronized` 静态方法。\n\n3. 作用于代码块，也就是常用的synchronized(){}范式，括号里可以为Object或者this，也可以是Class对象\n\nReentrantLock相比于synchronized更为精细化。\n\n它实现了两个接口，Lock接口和序列化接口\n\n```java\npublic class ReentrantLock implements Lock, java.io.Serializable {\n    private static final long serialVersionUID = 7373984872572414699L;\n    /** Synchronizer providing all implementation mechanics */\n    private final Sync sync;\n\n    /**\n     * Base of synchronization control for this lock. Subclassed\n     * into fair and nonfair versions below. Uses AQS state to\n     * represent the number of holds on the lock.\n     */\n    abstract static class Sync extends AbstractQueuedSynchronizer {\n        private static final long serialVersionUID = -5179523762034025860L;\n\n```\n\n同步的实现主要依赖于继承自AbstractQueuedSynchronizer类（AQS）类的Sync类\n\nReentrantLock是可重入锁，从名字就可以看出来，每次获取都需要相应的释放操作，锁内部维护了一个计数器来记录获取的次数。这点和synchronized关键字很像。\n\n实例化ReentrantLock的时候可以选择是否启用公平锁。公平锁会按照请求顺序授予锁，而非公平锁则允许插队（即新来的线程可能在等待中的线程之前获得锁）。默认是非公平锁。\n\n```java\n/**\n * Creates an instance of {@code ReentrantLock}.\n * This is equivalent to using {@code ReentrantLock(false)}.\n */\npublic ReentrantLock() {\n    sync = new NonfairSync();\n}\n\n/**\n * Creates an instance of {@code ReentrantLock} with the\n * given fairness policy.\n *\n * @param fair {@code true} if this lock should use a fair ordering policy\n */\npublic ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}\n```\n\n同时ReentrantLock支持中断响应，也就是在等待锁的时候在同步块内响应打断。\n\n同时也支持非阻塞式的获取锁，tryLock，如果不能获得锁，立刻返回，也可以传入等待时间。\n\n```java\nReentrantLock reentrantLock = new ReentrantLock(true);\nreentrantLock.lockInterruptibly();\nboolean flag = reentrantLock.tryLock(10, TimeUnit.MICROSECONDS);\n```\n\n### 其他的锁\n\nsynchronized和ReentrantLock都是排他锁，其实还有很多其他锁的类型。\n\n像是ReadWriteLock，写锁是独占锁，但是读锁是共享锁。\n\n以及一些概念性的锁，乐观锁和悲观锁。\n\n乐观锁其实本质上就是假设资源没人用，有人用了我再重来。悲观锁就是synchronized和ReentrantLock这样的锁，一定要独占了再去操作。\n\n自旋锁主要是靠CAS实现的。CAS全称Compare And Set。\n\n涉及三个参数：内存位置（V）、预期原值（A）和新值（B）。CAS 的执行逻辑如下：\n\n1. 检查内存位置 V 中的值是否等于预期原值 A。\n2. 如果相等，则将内存位置 V 的值更新为新值 B，并返回成功。\n3. 如果不相等，说明有其他线程已经修改了该位置的值，则不进行任何操作，并返回失败。\n\n这其实是乐观锁的一种实现。Java的原子类比如AtomicInteger就提供这种类型的方法：compareAndSet\n\n```java\n/**\n * Atomically sets the value to {@code newValue}\n * if the current value {@code == expectedValue},\n * with memory effects as specified by {@link VarHandle#compareAndSet}.\n *\n * @param expectedValue the expected value\n * @param newValue the new value\n * @return {@code true} if successful. False return indicates that\n * the actual value was not equal to the expected value.\n */\npublic final boolean compareAndSet(int expectedValue, int newValue) {\n    return U.compareAndSetInt(this, VALUE, expectedValue, newValue);\n}\n```\n\n### sychronized\n\nsychronized的锁升级过程：\n\n无锁->偏向锁->轻量级锁->重量级锁\n\n偏向锁是JAVA1.6引入的，当一个线程拿到锁之后，会记录它的线程ID，如果没有竞争时，只需要比较记录的ID与自己是否一致，一致直接获得锁，不需要CAS操作。\n\n当有锁竞争的时候，偏向锁升级为轻量级锁。这时候的锁通过CAS实现，允许自旋。\n\n当竞争激烈的时候，轻量级锁升级为重量级锁，系统挂起线程而不是线程自旋。\n\n### AQS\n\n全名为抽象同步队列，实现同步的重要底层之一。\n\n主要维护一个阻塞队列和一个state。如果state为0或者为同线程（可重入锁），则可获得锁，计数器+1；\n\n竞争失败的线程加入到阻塞队列中去，如果是公平锁，新来的线程直接加入到阻塞队列中去\n\n### 非公平锁为什么比公平锁吞吐量大\n\n因为非公平锁获取线程CAS如果获取到锁直接就拥有锁，不需要进行上下文切换。\n\n### 死锁条件\n\n1. 互斥条件\n2. 拥有并等待\n3. 不可剥夺\n4. 资源依赖环路","src/content/posts/origin/2025-03-30-关于多线程的一些实验.md","6cf650de8bc6d5fe",{"html":434,"metadata":435},"\u003Ch1 id=\"写在前面\">写在前面\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 写在前面\" href=\"#写在前面\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>都是做的比较浅显的一些实验，很多问题来自于小林coding，很多内容其实挺八股的，但是我的记忆偶尔会带有一些内存特性，关机就忘了，所以现在想办法通过一点实验和手敲代码落一下盘。\u003C/p>\n\u003Ch1 id=\"正式内容\">正式内容\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 正式内容\" href=\"#正式内容\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"线程\">线程\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 线程\" href=\"#线程\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Ch3 id=\"进程和线程的区别\">进程和线程的区别\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 进程和线程的区别\" href=\"#进程和线程的区别\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>线程和进程的区别，这个问题在很多地方都会遇到，无论是在操作系统还是在Java多线程。\u003C/p>\n\u003Cp>其实两者最大的区别就是是否享有独立的执行环境。\u003C/p>\n\u003Cp>我们以Java举例，JVM的运行时内存主要包括这样五块：\u003C/p>\n\u003Col>\n\u003Cli>虚拟机栈\u003C/li>\n\u003Cli>堆（常量池什么的其实也在堆里）\u003C/li>\n\u003Cli>元空间\u003C/li>\n\u003Cli>本地方法栈(Native)\u003C/li>\n\u003Cli>程序计数器\u003C/li>\n\u003C/ol>\n\u003Cp>一个进程会独立的享有这全部的五个运行时环境，而线程则不是，一个进程创建一个线程，这个线程会获得自己独立的虚拟机栈、程序计数器，对于任意该进程创建的线程，其余三者都是共用的。\u003C/p>\n\u003Cp>举个🌰：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> SleepTry\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> InterruptedException, ExecutionException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//这个StringBuilder是创建在进程堆上的，所以他是会被共享的，创建线程的时候会拷贝一个引用副本\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//所以任何线程都可以操作并修改他，修改的并不是线程自己创建的，而是进程所创建的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        StringBuilder sb \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> StringBuilder\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        BlockingQueue&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> bq \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> LinkedBlockingQueue&#x3C;>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ThreadPoolExecutor threadPoolExecutor \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ThreadPoolExecutor\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1000L\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, TimeUnit.SECONDS,bq);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        CountDownLatch countDownLatch \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> CountDownLatch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Runnable task2 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                synchronized\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (sb){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"I am Thread2\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                countDownLatch.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">countDown\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Future&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> feature2 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">  threadPoolExecutor.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">submit\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(task2);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        feature2.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        threadPoolExecutor.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">shutdownNow\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>其次，线程是操作系统运算调度的最小单位，因为线程之间的资源共享性质，导致它的上下文切换的开销更小。同时，他们可以通过访问全局变量或者静态变量来通信。\u003C/p>\n\u003Cp>进程的创建和销毁需要创建和销毁上述的全部资源，而进程只需要创建和销毁程序计数器和对应的运行时栈即可。\u003C/p>\n\u003Ch3 id=\"线程的创建\">线程的创建\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 线程的创建\" href=\"#线程的创建\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>很多面经喜欢把这个问题总结为四类，包括继承Thread、实现Runable和FutureTask、实现Callable、使用线程池，但其实归根到底来说还是三类，因为FutureTask这个抽象类实现了RunnableFuture接口，RunnableFuture这个接口继承了Future接口和Runable接口。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> FutureTask\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> RunnableFuture\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /*\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * Revision notes: This differs from previous versions of this\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * class that relied on AbstractQueuedSynchronizer, mainly to\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * avoid surprising users about retaining interrupt status during\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * cancellation races. Sync control in the current design relies\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * on a \"state\" field updated via CAS to track completion, along\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * with a simple Treiber stack to hold waiting threads.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> interface\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> RunnableFuture\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">extends\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Future\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * Sets this Future to the result of its computation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * unless it has been cancelled.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>简单来说，创建线程有两件事情，1.确定线程要做的事情，也就是实现run或者call方法。2.启动线程\u003C/p>\n\u003Cp>所以我们可以直接用一个类继承Thread然后重写run方法，就像这样！\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Thread3\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Thread\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Hello zhima.\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">Thread3 thread3 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Thread3\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">thread3.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">start\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>或者就像上面那样实现Runable接口。\u003C/p>\n\u003Cp>关于为什么要使用FutureTask这个抽象类，其实主要是希望获得线程的返回值。\u003C/p>\n\u003Cp>就像下面这样：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Thread4\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Callable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Integer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Integer \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">call\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Random random \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Random\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> random.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">nextInt\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">114514\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">114515\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">FutureTask&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Integer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> ft \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> FutureTask&#x3C;>(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Thread4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">Thread t4 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Thread\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ft);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">t4.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">start\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">Integer rand \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ft.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(rand);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//114514\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>如果用线程池其实创建方法也很多，可以通过下面几种方法\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//创建大小固定的线程池\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">ExecutorService executorService \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Executors.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">newFixedThreadPool\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//也可以创建一个\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">ExecutorService executorService1 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Executors.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">newSingleThreadExecutor\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//也可以直接new一个ThreadPoolExecutor\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//要指定的东西就比较多了，包括核心线程数，最大的线程数，非核心空闲线程AliveTime，AliveTime的单位，以及用来存储等待任务的阻塞队列\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//如果阻塞队列用ArrayBlockingQueue的话还要指定最大大小\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">BlockingQueue&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> blockingQueue \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> LinkedBlockingQueue&#x3C;>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">ThreadPoolExecutor executorService2 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ThreadPoolExecutor\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1000L\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, TimeUnit.SECONDS,blockingQueue);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>还有八股里面常问的start和run的区别，run其实就是调用一下你定义的线程要执行的方法，而start才是启动线程。\u003C/p>\n\u003Cp>线程的状态包括：new、runable、blocked、waiting、timed_waiting、terminated\u003C/p>\n\u003Ch3 id=\"sleep和wait的区别\">sleep和wait的区别\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to sleep和wait的区别\" href=\"#sleep和wait的区别\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>这是我决定写这篇博客的出发点，主要是我一开始竟然不知道sleep不会释放当前占用的资源，就比如说我用synchronized关键字同步住了一个资源StringBuilder。\u003C/p>\n\u003Cp>如果我在同步块内调用了一下sleep(0)，虽然线程会放弃对该时间片的占用，但是并不会释放资源。\u003C/p>\n\u003Cp>但是如果在同步块内使用wait()，就会放弃对当前资源和时间片的占用。\u003C/p>\n\u003Cp>做个简单的实验，就是最开始那部分的代码，我们先通过实验进行尝试。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Random;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> SleepTry\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> InterruptedException, ExecutionException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        StringBuilder sb \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> StringBuilder\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        BlockingQueue&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> bq \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> LinkedBlockingQueue&#x3C;>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ThreadPoolExecutor threadPoolExecutor \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ThreadPoolExecutor\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1000L\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, TimeUnit.SECONDS,bq);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        CountDownLatch countDownLatch \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> CountDownLatch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Runnable task1 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                synchronized\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (sb){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"hello\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        Thread.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sleep\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2000\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (InterruptedException \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> RuntimeException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"I am Thread1\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                countDownLatch.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">countDown\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Runnable task2 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                synchronized\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (sb){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"I am Thread2\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                countDownLatch.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">countDown\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Future&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> feature1 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">  threadPoolExecutor.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">submit\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(task1);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Thread.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sleep\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Future&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> feature2 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">  threadPoolExecutor.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">submit\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(task2);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        countDownLatch.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">await\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //feature1.get();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //feature2.get();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        threadPoolExecutor.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">shutdownNow\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>我在同步块里sleep了2s，如果释放了资源，一定是够第二个线程把自己的内容加进去的。\u003C/p>\n\u003Cp>为了让主进程等待两个线程都执行完，我加了一个两步计数器CountDownLatch，每个线程执行完就减一。用被注释掉的两行get其实也可以。\u003C/p>\n\u003Cp>但是实际结果是：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>hello\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>I am Thread1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>I am Thread2\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>显然，资源并没有得到释放\u003C/p>\n\u003Cp>此时别的代码都不作修改，在两个线程的同步块内分别调用wait()和notifyAll()方法\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Random;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> SleepTry\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> InterruptedException, ExecutionException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        StringBuilder sb \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> StringBuilder\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        BlockingQueue&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> bq \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> LinkedBlockingQueue&#x3C;>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ThreadPoolExecutor threadPoolExecutor \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ThreadPoolExecutor\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1000L\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, TimeUnit.SECONDS,bq);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        CountDownLatch countDownLatch \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> CountDownLatch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Runnable task1 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                synchronized\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (sb){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"hello\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">wait\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (InterruptedException \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> RuntimeException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"I am Thread1\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                countDownLatch.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">countDown\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Runnable task2 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                synchronized\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (sb){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"I am Thread2\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">notifyAll\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                countDownLatch.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">countDown\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Future&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> feature1 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">  threadPoolExecutor.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">submit\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(task1);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Thread.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sleep\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Future&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> feature2 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">  threadPoolExecutor.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">submit\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(task2);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //feature1.get();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //feature2.get();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        countDownLatch.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">await\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        threadPoolExecutor.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">shutdownNow\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>结果如下\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>hello\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>I am Thread2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>I am Thread1\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>资源成功释放，第二个线程也成功写入。\u003C/p>\n\u003Cp>如果第二个线程不notify，而主进程又等着线程1减少计数器，那么进程就会一直等待。\u003C/p>\n\u003Cp>所以此时我们wait的时候可以加个timeout的参数\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">sb.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">wait\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>所以很多八股其实总结的并不好，wait并不一定需要notify才能唤醒，也可以主动设定timeout，超时也会唤醒。\u003C/p>\n\u003Ch4 id=\"小小总结一下sleep和wait\">小小总结一下sleep和wait\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 小小总结一下sleep和wait\" href=\"#小小总结一下sleep和wait\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h4>\n\u003Col>\n\u003Cli>\n\u003Cp>sleep方法属于Thread类，是一个静态方法，作用是让当前线程进入sleep状态；而wait是一个实例方法，属于Object类，必须被一个初始化了的实力对象调用\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>如果处于同步块内，sleep不会释放资源，但是wait会释放资源\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>sleep可以不在同步块内调用，但是wait一定要在同步块内调用。也就是说，你要释放这个资源，你必须持有这个资源的锁，否则就会报错如下：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">Exception in thread \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"main\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.ExecutionException\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.lang.IllegalMonitorStateException\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> current thread is not owner\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tat java.base\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">/\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">java.util.concurrent.FutureTask.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">report\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(FutureTask.java\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">122\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tat java.base\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">/\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">java.util.concurrent.FutureTask.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(FutureTask.java\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">191\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tat SleepTry.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SleepTry.java\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">44\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">Caused by\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.lang.IllegalMonitorStateException\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> current thread is not owner\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tat java.base\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">/\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">java.lang.Object.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">wait\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Native Method)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tat java.base\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">/\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">java.lang.Object.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">wait\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Object.java\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">338\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tat SleepTry$1.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SleepTry.java\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">15\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tat java.base\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">/\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">java.util.concurrent.Executors$RunnableAdapter.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">call\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Executors.java\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">539\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tat java.base\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">/\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">java.util.concurrent.FutureTask.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(FutureTask.java\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">264\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tat java.base\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">/\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">java.util.concurrent.ThreadPoolExecutor.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">runWorker\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ThreadPoolExecutor.java\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1136\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tat java.base\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">/\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">java.util.concurrent.ThreadPoolExecutor$Worker.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ThreadPoolExecutor.java\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">635\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tat java.base\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">/\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">java.lang.Thread.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Thread.java\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">833\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/li>\n\u003Cli>\n\u003Cp>唤醒机制，sleep只能等待超时唤醒，但是wait既可以超时唤醒，也可以通过被notify()或者notifyAll()唤醒\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>最后这里补充一下notify和notifyAll的区别，这是小林coding上写的，说的特别形象\u003C/p>\n\u003Cp>notify：唤起一个线程，其他线程还处于waiting状态，如果这个线程结束的时候没有notify，那么其他线程只能继续等待到超时或被中断。而且notify说是随机唤醒，但是在hotspot虚拟机里是先进先出的唤醒。\u003C/p>\n\u003Cp>notifyAll：所有线程都被唤醒，然后进入资源争夺环节，喜闻乐见的BLOCKED状态\u003C/p>\n\u003Ch3 id=\"线程状态\">线程状态\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 线程状态\" href=\"#线程状态\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>之前说了线程的六个状态，这里再提醒自己默写一下：\u003C/p>\n\u003Cp>NEW、RUNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINATED\u003C/p>\n\u003Cp>BLOCKED和WAITING其实还挺难分清楚的，我总结为下：\u003C/p>\n\u003Cp>虽然都是阻塞在那里，但是BLOCKED是因为资源竞争导致的阻塞\u003C/p>\n\u003Cp>WAITING是线程无限期地等待另一个线程执行特定操作，比如上面所使用的CountDownLatch，如果调用await()方法，其实是进入WAITING状态，和调用wait方法类似。\u003C/p>\n\u003Ch3 id=\"线程停止\">线程停止\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 线程停止\" href=\"#线程停止\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>老生常谈，就是Java官方不建议使用Thread.stop()这种方式来停止。\u003C/p>\n\u003Cp>有很多种方法包括\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>使用volatile关键字来修饰一个boolean变量，线程关注到boolean变量自己内部停止\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>调用线程中断Thread.interrupt()，然后线程内部检测当前线程是否为中断状态或者触发可中断操作来响应中断。\u003C/p>\n\u003Cp>可触发中断操作是指sleep或者wait等阻塞操作，如果这时候收到中断请求会直接抛中断异常的。\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>通过Future管理任务，Future接口是一个可以主动停止任务的接口，Future.cancel()\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>关闭资源\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"锁\">锁\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 锁\" href=\"#锁\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Ch3 id=\"volatile关键字和synchronized关键字\">volatile关键字和synchronized关键字\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to volatile关键字和synchronized关键字\" href=\"#volatile关键字和synchronized关键字\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>这两个关键字总是被拿出来说，但其实两者的作用差距还是挺大的。\u003C/p>\n\u003Cp>volatile的作用主要体现在禁止指令重排导致的修改不可见。\u003C/p>\n\u003Cp>这个🌰其实挺不好举的，我试着看看能不能出现。失败了，很难复现啊，因为并不知道虚拟机底层是如何指令重排和优化的。\u003C/p>\n\u003Cp>但是volatile关键字的目的所在，就是为了让线程知道一个变量它变化了，能感知到它的变化，借由此线程之间可以相互通信。\u003C/p>\n\u003Cp>然后说说volatile关键字的作用域，volatile关键字主要作用于变量声明上，更多的用于\u003Cstrong>实例变量\u003C/strong>或\u003Cstrong>静态变量\u003C/strong>，所以局部变量声明无意义。\u003C/p>\n\u003Ch3 id=\"synchronized关键字和-reentrantlock\">synchronized关键字和 ReentrantLock\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to synchronized关键字和 ReentrantLock\" href=\"#synchronized关键字和-reentrantlock\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>接下来就是synchronized关键字，其实它更应该和ReentrantLock放在一起比较才适合，所以我们把它挪到下面来\u003C/p>\n\u003Cp>synchronized关键字主要用于声明同步，也就是给资源加锁。\u003C/p>\n\u003Cp>与ReentrantLock相同的，synchronized也是一个可重入锁，也就是同一个线程内再次上锁也可以获得资源。\u003C/p>\n\u003Cp>synchronized是Java提供的原子内置锁，也被称为监视器锁。\u003C/p>\n\u003Cp>使用synchronize关键字修饰的代码块在编译的时候前后会分别加上monitorenter和monitorexit。\u003C/p>\n\u003Cp>这个执行到monitorenter的时候会尝试获取资源，如果获取到资源就把计数器加一，执行到monitorexit的时候就把计数器减一。为0的时候代表是可获取的。\u003C/p>\n\u003Cp>接下来是synchronized关键字的作用域，其实挺复杂的：\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>作用于类的实例方法上，那就是锁住了当前实例，同一时间只能有一个线程访问该方法的任何 \u003Ccode>synchronized\u003C/code> 实例方法。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.LinkedBlockingQueue;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.ThreadPoolExecutor;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.TimeUnit;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> SynchronizedTry\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> beBlocked\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> synchronized\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> getA\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> InterruptedException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Thread.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sleep\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10000\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> synchronized\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> getB\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> InterruptedException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        beBlocked test \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> beBlocked\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Integer a \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ThreadPoolExecutor threadPoolExecutor \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ThreadPoolExecutor\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1000L\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, TimeUnit.SECONDS,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> LinkedBlockingQueue&#x3C;>());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        threadPoolExecutor.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">submit\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                synchronized\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (a) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        test.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getA\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (InterruptedException \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> RuntimeException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        threadPoolExecutor.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">submit\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Runnable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">test.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getB\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(b);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        threadPoolExecutor.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">shutdown\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>以这段代码为例，调用getA方法sleep的那10s，另一个线程是没有办法获得到哪怕是getB方法的返回值的。\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>作用于静态方法，那就会锁住类对象，同一时间只能有一个线程访问该方法的任何 \u003Ccode>synchronized\u003C/code> 静态方法。\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>作用于代码块，也就是常用的synchronized(){}范式，括号里可以为Object或者this，也可以是Class对象\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>ReentrantLock相比于synchronized更为精细化。\u003C/p>\n\u003Cp>它实现了两个接口，Lock接口和序列化接口\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ReentrantLock\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Lock\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, java.io.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Serializable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> long\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> serialVersionUID \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 7373984872572414699L\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /** Synchronizer providing all implementation mechanics */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Sync sync;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * Base of synchronization control for this lock. Subclassed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * into fair and nonfair versions below. Uses AQS state to\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * represent the number of holds on the lock.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    abstract\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Sync\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> AbstractQueuedSynchronizer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> long\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> serialVersionUID \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5179523762034025860L\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>同步的实现主要依赖于继承自AbstractQueuedSynchronizer类（AQS）类的Sync类\u003C/p>\n\u003Cp>ReentrantLock是可重入锁，从名字就可以看出来，每次获取都需要相应的释放操作，锁内部维护了一个计数器来记录获取的次数。这点和synchronized关键字很像。\u003C/p>\n\u003Cp>实例化ReentrantLock的时候可以选择是否启用公平锁。公平锁会按照请求顺序授予锁，而非公平锁则允许插队（即新来的线程可能在等待中的线程之前获得锁）。默认是非公平锁。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Creates an instance of {@code ReentrantLock}.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * This is equivalent to using {@code ReentrantLock(false)}.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ReentrantLock\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    sync \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NonfairSync\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Creates an instance of {@code ReentrantLock} with the\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * given fairness policy.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> fair\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> {@code true} if this lock should use a fair ordering policy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ReentrantLock\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">boolean\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> fair) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    sync \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> fair \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> FairSync\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NonfairSync\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>同时ReentrantLock支持中断响应，也就是在等待锁的时候在同步块内响应打断。\u003C/p>\n\u003Cp>同时也支持非阻塞式的获取锁，tryLock，如果不能获得锁，立刻返回，也可以传入等待时间。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">ReentrantLock reentrantLock \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ReentrantLock\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">reentrantLock.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">lockInterruptibly\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">boolean\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> flag \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> reentrantLock.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">tryLock\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, TimeUnit.MICROSECONDS);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch3 id=\"其他的锁\">其他的锁\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 其他的锁\" href=\"#其他的锁\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>synchronized和ReentrantLock都是排他锁，其实还有很多其他锁的类型。\u003C/p>\n\u003Cp>像是ReadWriteLock，写锁是独占锁，但是读锁是共享锁。\u003C/p>\n\u003Cp>以及一些概念性的锁，乐观锁和悲观锁。\u003C/p>\n\u003Cp>乐观锁其实本质上就是假设资源没人用，有人用了我再重来。悲观锁就是synchronized和ReentrantLock这样的锁，一定要独占了再去操作。\u003C/p>\n\u003Cp>自旋锁主要是靠CAS实现的。CAS全称Compare And Set。\u003C/p>\n\u003Cp>涉及三个参数：内存位置（V）、预期原值（A）和新值（B）。CAS 的执行逻辑如下：\u003C/p>\n\u003Col>\n\u003Cli>检查内存位置 V 中的值是否等于预期原值 A。\u003C/li>\n\u003Cli>如果相等，则将内存位置 V 的值更新为新值 B，并返回成功。\u003C/li>\n\u003Cli>如果不相等，说明有其他线程已经修改了该位置的值，则不进行任何操作，并返回失败。\u003C/li>\n\u003C/ol>\n\u003Cp>这其实是乐观锁的一种实现。Java的原子类比如AtomicInteger就提供这种类型的方法：compareAndSet\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Atomically sets the value to {@code newValue}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * if the current value {@code == expectedValue},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * with memory effects as specified by {@link VarHandle#compareAndSet}.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> expectedValue\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> the expected value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> newValue\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> the new value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@return\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> {@code true} if successful. False return indicates that\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * the actual value was not equal to the expected value.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> boolean\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> compareAndSet\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> expectedValue, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> newValue) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> U.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">compareAndSetInt\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, VALUE, expectedValue, newValue);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch3 id=\"sychronized\">sychronized\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to sychronized\" href=\"#sychronized\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>sychronized的锁升级过程：\u003C/p>\n\u003Cp>无锁->偏向锁->轻量级锁->重量级锁\u003C/p>\n\u003Cp>偏向锁是JAVA1.6引入的，当一个线程拿到锁之后，会记录它的线程ID，如果没有竞争时，只需要比较记录的ID与自己是否一致，一致直接获得锁，不需要CAS操作。\u003C/p>\n\u003Cp>当有锁竞争的时候，偏向锁升级为轻量级锁。这时候的锁通过CAS实现，允许自旋。\u003C/p>\n\u003Cp>当竞争激烈的时候，轻量级锁升级为重量级锁，系统挂起线程而不是线程自旋。\u003C/p>\n\u003Ch3 id=\"aqs\">AQS\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to AQS\" href=\"#aqs\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>全名为抽象同步队列，实现同步的重要底层之一。\u003C/p>\n\u003Cp>主要维护一个阻塞队列和一个state。如果state为0或者为同线程（可重入锁），则可获得锁，计数器+1；\u003C/p>\n\u003Cp>竞争失败的线程加入到阻塞队列中去，如果是公平锁，新来的线程直接加入到阻塞队列中去\u003C/p>\n\u003Ch3 id=\"非公平锁为什么比公平锁吞吐量大\">非公平锁为什么比公平锁吞吐量大\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 非公平锁为什么比公平锁吞吐量大\" href=\"#非公平锁为什么比公平锁吞吐量大\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>因为非公平锁获取线程CAS如果获取到锁直接就拥有锁，不需要进行上下文切换。\u003C/p>\n\u003Ch3 id=\"死锁条件\">死锁条件\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 死锁条件\" href=\"#死锁条件\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Col>\n\u003Cli>互斥条件\u003C/li>\n\u003Cli>拥有并等待\u003C/li>\n\u003Cli>不可剥夺\u003C/li>\n\u003Cli>资源依赖环路\u003C/li>\n\u003C/ol>",{"headings":436,"localImagePaths":473,"remoteImagePaths":474,"frontmatter":475,"imagePaths":480},[437,438,440,442,444,446,448,451,453,455,457,459,462,464,466,469,471],{"depth":25,"slug":236,"text":236},{"depth":25,"slug":439,"text":439},"正式内容",{"depth":118,"slug":441,"text":441},"线程",{"depth":126,"slug":443,"text":443},"进程和线程的区别",{"depth":126,"slug":445,"text":445},"线程的创建",{"depth":126,"slug":447,"text":447},"sleep和wait的区别",{"depth":449,"slug":450,"text":450},4,"小小总结一下sleep和wait",{"depth":126,"slug":452,"text":452},"线程状态",{"depth":126,"slug":454,"text":454},"线程停止",{"depth":118,"slug":456,"text":456},"锁",{"depth":126,"slug":458,"text":458},"volatile关键字和synchronized关键字",{"depth":126,"slug":460,"text":461},"synchronized关键字和-reentrantlock","synchronized关键字和 ReentrantLock",{"depth":126,"slug":463,"text":463},"其他的锁",{"depth":126,"slug":465,"text":465},"sychronized",{"depth":126,"slug":467,"text":468},"aqs","AQS",{"depth":126,"slug":470,"text":470},"非公平锁为什么比公平锁吞吐量大",{"depth":126,"slug":472,"text":472},"死锁条件",[],[],{"title":424,"tags":476,"categories":477,"mathjax":105,"published":478,"abbrlink":429,"description":426,"minutes":479},[101,428],[312],["Date","2025-03-30T19:13:02.000Z"],20,[],"origin/2025-03-24-netty相关的一些知识",{"id":481,"data":483,"body":490,"filePath":491,"digest":492,"rendered":493},{"title":484,"published":485,"description":486,"tags":487,"draft":103,"pin":104,"toc":105,"lang":106,"abbrlink":489},"netty相关的一些知识",["Date","2025-03-24T16:43:58.000Z"],"关于Netty常见的一些知识的梳理。",[101,488],"Netty","netty-inform","# 写在前面\n\n在3月20日的博客里，我通过代码来理解了一下NIO和BIO的区别，可以看出一部分代码是比较麻烦和复杂的，在项目开发中一般遇到这种普适性的问题，都会有前人造出轮子来让我们使用，而对于NIO的网络编程，最佳的轮子就是Netty。\n\nNetty的语言实现是Java，所以去看源码什么的也会比较容易一点。\n\n# Reactor设计模式\n\nNetty的核心在于异步、事件驱动。\n\n在了解Netty之前必须先了解Reactor设计模式。\n\nReactor的翻译是反应堆，其实本质上就是事件驱动模式。\n\n在Reactor模式中，有一些比较重要的概念：\n\n1. 事件，Event，对应于Netty中的channelActive、channelRead、channelInactive等等\n2. 事件处理器，EventHandler，对应于Netty中的ChannelInboundHandler，对应的事件就要有对应的事件处理逻辑\n3. Reactor，事件分发器，负责响应并分发I/O事件。事件发生了，需要将事件交给对应的事件处理器去处理，在Netty中，对应的工作由EventLoop来执行。\n4. 事件多路处理器，Selector，在上一篇博客里我们重点讨论过这个部分，在Netty中，Selector的工作由EventLoop来执行。\n\nNetty实现了Reactor的三种模型，分别为：\n\n1. 单Reactor单线程模型，对应Netty中的单线程模型\n2. 单Reactor多线程模型，对应Netty中的多线程模型\n3. 主从Reactor多线程模型，对应Netty中的主从多线程模型\n\n## 单线程模型\n\n我们在上一篇博客中实现的NIO模式，其实就是单Reactor单线程模式。\n\n只启用一个Selector，这个Selector又要监听Accept事件，获得Channel之后将对应的Channel也注册到同一个Selector上去，这个Selector需要负责监听这个Channel的读写事件以及之前的ServerChannel的注册事件。\n\n![单Reactor](/picture/single_reactor.png)\n\n这里我用了掘金的图，我觉得画的比较符合我的认知。\n\n那么在我们上篇博客里，服务器的实现代码如下：\n\n```java\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NIOServer {\n    public static void main(String[] args) throws Exception {\n        // NIO基于Channel控制，所以有Selector管理所有的Channel\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        // 设置为非阻塞模式\n        serverSocketChannel.configureBlocking(false);\n        // 设置监听端口\n        serverSocketChannel.bind(new InetSocketAddress(8080));\n        // 设置Selector管理所有Channel\n        Selector selector = Selector.open();\n        // 注册并设置连接时处理\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        System.out.println(\"服务启动成功，监听端口为：\" + 8080);\n        // NIO使用轮询，当有请求连接时，则启动一个线程\n        int keySelect = 0;\n        while (serverSocketChannel.isOpen()) {\n            selector.select();\n            Set\u003CSelectionKey> selectionKeys = selector.selectedKeys();\n            Iterator\u003CSelectionKey> iterator = selectionKeys.iterator();\n            while (iterator.hasNext()) {\n                SelectionKey next = iterator.next();\n                if (next.isAcceptable()) {    //  如果是连接的\n                    SocketChannel accept = serverSocketChannel.accept();\n                    if (accept != null) {\n                        //把新的会话测channel注册到selector里去，让Selector来管理它\n                        accept.configureBlocking(false);\n                        //并且把它的感兴趣状态变为可读状态\n                        accept.register(selector,SelectionKey.OP_READ);\n                    }\n                    iterator.remove();\n                }\n                //一旦可读了，就代表客户端发来了消息，那我们就去处理这个消息\n                if(next.isReadable()){\n                    handleRead(next);\n                }\n            }\n        }\n        serverSocketChannel.close();\n    }\n\n    //其实处理这个消息我们依然有一处是阻塞的，就是我们返回给客户端的时候，要求客户端是写可用的。\n    //但是写可用的触发是很多次的，一般都是写可用的，所以我们就没有做过多的干预\n    private static void handleRead(SelectionKey key) throws Exception {\n        SocketChannel channel = (SocketChannel) key.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(50);\n        buffer.clear();\n        int read = channel.read(buffer);\n        String msg = new String(buffer.array(), 0, read).trim();\n        System.out.println(\"服务端收到消息：\"+msg);\n        String outMsg = \"【Echo】\" + msg; // 生成回应信息\n        //模拟消息处理时长\n        Thread.sleep(5000);\n        buffer.clear();\n        buffer.put(outMsg.getBytes());  //回传信息放入缓冲区\n        buffer.flip();\n        channel.write(buffer);// 回传信息\n    }\n}\n```\n\n那么如果这段代码用Netty实现该如何实现呢？\n\n```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyServer {\n    public static void main(String[] args) throws InterruptedException {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        EventLoopGroup singleReactor = new NioEventLoopGroup(1);//限制为单线程\n        bootstrap.group(singleReactor)\n                .channel(NioServerSocketChannel.class)\n                .handler(new BossLogHandler())\n                .childHandler(new ChannelInitializer\u003C>() {\n                    @Override\n                    protected void initChannel(Channel channel) throws Exception {\n                        ChannelPipeline channelPipeline = channel.pipeline();\n                        // 添加 HTTP 编解码器\n                        channelPipeline.addLast(new HttpServerCodec());\n                        // 聚合 HTTP 消息\n                        channelPipeline.addLast(new HttpObjectAggregator(65536));\n                        // 处理 WebSocket 升级请求\n                        channelPipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n                        //超时处理器\n                        channelPipeline.addLast(new IdleStateHandler(10,10,1000, TimeUnit.SECONDS));\n                        // 自定义处理器\n                        channelPipeline.addLast(new MyChannelHandler());\n                    }\n                });\n        ChannelFuture future = bootstrap.bind(\"127.0.0.1\", 8080).sync();\n        System.out.println(\"服务器启动\");\n        // 等待连接关闭\n        future.channel().closeFuture().sync();\n    }\n}\n```\n\n这个服务端实现起来是比较简单的，因为只有一个EventLoop，但其实多线程模式和主从模式其实也只需要稍作修改即可。\n\n单线程模式的优势为：\n\n1. 简化并发模型\n2. 减少上下文切换的开销\n3. 资源消耗低\n\n存在的问题：\n\n阻塞模式、CPU利用率低、不适合高并发场景\n\n## 多线程模型\n\n和单线程模型不同的点在于多了一个handler线程池。\n\nReactor设计模式的单Reactor多线程模式和Netty的多线程模型其实并不完全对应。\n\nReactor的单Reactor多线程模式只有一个线程的问题，但是仍然只有一个Reactor在同时监听ACCEPT事件和READ事件。\n\n但是Netty的多线程模式则并不是，所有线程都负责处理连接和数据。\n\n```java\nEventLoopGroup singleReactor = new NioEventLoopGroup();\n```\n\n就把这个1去掉就行了。\n\n多线程模型的优点包括：\n\n1. 提高吞吐率\n2. 更好利用多核\n\n存在的问题：\n\n1. 没有区分监听新连接和处理已有连接的读写操作，这种设计可能导致某些线程在处理复杂或耗时的数据处理任务时无法及时响应新的连接请求，从而影响新连接的接受速度。\n2. 难以实现有效的负载均衡，所有线程都在执行相似的任务，可能会出现部分线程过载而其他线程空闲的情况，难以实现真正的负载均衡。\n3. 资源竞争加剧，所有线程都可以访问I/O、数据库等共享资源\n\n为了解决这种问题Netty设计出了主从模型。\n\n## 主从模型\n\n```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyServer {\n    public static void main(String[] args) throws InterruptedException {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        EventLoopGroup boss = new NioEventLoopGroup(1);//限制为单线程\n        EventLoopGroup workers = new NioEventLoopGroup(1);//限制为单线程\n        bootstrap.group(boss,workers)\n                .channel(NioServerSocketChannel.class)\n                .handler(new BossLogHandler())\n                .childHandler(new ChannelInitializer\u003C>() {\n                    @Override\n                    protected void initChannel(Channel channel) throws Exception {\n                        ChannelPipeline channelPipeline = channel.pipeline();\n                        // 添加 HTTP 编解码器\n                        channelPipeline.addLast(new HttpServerCodec());\n                        // 聚合 HTTP 消息\n                        channelPipeline.addLast(new HttpObjectAggregator(65536));\n                        // 处理 WebSocket 升级请求\n                        channelPipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n                        //超时处理器\n                        channelPipeline.addLast(new IdleStateHandler(10,10,1000, TimeUnit.SECONDS));\n                        // 自定义处理器\n                        channelPipeline.addLast(new MyChannelHandler());\n                    }\n                });\n        ChannelFuture future = bootstrap.bind(\"127.0.0.1\", 8080).sync();\n        System.out.println(\"服务器启动\");\n        // 等待连接关闭\n        future.channel().closeFuture().sync();\n    }\n}\n```\n\n通过将线程之间的任务分开，分为负责监听并建立新连接的boss线程池和负责处理已经连接的连接的事件的workers线程池，能够有效实现不同分工的负载均衡。\n\n# EventLoop\n\nEvenLoop其实是Netty的核心所在，我们常常定义的EventLoopGroup是用来管理EventLoop实例线程池的。常见的实现包括NioEventLoopGroup和EpollEventLoopGroup。\n\n### NioEventLoopGroup\n\n- **基于Java NIO**: NioEventLoopGroup 使用的是 Java 原生的非阻塞 I/O（NIO）API。这意味着它可以跨平台使用，无论是在 Windows、Linux 还是 macOS 上都能正常工作。\n- **跨平台兼容性**: 由于依赖于标准的 Java NIO 库，因此具有很好的跨平台兼容性。\n- **性能特点**: 对于大多数应用场景来说，NioEventLoopGroup 提供了足够的性能。然而，在高并发场景下，尤其是在 Linux 系统上，它可能不如 EpollEventLoopGroup 高效。\n\n### EpollEventLoopGroup\n\n- **基于Linux的epoll**: EpollEventLoopGroup是专门为 Linux 系统设计的，它利用了 Linux 特有的 epoll I/O 事件通知机制。相比于 Java NIO 的 select/poll 方法，epoll 在处理大量文件描述符时更加高效，特别是在有大量连接但活跃连接相对较少的情况下。\n- **性能优化**: 在高负载和高并发场景下，EpollEventLoopGroup 能够提供比 NioEventLoopGroup 更好的性能。这是因为 epoll 能够更有效地管理大量的文件描述符，并且在监听大量连接的同时保持较低的CPU使用率。\n- **限制**: 只能在 Linux 系统上运行，因为它依赖于 Linux 内核特有的功能。\n\n就像我想在mac上运行就会报错，只在Linux上支持\n\n```bash\nException in thread \"main\" java.lang.UnsatisfiedLinkError: failed to load the required native library\n\tat io.netty.channel.epoll.Epoll.ensureAvailability(Epoll.java:81)\n\tat io.netty.channel.epoll.EpollEventLoopGroup.\u003Cclinit>(EpollEventLoopGroup.java:41)\n\tat NettyServer.main(NettyServer.java:16)\nCaused by: java.lang.ExceptionInInitializerError\n\tat io.netty.channel.epoll.Epoll.\u003Cclinit>(Epoll.java:40)\n\t... 2 more\nCaused by: java.lang.IllegalStateException: Only supported on Linux\n\tat io.netty.channel.epoll.Native.loadNativeLibrary(Native.java:317)\n\tat io.netty.channel.epoll.Native.\u003Cclinit>(Native.java:85)\n\t... 3 more\n\n```\n\n## Channel\n\nChannel其实就是类似于Socket的网络连接，可以是客户端连接或服务器监听端口。Channel负责读写网络数据，并注册到EventLoop中等待事件处理。\n\n而Channel的I/O事件则会交给它的ChannelPipeline来处理，用户可以在ChannelPipeline添加一系列ChannelHandler，包括解码器、聚合器、WebSocketServerProtocolHandler这种http升级ws的Handler以及用户自定义的ChannelHandler（通过继承SimpleChannelInboundHandler或者ChannelInboundHandlerAdapter或者实现ChannelInboundHandler）来定义\n\n## Netty事件驱动模型的工作原理\n\nNetty的事件驱动模型通过EventLoopGroup、EventLoop、Channel、ChannelPipeline和ChannelHandler之间的协同工作来实现。其工作流程如下：\n\n1. 初始化：服务器启动时，创建一个或多个EventLoopGroup，分别用于接收连接和处理I/O操作。\n2. 注册Channel：为每个客户端连接创建一个Channel，并将其注册到一个EventLoop中。每个Channel会绑定一个ChannelPipeline。\n3. 事件循环：EventLoop在其绑定的线程中不断循环，监听I/O事件。当有事件发生时，EventLoop会将事件分发到ChannelPipeline。\n4. 事件处理：ChannelPipeline根据事件类型，将事件传递给相应的ChannelHandler进行处理。ChannelHandler可以处理入站、出站事件，或者进行数据编码、解码等操作。","src/content/posts/origin/2025-03-24-netty相关的一些知识.md","7c6ebc81f29424e3",{"html":494,"metadata":495},"\u003Ch1 id=\"写在前面\">写在前面\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 写在前面\" href=\"#写在前面\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>在3月20日的博客里，我通过代码来理解了一下NIO和BIO的区别，可以看出一部分代码是比较麻烦和复杂的，在项目开发中一般遇到这种普适性的问题，都会有前人造出轮子来让我们使用，而对于NIO的网络编程，最佳的轮子就是Netty。\u003C/p>\n\u003Cp>Netty的语言实现是Java，所以去看源码什么的也会比较容易一点。\u003C/p>\n\u003Ch1 id=\"reactor设计模式\">Reactor设计模式\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to Reactor设计模式\" href=\"#reactor设计模式\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>Netty的核心在于异步、事件驱动。\u003C/p>\n\u003Cp>在了解Netty之前必须先了解Reactor设计模式。\u003C/p>\n\u003Cp>Reactor的翻译是反应堆，其实本质上就是事件驱动模式。\u003C/p>\n\u003Cp>在Reactor模式中，有一些比较重要的概念：\u003C/p>\n\u003Col>\n\u003Cli>事件，Event，对应于Netty中的channelActive、channelRead、channelInactive等等\u003C/li>\n\u003Cli>事件处理器，EventHandler，对应于Netty中的ChannelInboundHandler，对应的事件就要有对应的事件处理逻辑\u003C/li>\n\u003Cli>Reactor，事件分发器，负责响应并分发I/O事件。事件发生了，需要将事件交给对应的事件处理器去处理，在Netty中，对应的工作由EventLoop来执行。\u003C/li>\n\u003Cli>事件多路处理器，Selector，在上一篇博客里我们重点讨论过这个部分，在Netty中，Selector的工作由EventLoop来执行。\u003C/li>\n\u003C/ol>\n\u003Cp>Netty实现了Reactor的三种模型，分别为：\u003C/p>\n\u003Col>\n\u003Cli>单Reactor单线程模型，对应Netty中的单线程模型\u003C/li>\n\u003Cli>单Reactor多线程模型，对应Netty中的多线程模型\u003C/li>\n\u003Cli>主从Reactor多线程模型，对应Netty中的主从多线程模型\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"单线程模型\">单线程模型\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 单线程模型\" href=\"#单线程模型\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>我们在上一篇博客中实现的NIO模式，其实就是单Reactor单线程模式。\u003C/p>\n\u003Cp>只启用一个Selector，这个Selector又要监听Accept事件，获得Channel之后将对应的Channel也注册到同一个Selector上去，这个Selector需要负责监听这个Channel的读写事件以及之前的ServerChannel的注册事件。\u003C/p>\n\u003Cfigure>\u003Cimg src=\"/picture/single_reactor.png\" alt=\"单Reactor\">\u003Cfigcaption>单Reactor\u003C/figcaption>\u003C/figure>\n\u003Cp>这里我用了掘金的图，我觉得画的比较符合我的认知。\u003C/p>\n\u003Cp>那么在我们上篇博客里，服务器的实现代码如下：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.net.InetSocketAddress;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.ByteBuffer;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.SelectionKey;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.Selector;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.ServerSocketChannel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.nio.channels.SocketChannel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Iterator;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Set;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NIOServer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // NIO基于Channel控制，所以有Selector管理所有的Channel\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ServerSocketChannel serverSocketChannel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ServerSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 设置为非阻塞模式\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">configureBlocking\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 设置监听端口\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">bind\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> InetSocketAddress\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 设置Selector管理所有Channel\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Selector selector \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 注册并设置连接时处理\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">register\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(selector, SelectionKey.OP_ACCEPT);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"服务启动成功，监听端口为：\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // NIO使用轮询，当有请求连接时，则启动一个线程\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> keySelect \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isOpen\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">select\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Set&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SelectionKey\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> selectionKeys \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> selector.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">selectedKeys\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Iterator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SelectionKey\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> iterator \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> selectionKeys.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hasNext\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                SelectionKey next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (next.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isAcceptable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {    \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//  如果是连接的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    SocketChannel accept \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">accept\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (accept \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        //把新的会话测channel注册到selector里去，让Selector来管理它\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        accept.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">configureBlocking\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        //并且把它的感兴趣状态变为可读状态\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        accept.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">register\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(selector,SelectionKey.OP_READ);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                //一旦可读了，就代表客户端发来了消息，那我们就去处理这个消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(next.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">isReadable\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">                    handleRead\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(next);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        serverSocketChannel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">close\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //其实处理这个消息我们依然有一处是阻塞的，就是我们返回给客户端的时候，要求客户端是写可用的。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //但是写可用的触发是很多次的，一般都是写可用的，所以我们就没有做过多的干预\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> handleRead\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(SelectionKey \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        SocketChannel channel \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (SocketChannel) key.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ByteBuffer buffer \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ByteBuffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">allocate\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">clear\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> read \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">read\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(buffer);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String msg \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">array\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(), \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, read).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">trim\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"服务端收到消息：\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">msg);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        String outMsg \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"【Echo】\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> msg; \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 生成回应信息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //模拟消息处理时长\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Thread.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sleep\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5000\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">clear\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(outMsg.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getBytes\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());  \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//回传信息放入缓冲区\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        buffer.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">flip\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">write\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(buffer);\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// 回传信息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>那么如果这段代码用Netty实现该如何实现呢？\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.bootstrap.ServerBootstrap;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.channel.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.channel.nio.NioEventLoopGroup;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.channel.socket.nio.NioServerSocketChannel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.handler.codec.http.HttpObjectAggregator;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.handler.codec.http.HttpServerCodec;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.handler.logging.LoggingHandler;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.handler.timeout.IdleStateHandler;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.TimeUnit;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NettyServer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> InterruptedException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ServerBootstrap bootstrap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ServerBootstrap\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        EventLoopGroup singleReactor \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NioEventLoopGroup\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//限制为单线程\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        bootstrap.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">group\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(singleReactor)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                .\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(NioServerSocketChannel.class)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                .\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">handler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> BossLogHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                .\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">childHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ChannelInitializer&#x3C;>() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    protected\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> initChannel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Channel \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        ChannelPipeline channelPipeline \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">pipeline\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        // 添加 HTTP 编解码器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        channelPipeline.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">addLast\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> HttpServerCodec\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        // 聚合 HTTP 消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        channelPipeline.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">addLast\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> HttpObjectAggregator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">65536\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        // 处理 WebSocket 升级请求\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        channelPipeline.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">addLast\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> WebSocketServerProtocolHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"/ws\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        //超时处理器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        channelPipeline.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">addLast\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IdleStateHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, TimeUnit.SECONDS));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        // 自定义处理器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        channelPipeline.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">addLast\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MyChannelHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ChannelFuture future \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bootstrap.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">bind\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"127.0.0.1\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sync\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"服务器启动\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 等待连接关闭\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        future.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">closeFuture\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sync\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>这个服务端实现起来是比较简单的，因为只有一个EventLoop，但其实多线程模式和主从模式其实也只需要稍作修改即可。\u003C/p>\n\u003Cp>单线程模式的优势为：\u003C/p>\n\u003Col>\n\u003Cli>简化并发模型\u003C/li>\n\u003Cli>减少上下文切换的开销\u003C/li>\n\u003Cli>资源消耗低\u003C/li>\n\u003C/ol>\n\u003Cp>存在的问题：\u003C/p>\n\u003Cp>阻塞模式、CPU利用率低、不适合高并发场景\u003C/p>\n\u003Ch2 id=\"多线程模型\">多线程模型\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 多线程模型\" href=\"#多线程模型\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>和单线程模型不同的点在于多了一个handler线程池。\u003C/p>\n\u003Cp>Reactor设计模式的单Reactor多线程模式和Netty的多线程模型其实并不完全对应。\u003C/p>\n\u003Cp>Reactor的单Reactor多线程模式只有一个线程的问题，但是仍然只有一个Reactor在同时监听ACCEPT事件和READ事件。\u003C/p>\n\u003Cp>但是Netty的多线程模式则并不是，所有线程都负责处理连接和数据。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">EventLoopGroup singleReactor \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NioEventLoopGroup\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>就把这个1去掉就行了。\u003C/p>\n\u003Cp>多线程模型的优点包括：\u003C/p>\n\u003Col>\n\u003Cli>提高吞吐率\u003C/li>\n\u003Cli>更好利用多核\u003C/li>\n\u003C/ol>\n\u003Cp>存在的问题：\u003C/p>\n\u003Col>\n\u003Cli>没有区分监听新连接和处理已有连接的读写操作，这种设计可能导致某些线程在处理复杂或耗时的数据处理任务时无法及时响应新的连接请求，从而影响新连接的接受速度。\u003C/li>\n\u003Cli>难以实现有效的负载均衡，所有线程都在执行相似的任务，可能会出现部分线程过载而其他线程空闲的情况，难以实现真正的负载均衡。\u003C/li>\n\u003Cli>资源竞争加剧，所有线程都可以访问I/O、数据库等共享资源\u003C/li>\n\u003C/ol>\n\u003Cp>为了解决这种问题Netty设计出了主从模型。\u003C/p>\n\u003Ch2 id=\"主从模型\">主从模型\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 主从模型\" href=\"#主从模型\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.bootstrap.ServerBootstrap;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.channel.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.channel.nio.NioEventLoopGroup;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.channel.socket.nio.NioServerSocketChannel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.handler.codec.http.HttpObjectAggregator;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.handler.codec.http.HttpServerCodec;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> io.netty.handler.timeout.IdleStateHandler;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.TimeUnit;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NettyServer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> InterruptedException {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ServerBootstrap bootstrap \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ServerBootstrap\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        EventLoopGroup boss \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NioEventLoopGroup\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//限制为单线程\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        EventLoopGroup workers \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NioEventLoopGroup\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">//限制为单线程\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        bootstrap.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">group\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(boss,workers)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                .\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(NioServerSocketChannel.class)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                .\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">handler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> BossLogHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                .\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">childHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ChannelInitializer&#x3C;>() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    protected\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> initChannel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Channel \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Exception {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        ChannelPipeline channelPipeline \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> channel.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">pipeline\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        // 添加 HTTP 编解码器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        channelPipeline.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">addLast\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> HttpServerCodec\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        // 聚合 HTTP 消息\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        channelPipeline.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">addLast\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> HttpObjectAggregator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">65536\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        // 处理 WebSocket 升级请求\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        channelPipeline.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">addLast\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> WebSocketServerProtocolHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"/ws\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        //超时处理器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        channelPipeline.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">addLast\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IdleStateHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, TimeUnit.SECONDS));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">                        // 自定义处理器\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                        channelPipeline.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">addLast\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MyChannelHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ChannelFuture future \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> bootstrap.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">bind\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"127.0.0.1\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">8080\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sync\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"服务器启动\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        // 等待连接关闭\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        future.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">channel\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">closeFuture\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sync\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>通过将线程之间的任务分开，分为负责监听并建立新连接的boss线程池和负责处理已经连接的连接的事件的workers线程池，能够有效实现不同分工的负载均衡。\u003C/p>\n\u003Ch1 id=\"eventloop\">EventLoop\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to EventLoop\" href=\"#eventloop\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>EvenLoop其实是Netty的核心所在，我们常常定义的EventLoopGroup是用来管理EventLoop实例线程池的。常见的实现包括NioEventLoopGroup和EpollEventLoopGroup。\u003C/p>\n\u003Ch3 id=\"nioeventloopgroup\">NioEventLoopGroup\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to NioEventLoopGroup\" href=\"#nioeventloopgroup\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>基于Java NIO\u003C/strong>: NioEventLoopGroup 使用的是 Java 原生的非阻塞 I/O（NIO）API。这意味着它可以跨平台使用，无论是在 Windows、Linux 还是 macOS 上都能正常工作。\u003C/li>\n\u003Cli>\u003Cstrong>跨平台兼容性\u003C/strong>: 由于依赖于标准的 Java NIO 库，因此具有很好的跨平台兼容性。\u003C/li>\n\u003Cli>\u003Cstrong>性能特点\u003C/strong>: 对于大多数应用场景来说，NioEventLoopGroup 提供了足够的性能。然而，在高并发场景下，尤其是在 Linux 系统上，它可能不如 EpollEventLoopGroup 高效。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"epolleventloopgroup\">EpollEventLoopGroup\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to EpollEventLoopGroup\" href=\"#epolleventloopgroup\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>基于Linux的epoll\u003C/strong>: EpollEventLoopGroup是专门为 Linux 系统设计的，它利用了 Linux 特有的 epoll I/O 事件通知机制。相比于 Java NIO 的 select/poll 方法，epoll 在处理大量文件描述符时更加高效，特别是在有大量连接但活跃连接相对较少的情况下。\u003C/li>\n\u003Cli>\u003Cstrong>性能优化\u003C/strong>: 在高负载和高并发场景下，EpollEventLoopGroup 能够提供比 NioEventLoopGroup 更好的性能。这是因为 epoll 能够更有效地管理大量的文件描述符，并且在监听大量连接的同时保持较低的CPU使用率。\u003C/li>\n\u003Cli>\u003Cstrong>限制\u003C/strong>: 只能在 Linux 系统上运行，因为它依赖于 Linux 内核特有的功能。\u003C/li>\n\u003C/ul>\n\u003Cp>就像我想在mac上运行就会报错，只在Linux上支持\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Exception\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> in\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> thread\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"main\"\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> java.lang.UnsatisfiedLinkError:\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> failed\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> to\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> load\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> the\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> required\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> native\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> library\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tat\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> io.netty.channel.epoll.Epoll.ensureAvailability\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Epoll.java:81\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tat\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> io.netty.channel.epoll.EpollEventLoopGroup.\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">clini\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">t\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">>(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">EpollEventLoopGroup.java:41\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tat\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> NettyServer.main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">NettyServer.java:16\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Caused\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> by:\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> java.lang.ExceptionInInitializerError\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tat\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> io.netty.channel.epoll.Epoll.\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">clini\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">t\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">>(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Epoll.java:40\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t...\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> more\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Caused\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> by:\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> java.lang.IllegalStateException:\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> Only\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> supported\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> on\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> Linux\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tat\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> io.netty.channel.epoll.Native.loadNativeLibrary\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Native.java:317\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tat\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> io.netty.channel.epoll.Native.\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">clini\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">t\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">>(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Native.java:85\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">\t...\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> more\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch2 id=\"channel\">Channel\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to Channel\" href=\"#channel\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>Channel其实就是类似于Socket的网络连接，可以是客户端连接或服务器监听端口。Channel负责读写网络数据，并注册到EventLoop中等待事件处理。\u003C/p>\n\u003Cp>而Channel的I/O事件则会交给它的ChannelPipeline来处理，用户可以在ChannelPipeline添加一系列ChannelHandler，包括解码器、聚合器、WebSocketServerProtocolHandler这种http升级ws的Handler以及用户自定义的ChannelHandler（通过继承SimpleChannelInboundHandler或者ChannelInboundHandlerAdapter或者实现ChannelInboundHandler）来定义\u003C/p>\n\u003Ch2 id=\"netty事件驱动模型的工作原理\">Netty事件驱动模型的工作原理\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to Netty事件驱动模型的工作原理\" href=\"#netty事件驱动模型的工作原理\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>Netty的事件驱动模型通过EventLoopGroup、EventLoop、Channel、ChannelPipeline和ChannelHandler之间的协同工作来实现。其工作流程如下：\u003C/p>\n\u003Col>\n\u003Cli>初始化：服务器启动时，创建一个或多个EventLoopGroup，分别用于接收连接和处理I/O操作。\u003C/li>\n\u003Cli>注册Channel：为每个客户端连接创建一个Channel，并将其注册到一个EventLoop中。每个Channel会绑定一个ChannelPipeline。\u003C/li>\n\u003Cli>事件循环：EventLoop在其绑定的线程中不断循环，监听I/O事件。当有事件发生时，EventLoop会将事件分发到ChannelPipeline。\u003C/li>\n\u003Cli>事件处理：ChannelPipeline根据事件类型，将事件传递给相应的ChannelHandler进行处理。ChannelHandler可以处理入站、出站事件，或者进行数据编码、解码等操作。\u003C/li>\n\u003C/ol>",{"headings":496,"localImagePaths":522,"remoteImagePaths":523,"frontmatter":524,"imagePaths":529},[497,498,501,503,505,507,510,513,516,519],{"depth":25,"slug":236,"text":236},{"depth":25,"slug":499,"text":500},"reactor设计模式","Reactor设计模式",{"depth":118,"slug":502,"text":502},"单线程模型",{"depth":118,"slug":504,"text":504},"多线程模型",{"depth":118,"slug":506,"text":506},"主从模型",{"depth":25,"slug":508,"text":509},"eventloop","EventLoop",{"depth":126,"slug":511,"text":512},"nioeventloopgroup","NioEventLoopGroup",{"depth":126,"slug":514,"text":515},"epolleventloopgroup","EpollEventLoopGroup",{"depth":118,"slug":517,"text":518},"channel","Channel",{"depth":118,"slug":520,"text":521},"netty事件驱动模型的工作原理","Netty事件驱动模型的工作原理",[],[],{"title":484,"tags":525,"categories":526,"mathjax":105,"sticky":25,"swiper_index":25,"published":527,"abbrlink":489,"description":486,"minutes":528},[101,488],[144],["Date","2025-03-24T16:43:58.000Z"],12,[],"origin/2025-04-20-设计模式整理",{"id":530,"data":532,"body":539,"filePath":540,"digest":541,"rendered":542},{"title":533,"published":534,"description":535,"tags":536,"draft":103,"pin":104,"toc":105,"lang":106,"abbrlink":538},"设计模式整理",["Date","2025-04-20T16:47:23.000Z"],"系统性地把设计模式都捋一下！",[537,101],"设计模式","constructmode","# 单例模式\n\n单例模式是设计模式中最简单的一种设计模式，常用于数据库连接池、Spring默认的bean等\n\n单例模式是一种**创建型模型**，这个词我们后面还会提到。\n\n一个类负责创建自己的对象，但是需要确保只有一个对象被创建了，这个类提供了一种访问它对象的唯一方式。同时需要隐藏自己的构造方法。\n\n一般单例模式都是支持两种实现思路，一种是饿汉式，一种是懒汉式，饿汉式就是在类加载时就实例化一个对象，而懒汉式则是需要第一次使用的时候才实例化对象，但是懒汉式的实现方式一般需要通过双重校验也就是double cheack的方式来实现。\n\n## 饿汉模式\n\n饿汉式的实现是比较简单的，也就是在类加载的时候就实例化对象，但是存在一个问题，这个类加载了但是我没有使用，会有额外的空间浪费。\n\n```java\npublic class SingletonHungry {\n    private static final SingletonHungry singletonHungry = new SingletonHungry();\n    private SingletonHungry(){}\n    \n    public static SingletonHungry getSingletonHungry(){\n        return singletonHungry;\n    }\n}\n```\n\n## 懒汉模式\n\n```java\npublic class Singleton {\n    /**\n     * 该成员变量也就是唯一实例化的对象\n     */\n    private static volatile Singleton singleton;\n\n    /**\n     * 同时为了防止被初始化，需要将构造函数私有化\n     */\n    private Singleton(){}\n\n    /**\n     * 提供静态方法用来获取唯一单例\n     * @return 单例对象\n     */\n    public static Singleton getSingleton(){\n        if(singleton==null){\n            /*这里需要使用类级别的锁而不是直接锁住singleton的原因是\n            *如果singleton==null，那么就会抛出NullPointerException\n            *异常原因是:Cannot enter synchronized block because \t\t\t\n            *\"Singleton.singleton\" is null\n            */\n            synchronized (Singleton.class){\n                if (singleton==null){\n                    singleton = new Singleton();\n                }\n            }\n        }\n        return singleton;\n    }\n\n    public static void main(String[] args) {\n        Singleton singleton1 = Singleton.getSingleton();\n        Singleton singleton2 = Singleton.getSingleton();\n        System.out.println(singleton1==singleton2);\n    }\n}\n```\n\n# 代理模式\n\n代理模式的核心是，允许通过代理对象控制对被代理对象的访问。主要用于在访问对象时添加额外的功能。\n\n代理模式在Java中可以分为静态代理和动态代理，本质上的目的都是一致的。\n\n只不过静态代理需要手动编写代理类，代理类需要实现与目标相同的接口，在内部需要持有一个目标对象的引用。\n\n动态代理则是运行时动态生成的，不需要为每个对象手动编写代理类，但是目标对象至少必须实现一个接口。\n\n接下来我们就来尝试以对方法加log的任务为例，实现两种代理。\n\n## 共用代码\n\n两种代码都需要有一个接口和对接口的实现，所以在这里定义一个接口和并给出它的一个实现。\n\n其实写到动态代理那块的时候，我才意识到这个Method接口的取名并不太妙，因为Java反射包里就有一个类叫Method，但是事已至此，实在是懒得改了，就先这样。\n\n```java\npackage Proxy;\n\npublic interface Method {\n    public void method();\n}\n```\n\n```java\npackage Proxy;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class MethodImpl implements Method{\n    @Override\n    public void method() {\n        System.out.println(\"Dealing with method\");\n        try {\n            TimeUnit.SECONDS.sleep(10);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n        System.out.println(\"Finished dealing\");\n    }\n}\n\n```\n\n## 静态带来\n\n这时候我们就实现一个方法，来代理这个MethodImpl，目的是要给它加上执行时间的log，当然为了演示简单起见，我们直接打印在控制台上了\n\n```java\npackage Proxy;\n\nimport java.util.Date;\n\npublic class StaticProxy implements Method{\n    private Method target;\n\n    public StaticProxy(Method target){\n        this.target = target;\n    }\n\n    @Override\n    public void method() {\n        Date dateStart = new Date();\n        target.method();\n        Date dateFinished = new Date();\n        long timeCost = dateFinished.getTime()-dateStart.getTime();\n        System.out.println(\"Cost time:\"+timeCost);\n    }\n\n    public static void main(String[] args) {\n        Method staticProxy = new StaticProxy(new MethodImpl());\n        staticProxy.method();\n    }\n}\n```\n\n静态代理其实存在一个问题，灵活性较低，因为每当需要为一个新的服务类型提供代理时，都需要手动去编写相应的代理类。\n\n但是Java为我们提供了动态代理类的实现方式。\n\n## 动态代理\n\n动态代理的实现其实是依赖Java反射包下的`Proxy`类的`newProxyInstance()`方法，需要实现一个`InvocationHandler`接口，并重写`invoke`方法\n\n```java\npackage Proxy;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Proxy;\nimport java.util.Date;\n\npublic class MyDynamicProxy {\n\n    static class MyDynamicProxyHandler implements InvocationHandler{\n        Object target;\n        public MyDynamicProxyHandler(Object target){\n            this.target = target;\n        }\n        @Override\n        public Object invoke(Object proxy, java.lang.reflect.Method method, Object[] args) throws Throwable {\n            Date dateStart = new Date();\n            Object res = method.invoke(target,args);\n            Date dateFinished = new Date();\n            long timeCost = dateFinished.getTime()-dateStart.getTime();\n            System.out.println(\"Cost time:\"+timeCost);\n            return res;\n        }\n    }\n\n    public static Object getProxy(Object method){\n        return Proxy.newProxyInstance(\n                method.getClass().getClassLoader(), method.getClass().getInterfaces(),new MyDynamicProxyHandler(method)\n        );\n    }\n\n    public static void main(String[] args) {\n        Method staticProxy = (Method) MyDynamicProxy.getProxy(new MethodImpl());\n        staticProxy.method();\n    }\n}\n```\n\n# 装饰者模式\n\n 装饰者模式与代理模式看起来似乎有一点相似，但是两者的侧重点不同。\n\n- **代理模式**更侧重于控制对对象的访问，可能包括权限验证、日志记录、延迟加载等功能，而不会改变原有对象的行为。\n- **装饰者模式**则专注于在不改变对象接口的前提下，动态地为其添加新的行为或功能，更加注重功能的扩展性和灵活性。\n\n我们做一个简单的实现就可以理解了。\n\n首先还是定义一个接口，我希望它能提供method方法\n\n```java\npackage Decorate;\n\npublic interface MyMethod {\n    public void method();\n}\n```\n\n然后是对它的实现\n\n```java\npackage Decorate;\n\npublic class OriginMethod implements MyMethod{\n    @Override\n    public void method() {\n        System.out.println(\"It is the origin method\");\n    }\n}\n```\n\n接下来我们要实现装饰器，首先是装饰器要继承原始接口\n\n```java\npackage Decorate;\n\npublic interface MyMethodDecorate extends MyMethod{\n}\n```\n\n然后实现装饰器1\n\n```java\npackage Decorate;\n\npublic class DecorateMethod implements MyMethodDecorate{\n    MyMethod originMethod;\n\n    public DecorateMethod(MyMethod originMethod){\n        this.originMethod = originMethod;\n    }\n\n    @Override\n    public void method() {\n        System.out.println(\"I decorate it with first decoration!\");\n        originMethod.method();\n    }\n}\n```\n\n然后实现装饰器2并调用\n\n```java\npackage Decorate;\n\npublic class DecorateMethod2 implements MyMethodDecorate{\n    MyMethod originMethod;\n\n    public DecorateMethod2(MyMethod originMethod){\n        this.originMethod = originMethod;\n    }\n\n    @Override\n    public void method() {\n        System.out.println(\"I decorate it with second decoration!\");\n        originMethod.method();\n    }\n\n    public static void main(String[] args) {\n        MyMethod originMethod = new OriginMethod();\n        originMethod = new DecorateMethod(originMethod);\n        originMethod = new DecorateMethod2(originMethod);\n        originMethod.method();\n    }\n}\n```\n\n```bash\nI decorate it with second decoration!\nI decorate it with first decoration!\nIt is the origin method\n```\n\n装饰器模式和代理模式的核心差距就在于，装饰器把它装饰成一个功能更多的，更加多样化的内容，而代理模式的核心是控制对代理方法的访问。","src/content/posts/origin/2025-04-20-设计模式整理.md","fb310182786f8471",{"html":543,"metadata":544},"\u003Ch1 id=\"单例模式\">单例模式\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 单例模式\" href=\"#单例模式\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>单例模式是设计模式中最简单的一种设计模式，常用于数据库连接池、Spring默认的bean等\u003C/p>\n\u003Cp>单例模式是一种\u003Cstrong>创建型模型\u003C/strong>，这个词我们后面还会提到。\u003C/p>\n\u003Cp>一个类负责创建自己的对象，但是需要确保只有一个对象被创建了，这个类提供了一种访问它对象的唯一方式。同时需要隐藏自己的构造方法。\u003C/p>\n\u003Cp>一般单例模式都是支持两种实现思路，一种是饿汉式，一种是懒汉式，饿汉式就是在类加载时就实例化一个对象，而懒汉式则是需要第一次使用的时候才实例化对象，但是懒汉式的实现方式一般需要通过双重校验也就是double cheack的方式来实现。\u003C/p>\n\u003Ch2 id=\"饿汉模式\">饿汉模式\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 饿汉模式\" href=\"#饿汉模式\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>饿汉式的实现是比较简单的，也就是在类加载的时候就实例化对象，但是存在一个问题，这个类加载了但是我没有使用，会有额外的空间浪费。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> SingletonHungry\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> SingletonHungry singletonHungry \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> SingletonHungry\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> SingletonHungry\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> SingletonHungry \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getSingletonHungry\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> singletonHungry;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch2 id=\"懒汉模式\">懒汉模式\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 懒汉模式\" href=\"#懒汉模式\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Singleton\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * 该成员变量也就是唯一实例化的对象\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> volatile\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Singleton singleton;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * 同时为了防止被初始化，需要将构造函数私有化\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Singleton\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * 提供静态方法用来获取唯一单例\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@return\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> 单例对象\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Singleton \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getSingleton\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(singleton\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            /*这里需要使用类级别的锁而不是直接锁住singleton的原因是\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            *如果singleton==null，那么就会抛出NullPointerException\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            *异常原因是:Cannot enter synchronized block because \t\t\t\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            *\"Singleton.singleton\" is null\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            synchronized\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (Singleton.class){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (singleton\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                    singleton \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Singleton\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> singleton;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Singleton singleton1 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Singleton.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getSingleton\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Singleton singleton2 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Singleton.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getSingleton\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(singleton1\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">singleton2);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"代理模式\">代理模式\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 代理模式\" href=\"#代理模式\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>代理模式的核心是，允许通过代理对象控制对被代理对象的访问。主要用于在访问对象时添加额外的功能。\u003C/p>\n\u003Cp>代理模式在Java中可以分为静态代理和动态代理，本质上的目的都是一致的。\u003C/p>\n\u003Cp>只不过静态代理需要手动编写代理类，代理类需要实现与目标相同的接口，在内部需要持有一个目标对象的引用。\u003C/p>\n\u003Cp>动态代理则是运行时动态生成的，不需要为每个对象手动编写代理类，但是目标对象至少必须实现一个接口。\u003C/p>\n\u003Cp>接下来我们就来尝试以对方法加log的任务为例，实现两种代理。\u003C/p>\n\u003Ch2 id=\"共用代码\">共用代码\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 共用代码\" href=\"#共用代码\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>两种代码都需要有一个接口和对接口的实现，所以在这里定义一个接口和并给出它的一个实现。\u003C/p>\n\u003Cp>其实写到动态代理那块的时候，我才意识到这个Method接口的取名并不太妙，因为Java反射包里就有一个类叫Method，但是事已至此，实在是懒得改了，就先这样。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">package\u003C/span>\u003Cspan style=\"color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic\"> P\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">roxy;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> interface\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">package\u003C/span>\u003Cspan style=\"color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic\"> P\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">roxy;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.concurrent.TimeUnit;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MethodImpl\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Dealing with method\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            TimeUnit.SECONDS.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sleep\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (InterruptedException \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> RuntimeException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Finished dealing\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch2 id=\"静态带来\">静态带来\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 静态带来\" href=\"#静态带来\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>这时候我们就实现一个方法，来代理这个MethodImpl，目的是要给它加上执行时间的log，当然为了演示简单起见，我们直接打印在控制台上了\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">package\u003C/span>\u003Cspan style=\"color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic\"> P\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">roxy;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Date;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> StaticProxy\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    private\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Method target;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> StaticProxy\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Method \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">target\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.target \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> target;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Date dateStart \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        target.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Date dateFinished \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        long\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> timeCost \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dateFinished.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getTime\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">dateStart.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getTime\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Cost time:\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">timeCost);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Method staticProxy \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> StaticProxy\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MethodImpl\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        staticProxy.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>静态代理其实存在一个问题，灵活性较低，因为每当需要为一个新的服务类型提供代理时，都需要手动去编写相应的代理类。\u003C/p>\n\u003Cp>但是Java为我们提供了动态代理类的实现方式。\u003C/p>\n\u003Ch2 id=\"动态代理\">动态代理\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 动态代理\" href=\"#动态代理\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>动态代理的实现其实是依赖Java反射包下的\u003Ccode>Proxy\u003C/code>类的\u003Ccode>newProxyInstance()\u003C/code>方法，需要实现一个\u003Ccode>InvocationHandler\u003C/code>接口，并重写\u003Ccode>invoke\u003C/code>方法\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">package\u003C/span>\u003Cspan style=\"color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic\"> P\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">roxy;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.lang.reflect.InvocationHandler;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.lang.reflect.Proxy;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Date;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MyDynamicProxy\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MyDynamicProxyHandler\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> InvocationHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Object target;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MyDynamicProxyHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Object \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">target\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">            this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.target \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> target;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Object \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">invoke\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Object \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">proxy\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, java.lang.reflect.Method \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Object\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">throws\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Throwable {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Date dateStart \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Object res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> method.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">invoke\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(target,args);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Date dateFinished \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            long\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> timeCost \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dateFinished.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getTime\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">dateStart.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getTime\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"Cost time:\"\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">timeCost);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Object \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getProxy\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Object \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Proxy.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">newProxyInstance\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                method.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getClass\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getClassLoader\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(), method.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getClass\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getInterfaces\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(),\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MyDynamicProxyHandler\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(method)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Method staticProxy \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (Method) MyDynamicProxy.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getProxy\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MethodImpl\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        staticProxy.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"装饰者模式\">装饰者模式\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 装饰者模式\" href=\"#装饰者模式\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>装饰者模式与代理模式看起来似乎有一点相似，但是两者的侧重点不同。\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>代理模式\u003C/strong>更侧重于控制对对象的访问，可能包括权限验证、日志记录、延迟加载等功能，而不会改变原有对象的行为。\u003C/li>\n\u003Cli>\u003Cstrong>装饰者模式\u003C/strong>则专注于在不改变对象接口的前提下，动态地为其添加新的行为或功能，更加注重功能的扩展性和灵活性。\u003C/li>\n\u003C/ul>\n\u003Cp>我们做一个简单的实现就可以理解了。\u003C/p>\n\u003Cp>首先还是定义一个接口，我希望它能提供method方法\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">package\u003C/span>\u003Cspan style=\"color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic\"> D\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">ecorate;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> interface\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MyMethod\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>然后是对它的实现\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">package\u003C/span>\u003Cspan style=\"color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic\"> D\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">ecorate;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> OriginMethod\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MyMethod\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"It is the origin method\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>接下来我们要实现装饰器，首先是装饰器要继承原始接口\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">package\u003C/span>\u003Cspan style=\"color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic\"> D\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">ecorate;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> interface\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MyMethodDecorate\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MyMethod\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>然后实现装饰器1\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">package\u003C/span>\u003Cspan style=\"color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic\"> D\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">ecorate;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> DecorateMethod\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MyMethodDecorate\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    MyMethod originMethod;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> DecorateMethod\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(MyMethod \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">originMethod\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.originMethod \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> originMethod;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"I decorate it with first decoration!\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        originMethod.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>然后实现装饰器2并调用\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">package\u003C/span>\u003Cspan style=\"color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic\"> D\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">ecorate;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> DecorateMethod2\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> MyMethodDecorate\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    MyMethod originMethod;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> DecorateMethod2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(MyMethod \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">originMethod\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.originMethod \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> originMethod;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"I decorate it with second decoration!\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        originMethod.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        MyMethod originMethod \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> OriginMethod\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        originMethod \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> DecorateMethod\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(originMethod);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        originMethod \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> DecorateMethod2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(originMethod);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        originMethod.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">method\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">I\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> decorate\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> it\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> with\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> second\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> decoration!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">I\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> decorate\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> it\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> with\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> first\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> decoration!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">It\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> is\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> the\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> origin\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> method\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>装饰器模式和代理模式的核心差距就在于，装饰器把它装饰成一个功能更多的，更加多样化的内容，而代理模式的核心是控制对代理方法的访问。\u003C/p>",{"headings":545,"localImagePaths":562,"remoteImagePaths":563,"frontmatter":564,"imagePaths":568},[546,548,550,552,554,556,558,560],{"depth":25,"slug":547,"text":547},"单例模式",{"depth":118,"slug":549,"text":549},"饿汉模式",{"depth":118,"slug":551,"text":551},"懒汉模式",{"depth":25,"slug":553,"text":553},"代理模式",{"depth":118,"slug":555,"text":555},"共用代码",{"depth":118,"slug":557,"text":557},"静态带来",{"depth":118,"slug":559,"text":559},"动态代理",{"depth":25,"slug":561,"text":561},"装饰者模式",[],[],{"title":533,"tags":565,"categories":566,"mathjax":105,"description":535,"abbrlink":538,"published":567,"minutes":216},[537,101],[537],["Date","2025-04-20T16:47:23.000Z"],[],"origin/2025-04-15-删除集合中的元素",{"id":569,"data":571,"body":577,"filePath":578,"digest":579,"rendered":580},{"title":572,"published":573,"description":574,"tags":575,"draft":103,"pin":104,"toc":105,"lang":106,"abbrlink":576},"Java删除集合中的元素",["Date","2025-04-15T23:29:33.000Z"],"简单做一点实验看看如何删除Java集合中的元素，感谢面试让我逐渐了解很很多打破我认知壁的东西。",[101,323],"delete-ele-from-collection","# 写在前面\n\n我真的了解Java吗？这其实是我经常好奇的问题之一，什么叫了解一门语言。会用？能用？遇到问题会解决问题？\n\n当然这只是随意的漫谈，聊回这篇博客本来的问题，如何删除集合中为固定值的元素。\n\n# 问题描述\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CollectionDelete {\n    public static void main(String[] args) {\n        List\u003CString> stringList = new ArrayList\u003C>();\n        stringList.add(\"hello\");\n        stringList.add(\"zhima\");\n        stringList.add(\"good\");\n        stringList.add(\"luck\");\n        stringList.add(\"karlyn\");\n        stringList.add(\"zhima\");\n        //假设我有这样一个List，我要删除集合里值为“zhima”的元素，我该如何删除呢\n      \t//是否可以像下面这样的删除方法删除呢\n        for (String str:stringList){\n            if(str.equals(\"zhima\")){\n                stringList.remove(str);\n            }\n        }\n    }\n}\n```\n\n答案是否定的，会抛出异常\n\n```bash\nException in thread \"main\" java.util.ConcurrentModificationException\n\tat java.base/java.util.ArrayList$Itr.checkForComodification(ArrayList.java:1013)\n\tat java.base/java.util.ArrayList$Itr.next(ArrayList.java:967)\n\tat CollectionDelete.main(CollectionDelete.java:14)\n```\n\n# 探究原因\n\n其实我们应该能理解无法删除的原因，因为还在遍历这个集合，但是我们已经在修改这个集合了，其实这是不合理的，这会导致我们遍历的错误。但是我们还是要从源码的角度来看看，抛这个异常是怎么实现的。\n\n首先，异常并不是在删除的时候抛出，而是删除完成之后，去寻找下一个元素的时被抛出的，所以抛出这个异常的不是remove方法，而是`for (String str:stringList)`的操作\n\n这个操作叫做增强型循环，也叫for-each循环，是Java中典型的语法糖之一，这个语法糖在编译的时候有两种情况。\n\n如果遍历的是一个数组的话，编译的时候等价于\n\n```java\nint[] numbers = {1, 2, 3, 4, 5};\nfor (int i = 0; i \u003C numbers.length; i++) {\n    int num = numbers[i];\n    System.out.println(num);\n}\n```\n\n如果是集合的话，编译的时候等价于\n\n```java\nList\u003CString> stringList = new ArrayList\u003C>();\nstringList.add(\"hello\");\nstringList.add(\"world\");\n\nIterator\u003CString> iterator = stringList.iterator();\nwhile (iterator.hasNext()) {\n    String str = iterator.next();\n    System.out.println(str);\n}\n```\n\n然后我们再来看看ArrayList的Itr的定义\n\n```java\nprivate class Itr implements Iterator\u003CE> {\n    int cursor;       // index of next element to return\n    int lastRet = -1; // index of last element returned; -1 if no such\n    int expectedModCount = modCount;\n\n    // prevent creating a synthetic constructor\n    Itr() {}\n\n    public boolean hasNext() {\n        return cursor != size;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E next() {\n        checkForComodification();\n        int i = cursor;\n        if (i >= size)\n            throw new NoSuchElementException();\n        Object[] elementData = ArrayList.this.elementData;\n        if (i >= elementData.length)\n            throw new ConcurrentModificationException();\n        cursor = i + 1;\n        return (E) elementData[lastRet = i];\n    }\n```\n\n这里我们，当调用Itr.next()方法的时候会调用`checkForComodification();`方法\n\n这个方法实际上是什么呢？\n\n```java\nfinal void checkForComodification() {\n    if (modCount != expectedModCount)\n        throw new ConcurrentModificationException();\n}\n```\n\n比较修改次数是否和期待的修改次数相同，在定义迭代器的时候，会直接设置为List的modCount值，而如果调用List.remove操作，则会修改modCount的值，具体见下面的源码\n\n```java\n/**\n * Removes the first occurrence of the specified element from this list,\n * if it is present.  If the list does not contain the element, it is\n * unchanged.  More formally, removes the element with the lowest index\n * {@code i} such that\n * {@code Objects.equals(o, get(i))}\n * (if such an element exists).  Returns {@code true} if this list\n * contained the specified element (or equivalently, if this list\n * changed as a result of the call).\n *\n * @param o element to be removed from this list, if present\n * @return {@code true} if this list contained the specified element\n */\npublic boolean remove(Object o) {\n    final Object[] es = elementData;\n    final int size = this.size;\n    int i = 0;\n    found: {\n        if (o == null) {\n            for (; i \u003C size; i++)\n                if (es[i] == null)\n                    break found;\n        } else {\n            for (; i \u003C size; i++)\n                if (o.equals(es[i]))\n                    break found;\n        }\n        return false;\n    }\n    fastRemove(es, i);\n    return true;\n}\n\n/**\n * Private remove method that skips bounds checking and does not\n * return the value removed.\n */\nprivate void fastRemove(Object[] es, int i) {\n    modCount++;\n    final int newSize;\n    if ((newSize = size - 1) > i)\n        System.arraycopy(es, i + 1, es, i, newSize - i);\n    es[size = newSize] = null;\n}\n```\n\n使用增强型循环的时候，其实并没有新建一个迭代器，而是直接使用了ArrayList的内部类Itr的next方法，该方法会用expectedModCount和ArrayList对象的modCount进行比较。\n\n```java\n/**\n * Returns an iterator over the elements in this list in proper sequence.\n *\n * \u003Cp>The returned iterator is \u003Ca href=\"#fail-fast\">\u003Ci>fail-fast\u003C/i>\u003C/a>.\n *\n * @return an iterator over the elements in this list in proper sequence\n */\npublic Iterator\u003CE> iterator() {\n    return new Itr();\n}\n```\n\n所以我们的for-each循环里的删除之后，再次调用迭代器之后就会出现迭代器期待的修改次数和实际修改次数的不匹配。\n\n# 如何删除\n\n那么实际上该如何删除呢？\n\n迭代器为我们提供了一种删除方式。\n\n```java\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class CollectionDelete {\n    public static void main(String[] args) {\n        List\u003CString> stringList = new ArrayList\u003C>();\n        stringList.add(\"hello\");\n        stringList.add(\"zhima\");\n        stringList.add(\"good\");\n        stringList.add(\"luck\");\n        stringList.add(\"karlyn\");\n        stringList.add(\"zhima\");\n        Iterator\u003CString> stringIterator = stringList.iterator();\n        //假设我有这样一个List，我要删除集合里值为“zhima”的元素，我该如何删除呢\n        while(stringIterator.hasNext()){\n            String str = stringIterator.next();\n            if(str.equals(\"zhima\")){\n                stringIterator.remove();\n            }\n        }\n      \tSystem.out.println(stringList);\n    }\n}\n```\n\n也就是通过迭代器删除。\n\n```bash\n[hello, good, luck, karlyn]\n```\n\n那么迭代器的删除是如何实现的呢？\n\n```java\npublic void remove() {\n    if (lastRet \u003C 0)\n        throw new IllegalStateException();\n    checkForComodification();\n\n    try {\n        ArrayList.this.remove(lastRet);\n        cursor = lastRet;\n        lastRet = -1;\n        expectedModCount = modCount;\n    } catch (IndexOutOfBoundsException ex) {\n        throw new ConcurrentModificationException();\n    }\n}\n```\n\n其实就是多做了一步工作，也就是更新了`expectedModCount`，这样他就会与modCount一致了，在进行下一次next()方法调用的时候就不会报错了。\n\n# 如果是Map呢？\n\n如果这段代码要删除的是Map中Value为指定值的Value呢？该如何删除呢？\n\n```java\nimport java.util.*;\n\npublic class CollectionDelete {\n    public static void main(String[] args) {\n        HashMap\u003CInteger, String> map = new HashMap\u003C>();\n        map.put(1, \"AA\");\n        map.put(2, \"BB\");\n        map.put(3, \"AA\");\n        map.put(4, \"CC\");\n\n        Iterator\u003CMap.Entry\u003CInteger, String>> iterator = map.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry\u003CInteger, String> entry = iterator.next();\n            if (\"AA\".equals(entry.getValue())) {\n                iterator.remove();\n            }\n        }\n\n        System.out.println(map);\n    }\n}\n```\n\n那这时候其实我就又一点疑惑，我能不能用KeySet作为迭代器，然后使用迭代器删除KeySet中的Key呢？\n\n同时我们又回存在疑惑，如果删除KeySet中的Key，但是没有处理Value，会不会有内存泄漏的风险呢？\n\n```java\nimport java.util.*;\n\npublic class CollectionDelete {\n    public static void main(String[] args) {\n        HashMap\u003CInteger, String> map = new HashMap\u003C>();\n        map.put(1, \"AA\");\n        map.put(2, \"BB\");\n        map.put(3, \"AA\");\n        map.put(4, \"CC\");\n\n        Iterator\u003CInteger> iterator = map.keySet().iterator();\n        while (iterator.hasNext()) {\n            Integer key = iterator.next();\n            if (\"AA\".equals(map.get(key))) {\n                iterator.remove();\n            }\n        }\n\n        System.out.println(map);\n    }\n}\n```\n\n首先，回答第一个问题，能否删除，答案是能删除。\n\n输出结果为：\n\n```bash\n{2=BB, 4=CC}\n```\n\n那么会不会造成Value的内存泄漏呢？也就是说，是否还有指向Value的引用呢？或者说，再直白一些，HashMap的value集合是否还能获取到value呢？\n\n我们先看看EntrySet的iterator方法。\n\n```java\npublic final Iterator\u003CMap.Entry\u003CK,V>> iterator() {\n            return new EntryIterator();\n        }\n```\n\n然后我们接下来看找到EntryIterator，发现它继承了抽象类HashIterator\n\n```java\n    final class EntryIterator extends HashIterator\n        implements Iterator\u003CMap.Entry\u003CK,V>> {\n        public final Map.Entry\u003CK,V> next() { return nextNode(); }\n    }\n\n```\n\n那么我们接下来再看看KeySet的iterator方法\n\n```java\nfinal class KeySet extends AbstractSet\u003CK> {\n    public final int size()                 { return size; }\n    public final void clear()               { HashMap.this.clear(); }\n    public final Iterator\u003CK> iterator()     { return new KeyIterator(); }\n```\n\n```java\nfinal class KeyIterator extends HashIterator\n    implements Iterator\u003CK> {\n    public final K next() { return nextNode().key; }\n}\n\nfinal class ValueIterator extends HashIterator\n    implements Iterator\u003CV> {\n    public final V next() { return nextNode().value; }\n}\n```\n\n可以看到，无论是KeySet还是ValueSet的迭代器都是继承了HashIterator这个抽象类，那么他们是怎么提供删除的呢？\n\n```java\nabstract class HashIterator {\n    Node\u003CK,V> next;        // next entry to return\n    Node\u003CK,V> current;     // current entry\n    int expectedModCount;  // for fast-fail\n    int index;             // current slot\n\n    HashIterator() {\n        expectedModCount = modCount;\n        Node\u003CK,V>[] t = table;\n        current = next = null;\n        index = 0;\n        if (t != null && size > 0) { // advance to first entry\n            do {} while (index \u003C t.length && (next = t[index++]) == null);\n        }\n    }\n\n    public final boolean hasNext() {\n        return next != null;\n    }\n\n    final Node\u003CK,V> nextNode() {\n        Node\u003CK,V>[] t;\n        Node\u003CK,V> e = next;\n        if (modCount != expectedModCount)\n            throw new ConcurrentModificationException();\n        if (e == null)\n            throw new NoSuchElementException();\n        if ((next = (current = e).next) == null && (t = table) != null) {\n            do {} while (index \u003C t.length && (next = t[index++]) == null);\n        }\n        return e;\n    }\n\n    public final void remove() {\n        Node\u003CK,V> p = current;\n        if (p == null)\n            throw new IllegalStateException();\n        if (modCount != expectedModCount)\n            throw new ConcurrentModificationException();\n        current = null;\n        removeNode(p.hash, p.key, null, false, false);\n        expectedModCount = modCount;\n    }\n}\n```\n\n这时候我们就发现了，它删除的其实就是current的Node，也就是说，其实删除的就是key value对。\n\n或者换而言之，KeySet的迭代器，其实就是EntrySet的迭代器，只不过重写了next方法，让next的输出更少了一些。\n\n至此，本文完结！\n\n稚嫩的一次源码解读，写的不好，烦请见谅。\n\n# 补充一条\n\n其实在做这个实验的时候，我还发现了另一点\n\n```java\nList\u003CString> stringList = Arrays.asList(new String[]{\"hello\",\"zhima\",\"karlyn\",\"nice\",\"day\",\"good\",\"luck\",\"zhima\"});\n```\n\n使用Arrays.asList创建的List不能修改，也就是没有实现List接口的remove方法，如果对他remove的话，会报错不支持的操作异常,UnsupportedOperationException\n\n这点在迭代器的接口里也考虑到了，真优雅啊Java：\n\n```java\n/**\n * Removes from the underlying collection the last element returned\n * by this iterator (optional operation).  This method can be called\n * only once per call to {@link #next}.\n * \u003Cp>\n * The behavior of an iterator is unspecified if the underlying collection\n * is modified while the iteration is in progress in any way other than by\n * calling this method, unless an overriding class has specified a\n * concurrent modification policy.\n * \u003Cp>\n * The behavior of an iterator is unspecified if this method is called\n * after a call to the {@link #forEachRemaining forEachRemaining} method.\n *\n * @implSpec\n * The default implementation throws an instance of\n * {@link UnsupportedOperationException} and performs no other action.\n *\n * @throws UnsupportedOperationException if the {@code remove}\n *         operation is not supported by this iterator\n *\n * @throws IllegalStateException if the {@code next} method has not\n *         yet been called, or the {@code remove} method has already\n *         been called after the last call to the {@code next}\n *         method\n */\ndefault void remove() {\n    throw new UnsupportedOperationException(\"remove\");\n}\n```\n\n## 不能修改的原因\n\n通过 `Arrays.asList()` 创建的 `List` 是一个固定大小的列表（fixed-size list），它不能直接进行结构性修改（如添加或删除元素）。这是因为 `Arrays.asList()` 返回的是一个由数组支持的 `List` 实现，而不是一个普通的 `ArrayList`。\n\n### 具体原因\n\n1. **`Arrays.asList()` 的实现**：\n   - `Arrays.asList()` 方法返回的是 `java.util.Arrays.ArrayList`，这是 `Arrays` 类中的一个内部静态类，而不是 `java.util.ArrayList`。\n   - 这个内部类的实现是对原始数组的一个包装，它的大小是固定的，与原始数组共享数据。\n2. **固定大小的限制**：\n   - 因为底层仍然是数组，所以不能动态调整大小。任何试图改变列表大小的操作（如 `add()` 或 `remove()`）都会抛出 `UnsupportedOperationException`。\n   - 但是，你可以对列表中的元素进行修改（例如通过索引设置新值），因为这不会改变数组的大小。\n\n看源码！\n\n```java\npublic static \u003CT> List\u003CT> asList(T... a) {\n    return new ArrayList\u003C>(a);\n}\n\nprivate static class ArrayList\u003CE> extends AbstractList\u003CE>\n        implements RandomAccess, java.io.Serializable\n    {\n        @java.io.Serial\n        private static final long serialVersionUID = -2764017481108945198L;\n        @SuppressWarnings(\"serial\") // Conditionally serializable\n        private final E[] a;\n\n        ArrayList(E[] array) {\n            a = Objects.requireNonNull(array);\n        }\n\n        @Override\n        public int size() {\n            return a.length;\n        }\n\n        @Override\n        public Object[] toArray() {\n            return Arrays.copyOf(a, a.length, Object[].class);\n        }\n\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        public \u003CT> T[] toArray(T[] a) {\n            int size = size();\n            if (a.length \u003C size)\n                return Arrays.copyOf(this.a, size,\n                                     (Class\u003C? extends T[]>) a.getClass());\n            System.arraycopy(this.a, 0, a, 0, size);\n            if (a.length > size)\n                a[size] = null;\n            return a;\n        }\n\n        @Override\n        public E get(int index) {\n            return a[index];\n        }\n\n        @Override\n        public E set(int index, E element) {\n            E oldValue = a[index];\n            a[index] = element;\n            return oldValue;\n        }\n\n        @Override\n        public int indexOf(Object o) {\n            E[] a = this.a;\n            if (o == null) {\n                for (int i = 0; i \u003C a.length; i++)\n                    if (a[i] == null)\n                        return i;\n            } else {\n                for (int i = 0; i \u003C a.length; i++)\n                    if (o.equals(a[i]))\n                        return i;\n            }\n            return -1;\n        }\n\n        @Override\n        public boolean contains(Object o) {\n            return indexOf(o) >= 0;\n        }\n\n        @Override\n        public Spliterator\u003CE> spliterator() {\n            return Spliterators.spliterator(a, Spliterator.ORDERED);\n        }\n\n        @Override\n        public void forEach(Consumer\u003C? super E> action) {\n            Objects.requireNonNull(action);\n            for (E e : a) {\n                action.accept(e);\n            }\n        }\n\n        @Override\n        public void replaceAll(UnaryOperator\u003CE> operator) {\n            Objects.requireNonNull(operator);\n            E[] a = this.a;\n            for (int i = 0; i \u003C a.length; i++) {\n                a[i] = operator.apply(a[i]);\n            }\n        }\n\n        @Override\n        public void sort(Comparator\u003C? super E> c) {\n            Arrays.sort(a, c);\n        }\n\n        @Override\n        public Iterator\u003CE> iterator() {\n            return new ArrayItr\u003C>(a);\n        }\n    }\n```\n\n注意我们看这个ArrayList，它其实是Arrays的一个内部类！\n\n这也可以解释为什么asList一定要传引用类型的数组了，因为定义了范型！\n\n为什么它能不实现remove和add接口呢？\n\n那当然是因为它继承了抽象类AbstractList啊，这个抽象类直接对这两个方法抛异常了！\n\n```java\npublic abstract class AbstractList\u003CE> extends AbstractCollection\u003CE> implements List\u003CE> {\n    /**\n     * Sole constructor.  (For invocation by subclass constructors, typically\n     * implicit.)\n     */\n    protected AbstractList() {\n    }\n\n    /**\n     * Appends the specified element to the end of this list (optional\n     * operation).\n     *\n     * \u003Cp>Lists that support this operation may place limitations on what\n     * elements may be added to this list.  In particular, some\n     * lists will refuse to add null elements, and others will impose\n     * restrictions on the type of elements that may be added.  List\n     * classes should clearly specify in their documentation any restrictions\n     * on what elements may be added.\n     *\n     * @implSpec\n     * This implementation calls {@code add(size(), e)}.\n     *\n     * \u003Cp>Note that this implementation throws an\n     * {@code UnsupportedOperationException} unless\n     * {@link #add(int, Object) add(int, E)} is overridden.\n     *\n     * @param e element to be appended to this list\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws UnsupportedOperationException if the {@code add} operation\n     *         is not supported by this list\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this list\n     * @throws NullPointerException if the specified element is null and this\n     *         list does not permit null elements\n     * @throws IllegalArgumentException if some property of this element\n     *         prevents it from being added to this list\n     */\n    public boolean add(E e) {\n        add(size(), e);\n        return true;\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     */\n    public abstract E get(int index);\n\n    /**\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation always throws an\n     * {@code UnsupportedOperationException}.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     * @throws IndexOutOfBoundsException     {@inheritDoc}\n     */\n    public E set(int index, E element) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation always throws an\n     * {@code UnsupportedOperationException}.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     * @throws IndexOutOfBoundsException     {@inheritDoc}\n     */\n    public void add(int index, E element) {\n        throw new UnsupportedOperationException();\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * This implementation always throws an\n     * {@code UnsupportedOperationException}.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws IndexOutOfBoundsException     {@inheritDoc}\n     */\n    public E remove(int index) {\n        throw new UnsupportedOperationException();\n    }\n```\n\n其实ArrayList也继承了抽象类AbstractList，但是它自己重写了这两个方法！\n\n至此，大完结！","src/content/posts/origin/2025-04-15-删除集合中的元素.md","fa306f9988bf2a8b",{"html":581,"metadata":582},"\u003Ch1 id=\"写在前面\">写在前面\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 写在前面\" href=\"#写在前面\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>我真的了解Java吗？这其实是我经常好奇的问题之一，什么叫了解一门语言。会用？能用？遇到问题会解决问题？\u003C/p>\n\u003Cp>当然这只是随意的漫谈，聊回这篇博客本来的问题，如何删除集合中为固定值的元素。\u003C/p>\n\u003Ch1 id=\"问题描述\">问题描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 问题描述\" href=\"#问题描述\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.ArrayList;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.List;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> CollectionDelete\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        List&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> stringList \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ArrayList&#x3C;>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"hello\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"zhima\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"good\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"luck\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"karlyn\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"zhima\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //假设我有这样一个List，我要删除集合里值为“zhima”的元素，我该如何删除呢\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//是否可以像下面这样的删除方法删除呢\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (String str\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">stringList){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(str.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">equals\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"zhima\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(str);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>答案是否定的，会抛出异常\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Exception\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> in\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> thread\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"main\"\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> java.util.ConcurrentModificationException\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tat\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> java.base/java.util.ArrayList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">$Itr\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">.checkForComodification\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">ArrayList.java:1013\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tat\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> java.base/java.util.ArrayList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">$Itr\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">.next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">ArrayList.java:967\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tat\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> CollectionDelete.main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">CollectionDelete.java:14\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"探究原因\">探究原因\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 探究原因\" href=\"#探究原因\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>其实我们应该能理解无法删除的原因，因为还在遍历这个集合，但是我们已经在修改这个集合了，其实这是不合理的，这会导致我们遍历的错误。但是我们还是要从源码的角度来看看，抛这个异常是怎么实现的。\u003C/p>\n\u003Cp>首先，异常并不是在删除的时候抛出，而是删除完成之后，去寻找下一个元素的时被抛出的，所以抛出这个异常的不是remove方法，而是\u003Ccode>for (String str:stringList)\u003C/code>的操作\u003C/p>\n\u003Cp>这个操作叫做增强型循环，也叫for-each循环，是Java中典型的语法糖之一，这个语法糖在编译的时候有两种情况。\u003C/p>\n\u003Cp>如果遍历的是一个数组的话，编译的时候等价于\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] numbers \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> numbers.length; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> numbers[i];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(num);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>如果是集合的话，编译的时候等价于\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">List&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> stringList \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ArrayList&#x3C;>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"hello\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"world\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">Iterator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> iterator \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hasNext\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    String str \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(str);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>然后我们再来看看ArrayList的Itr的定义\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Itr\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cursor;       \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// index of next element to return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> lastRet \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// index of last element returned; -1 if no such\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> expectedModCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> modCount;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    // prevent creating a synthetic constructor\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">    Itr\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> boolean\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> hasNext\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cursor \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SuppressWarnings\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"unchecked\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> E \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">        checkForComodification\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cursor;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NoSuchElementException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        Object\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] elementData \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ArrayList.this.elementData;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> elementData.length)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ConcurrentModificationException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        cursor \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (E) elementData[lastRet \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>这里我们，当调用Itr.next()方法的时候会调用\u003Ccode>checkForComodification();\u003C/code>方法\u003C/p>\n\u003Cp>这个方法实际上是什么呢？\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> checkForComodification\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (modCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> expectedModCount)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ConcurrentModificationException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>比较修改次数是否和期待的修改次数相同，在定义迭代器的时候，会直接设置为List的modCount值，而如果调用List.remove操作，则会修改modCount的值，具体见下面的源码\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Removes the first occurrence of the specified element from this list,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * if it is present.  If the list does not contain the element, it is\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * unchanged.  More formally, removes the element with the lowest index\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * {@code i} such that\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * {@code Objects.equals(o, get(i))}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * (if such an element exists).  Returns {@code true} if this list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * contained the specified element (or equivalently, if this list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * changed as a result of the call).\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> o\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> element to be removed from this list, if present\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@return\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> {@code true} if this list contained the specified element\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> boolean\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Object o) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> Object\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] es \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> elementData;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.size;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    found\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (o \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (; i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (es[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> found;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (; i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (o.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">equals\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(es[i]))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    break\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> found;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">    fastRemove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(es, i);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Private remove method that skips bounds checking and does not\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * return the value removed.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fastRemove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Object\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] es, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    modCount\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> newSize;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((newSize \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">arraycopy\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(es, i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, es, i, newSize \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    es[size \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> newSize] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>使用增强型循环的时候，其实并没有新建一个迭代器，而是直接使用了ArrayList的内部类Itr的next方法，该方法会用expectedModCount和ArrayList对象的modCount进行比较。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Returns an iterator over the elements in this list in proper sequence.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * &#x3C;p>The returned iterator is &#x3C;a href=\"#fail-fast\">&#x3C;i>fail-fast&#x3C;/i>&#x3C;/a>.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@return\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> an iterator over the elements in this list in proper sequence\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Iterator\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">E\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Itr\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>所以我们的for-each循环里的删除之后，再次调用迭代器之后就会出现迭代器期待的修改次数和实际修改次数的不匹配。\u003C/p>\n\u003Ch1 id=\"如何删除\">如何删除\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 如何删除\" href=\"#如何删除\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>那么实际上该如何删除呢？\u003C/p>\n\u003Cp>迭代器为我们提供了一种删除方式。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.ArrayList;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.Iterator;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.List;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> CollectionDelete\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        List&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> stringList \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ArrayList&#x3C;>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"hello\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"zhima\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"good\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"luck\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"karlyn\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"zhima\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Iterator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> stringIterator \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> stringList.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //假设我有这样一个List，我要删除集合里值为“zhima”的元素，我该如何删除呢\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(stringIterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hasNext\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            String str \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> stringIterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(str.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">equals\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"zhima\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                stringIterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">      \tSystem.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(stringList);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>也就是通过迭代器删除。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[hello, good, luck, karlyn]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>那么迭代器的删除是如何实现的呢？\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (lastRet \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IllegalStateException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">    checkForComodification\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    try\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ArrayList.this.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(lastRet);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        cursor \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> lastRet;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        lastRet \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        expectedModCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> modCount;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (IndexOutOfBoundsException \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">ex\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ConcurrentModificationException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>其实就是多做了一步工作，也就是更新了\u003Ccode>expectedModCount\u003C/code>，这样他就会与modCount一致了，在进行下一次next()方法调用的时候就不会报错了。\u003C/p>\n\u003Ch1 id=\"如果是map呢\">如果是Map呢？\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 如果是Map呢？\" href=\"#如果是map呢\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>如果这段代码要删除的是Map中Value为指定值的Value呢？该如何删除呢？\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> CollectionDelete\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        HashMap&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Integer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> map \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> HashMap&#x3C;>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        map.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"AA\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        map.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"BB\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        map.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"AA\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        map.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"CC\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Iterator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Map\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Entry\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Integer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>> iterator \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> map.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">entrySet\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hasNext\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Map.Entry&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Integer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> entry \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"AA\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">equals\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(entry.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getValue\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">())) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(map);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>那这时候其实我就又一点疑惑，我能不能用KeySet作为迭代器，然后使用迭代器删除KeySet中的Key呢？\u003C/p>\n\u003Cp>同时我们又回存在疑惑，如果删除KeySet中的Key，但是没有处理Value，会不会有内存泄漏的风险呢？\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">import\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> java.util.\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> CollectionDelete\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">args\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        HashMap&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Integer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> map \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> HashMap&#x3C;>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        map.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"AA\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        map.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"BB\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        map.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"AA\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        map.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"CC\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Iterator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Integer\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> iterator \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> map.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">keySet\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">hasNext\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Integer key \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"AA\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">equals\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(map.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(key))) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                iterator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        System.out.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">println\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(map);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>首先，回答第一个问题，能否删除，答案是能删除。\u003C/p>\n\u003Cp>输出结果为：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{2=BB, 4=CC}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>那么会不会造成Value的内存泄漏呢？也就是说，是否还有指向Value的引用呢？或者说，再直白一些，HashMap的value集合是否还能获取到value呢？\u003C/p>\n\u003Cp>我们先看看EntrySet的iterator方法。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Iterator\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">Map.Entry\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">K,V\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>>\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> EntryIterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>然后我们接下来看找到EntryIterator，发现它继承了抽象类HashIterator\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> EntryIterator\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> HashIterator\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Map\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Entry\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Map.Entry&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() { \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">return\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> nextNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>那么我们接下来再看看KeySet的iterator方法\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> KeySet\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> AbstractSet\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> size\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()                 { \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> clear\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()               { HashMap.this.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">clear\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Iterator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">()     { \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">return\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> KeyIterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(); }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> KeyIterator\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> HashIterator\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> K \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() { \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">return\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> nextNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().key; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ValueIterator\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> HashIterator\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> V \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">next\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() { \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">return\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> nextNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">().value; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>可以看到，无论是KeySet还是ValueSet的迭代器都是继承了HashIterator这个抽象类，那么他们是怎么提供删除的呢？\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">abstract\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> HashIterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> next;        \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// next entry to return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> current;     \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// current entry\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> expectedModCount;  \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// for fast-fail\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> index;             \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// current slot\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">    HashIterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        expectedModCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> modCount;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>[] t \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> table;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        current \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        index \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (t \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) { \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// advance to first entry\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            do\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {} \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (index \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t.length \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t[index\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> boolean\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> hasNext\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    final\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">nextNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>[] t;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (modCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> expectedModCount)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ConcurrentModificationException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NoSuchElementException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ((next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (current \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e).next) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (t \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> table) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            do\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {} \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (index \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t.length \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (next \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> t[index\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        Node&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">K\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">V\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> p \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> current;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (p \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IllegalStateException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (modCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> expectedModCount)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ConcurrentModificationException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        current \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">        removeNode\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(p.hash, p.key, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        expectedModCount \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> modCount;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>这时候我们就发现了，它删除的其实就是current的Node，也就是说，其实删除的就是key value对。\u003C/p>\n\u003Cp>或者换而言之，KeySet的迭代器，其实就是EntrySet的迭代器，只不过重写了next方法，让next的输出更少了一些。\u003C/p>\n\u003Cp>至此，本文完结！\u003C/p>\n\u003Cp>稚嫩的一次源码解读，写的不好，烦请见谅。\u003C/p>\n\u003Ch1 id=\"补充一条\">补充一条\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 补充一条\" href=\"#补充一条\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>其实在做这个实验的时候，我还发现了另一点\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">List&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> stringList \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Arrays.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">asList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">new\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> String\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[]{\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"hello\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"zhima\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"karlyn\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"nice\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"day\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"good\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"luck\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"zhima\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>使用Arrays.asList创建的List不能修改，也就是没有实现List接口的remove方法，如果对他remove的话，会报错不支持的操作异常,UnsupportedOperationException\u003C/p>\n\u003Cp>这点在迭代器的接口里也考虑到了，真优雅啊Java：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Removes from the underlying collection the last element returned\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * by this iterator (optional operation).  This method can be called\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * only once per call to {@link #next}.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * &#x3C;p>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * The behavior of an iterator is unspecified if the underlying collection\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * is modified while the iteration is in progress in any way other than by\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * calling this method, unless an overriding class has specified a\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * concurrent modification policy.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * &#x3C;p>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * The behavior of an iterator is unspecified if this method is called\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * after a call to the {@link #forEachRemaining forEachRemaining} method.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * @implSpec\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * The default implementation throws an instance of\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * {@link UnsupportedOperationException} and performs no other action.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> UnsupportedOperationException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> if the {@code remove}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *         operation is not supported by this iterator\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IllegalStateException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> if the {@code next} method has not\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *         yet been called, or the {@code remove} method has already\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *         been called after the last call to the {@code next}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> *         method\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">default\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> UnsupportedOperationException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"remove\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch2 id=\"不能修改的原因\">不能修改的原因\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 不能修改的原因\" href=\"#不能修改的原因\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>通过 \u003Ccode>Arrays.asList()\u003C/code> 创建的 \u003Ccode>List\u003C/code> 是一个固定大小的列表（fixed-size list），它不能直接进行结构性修改（如添加或删除元素）。这是因为 \u003Ccode>Arrays.asList()\u003C/code> 返回的是一个由数组支持的 \u003Ccode>List\u003C/code> 实现，而不是一个普通的 \u003Ccode>ArrayList\u003C/code>。\u003C/p>\n\u003Ch3 id=\"具体原因\">具体原因\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 具体原因\" href=\"#具体原因\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Col>\n\u003Cli>\u003Cstrong>\u003Ccode>Arrays.asList()\u003C/code> 的实现\u003C/strong>：\n\u003Cul>\n\u003Cli>\u003Ccode>Arrays.asList()\u003C/code> 方法返回的是 \u003Ccode>java.util.Arrays.ArrayList\u003C/code>，这是 \u003Ccode>Arrays\u003C/code> 类中的一个内部静态类，而不是 \u003Ccode>java.util.ArrayList\u003C/code>。\u003C/li>\n\u003Cli>这个内部类的实现是对原始数组的一个包装，它的大小是固定的，与原始数组共享数据。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>固定大小的限制\u003C/strong>：\n\u003Cul>\n\u003Cli>因为底层仍然是数组，所以不能动态调整大小。任何试图改变列表大小的操作（如 \u003Ccode>add()\u003C/code> 或 \u003Ccode>remove()\u003C/code>）都会抛出 \u003Ccode>UnsupportedOperationException\u003C/code>。\u003C/li>\n\u003Cli>但是，你可以对列表中的元素进行修改（例如通过索引设置新值），因为这不会改变数组的大小。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>看源码！\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">T\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> List\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">T\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> asList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(T... a) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ArrayList&#x3C;>(a);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ArrayList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">extends\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> AbstractList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> RandomAccess\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, java.io.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Serializable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">java\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.io.Serial\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> static\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> long\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> serialVersionUID \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2764017481108945198L\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SuppressWarnings\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"serial\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">// Conditionally serializable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        private\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> final\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] a;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">        ArrayList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">array\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            a \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Objects.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">requireNonNull\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(array);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> size\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a.length;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> Object\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">toArray\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Arrays.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">copyOf\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a, a.length, \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Object\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[].class);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">SuppressWarnings\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"unchecked\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">T\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">T\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">toArray\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">T\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">a\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> size\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (a.length \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Arrays.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">copyOf\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.a, size,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                                     (Class\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;?\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> extends \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">T\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) a.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">getClass\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            System.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">arraycopy\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.a, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, a, \u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, size);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (a.length \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> size)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                a[size] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> E \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> index\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a[index];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> E \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> index\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, E \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">element\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            E oldValue \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a[index];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            a[index] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> element;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> oldValue;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> indexOf\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Object \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">o\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] a \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.a;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (o \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a.length; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (a[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a.length; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (o.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">equals\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a[i]))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> boolean\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> contains\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Object \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">o\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> indexOf\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(o) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Spliterator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">spliterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Spliterators.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">spliterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a, Spliterator.ORDERED);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> forEach\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Consumer&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> super\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">action\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Objects.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">requireNonNull\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(action);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (E e \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                action.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">accept\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> replaceAll\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(UnaryOperator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">operator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Objects.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">requireNonNull\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(operator);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] a \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">.a;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> a.length; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                a[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> operator.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">apply\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a[i]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> sort\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(Comparator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">?\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> super\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">c\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            Arrays.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">sort\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(a, c);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        @\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">Override\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> Iterator&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">iterator\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ArrayItr&#x3C;>(a);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>注意我们看这个ArrayList，它其实是Arrays的一个内部类！\u003C/p>\n\u003Cp>这也可以解释为什么asList一定要传引用类型的数组了，因为定义了范型！\u003C/p>\n\u003Cp>为什么它能不实现remove和add接口呢？\u003C/p>\n\u003Cp>那当然是因为它继承了抽象类AbstractList啊，这个抽象类直接对这两个方法抛异常了！\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> abstract\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> AbstractList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">extends\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> AbstractCollection\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">implements\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> List\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">E\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * Sole constructor.  (For invocation by subclass constructors, typically\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * implicit.)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    protected\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> AbstractList\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * Appends the specified element to the end of this list (optional\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * operation).\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * &#x3C;p>Lists that support this operation may place limitations on what\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * elements may be added to this list.  In particular, some\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * lists will refuse to add null elements, and others will impose\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * restrictions on the type of elements that may be added.  List\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * classes should clearly specify in their documentation any restrictions\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * on what elements may be added.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * @implSpec\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * This implementation calls {@code add(size(), e)}.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * &#x3C;p>Note that this implementation throws an\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * {@code UnsupportedOperationException} unless\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * {\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@link\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> #\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">add(int, Object)\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> add(int, E)} is overridden.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@param\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> e\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> element to be appended to this list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@return\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> {@code true} (as specified by {@link Collection#add})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> UnsupportedOperationException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> if the {@code add} operation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *         is not supported by this list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ClassCastException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> if the class of the specified element\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *         prevents it from being added to this list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NullPointerException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> if the specified element is null and this\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *         list does not permit null elements\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IllegalArgumentException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> if some property of this element\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *         prevents it from being added to this list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> boolean\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(E \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">        add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">size\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(), e);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IndexOutOfBoundsException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> abstract\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> E \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> index\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * @implSpec\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * This implementation always throws an\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * {@code UnsupportedOperationException}.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> UnsupportedOperationException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ClassCastException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NullPointerException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IllegalArgumentException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IndexOutOfBoundsException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> E \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> index\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, E \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">element\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> UnsupportedOperationException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * @implSpec\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * This implementation always throws an\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * {@code UnsupportedOperationException}.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> UnsupportedOperationException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> ClassCastException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> NullPointerException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IllegalArgumentException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IndexOutOfBoundsException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> void\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> add\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> index\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, E \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">element\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> UnsupportedOperationException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * @implSpec\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * This implementation always throws an\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * {@code UnsupportedOperationException}.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> UnsupportedOperationException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     * \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">@throws\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> IndexOutOfBoundsException\u003C/span>\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     {@inheritDoc}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">     */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> E \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\"> index\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        throw\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> UnsupportedOperationException\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>其实ArrayList也继承了抽象类AbstractList，但是它自己重写了这两个方法！\u003C/p>\n\u003Cp>至此，大完结！\u003C/p>",{"headings":583,"localImagePaths":600,"remoteImagePaths":601,"frontmatter":602,"imagePaths":607},[584,585,587,589,591,594,596,598],{"depth":25,"slug":236,"text":236},{"depth":25,"slug":586,"text":586},"问题描述",{"depth":25,"slug":588,"text":588},"探究原因",{"depth":25,"slug":590,"text":590},"如何删除",{"depth":25,"slug":592,"text":593},"如果是map呢","如果是Map呢？",{"depth":25,"slug":595,"text":595},"补充一条",{"depth":118,"slug":597,"text":597},"不能修改的原因",{"depth":126,"slug":599,"text":599},"具体原因",[],[],{"title":572,"tags":603,"categories":604,"mathjax":105,"sticky":118,"swiper_index":118,"published":605,"abbrlink":576,"description":574,"minutes":606},[101,323],[358],["Date","2025-04-15T23:29:33.000Z"],16,[],"origin/2025-04-25-top150",{"id":608,"data":610,"body":617,"filePath":618,"assetImports":619,"digest":621,"rendered":622},{"title":611,"published":612,"description":613,"tags":614,"draft":103,"pin":104,"toc":105,"lang":106,"abbrlink":616},"记事本Go手搓LeetCode Top150",["Date","2025-04-25T19:51:06.000Z"],"就用Typro搓吧，正好回顾一下Top 150，熟练掌握一下Go的语法和函数",[615],"Go","leetcode-top150","# 1.合并两个有序数组\n\n## 题目描述\n\n[88. 合并两个有序数组](https://leetcode.cn/problems/merge-sorted-array/)\n\n给你两个按 **非递减顺序** 排列的整数数组 `nums1` 和 `nums2`，另有两个整数 `m` 和 `n` ，分别表示 `nums1` 和 `nums2` 中的元素数目。\n\n请你 **合并** `nums2` 到 `nums1` 中，使合并后的数组同样按 **非递减顺序** 排列。\n\n**注意：**最终，合并后数组不应由函数返回，而是存储在数组 `nums1` 中。为了应对这种情况，`nums1` 的初始长度为 `m + n`，其中前 `m` 个元素表示应合并的元素，后 `n` 个元素为 `0` ，应忽略。`nums2` 的长度为 `n` 。\n\n**示例 1：**\n\n```\n输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n输出：[1,2,2,3,5,6]\n解释：需要合并 [1,2,3] 和 [2,5,6] 。\n合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。\n```\n\n**示例 2：**\n\n```\n输入：nums1 = [1], m = 1, nums2 = [], n = 0\n输出：[1]\n解释：需要合并 [1] 和 [] 。\n合并结果是 [1] 。\n```\n\n**示例 3：**\n\n```\n输入：nums1 = [0], m = 0, nums2 = [1], n = 1\n输出：[1]\n解释：需要合并的数组是 [] 和 [1] 。\n合并结果是 [1] 。\n注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。\n```\n\n**提示：**\n\n- `nums1.length == m + n`\n- `nums2.length == n`\n- `0 \u003C= m, n \u003C= 200`\n- `1 \u003C= m + n \u003C= 200`\n- `-109 \u003C= nums1[i], nums2[j] \u003C= 109`\n\n \n\n**进阶：**你可以设计实现一个时间复杂度为 `O(m + n)` 的算法解决此问题吗？\n\n## 题解\n\n思路不多说，尾插法即可，较为简单\n\n```go\nfunc merge(nums1 []int, m int, nums2 []int, n int) {\n\t//不额外占用空间，所以就是在num1上原地修改\n\tptr1, ptr2, ptr := m-1, n-1, m+n-1\n\tfor ;ptr1 >=0 && ptr2 >= 0;{\n        if nums1[ptr1]>nums2[ptr2]{\n            nums1[ptr] = nums1[ptr1]\n            ptr--\n            ptr1--\n        }else{\n            nums1[ptr] = nums2[ptr2]\n            ptr--\n            ptr2--\n        }\n\t}\n    for ;ptr2>=0;{\n        nums1[ptr] = nums2[ptr2]\n        ptr--\n        ptr2--\n    }\n}\n```\n\n# 2.移动元素\n\n## 题目描述\n\n[27. 移除元素](https://leetcode.cn/problems/remove-element/)\n\n给你一个数组 `nums` 和一个值 `val`，你需要 **[原地](https://baike.baidu.com/item/原地算法)** 移除所有数值等于 `val` 的元素。元素的顺序可能发生改变。然后返回 `nums` 中与 `val` 不同的元素的数量。\n\n假设 `nums` 中不等于 `val` 的元素数量为 `k`，要通过此题，您需要执行以下操作：\n\n- 更改 `nums` 数组，使 `nums` 的前 `k` 个元素包含不等于 `val` 的元素。`nums` 的其余元素和 `nums` 的大小并不重要。\n- 返回 `k`。\n\n**用户评测：**\n\n评测机将使用以下代码测试您的解决方案：\n\n```\nint[] nums = [...]; // 输入数组\nint val = ...; // 要移除的值\nint[] expectedNums = [...]; // 长度正确的预期答案。\n                            // 它以不等于 val 的值排序。\n\nint k = removeElement(nums, val); // 调用你的实现\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // 排序 nums 的前 k 个元素\nfor (int i = 0; i \u003C actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n```\n\n如果所有的断言都通过，你的解决方案将会 **通过**。\n\n**示例 1：**\n\n```\n输入：nums = [3,2,2,3], val = 3\n输出：2, nums = [2,2,_,_]\n解释：你的函数函数应该返回 k = 2, 并且 nums 中的前两个元素均为 2。\n你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。\n```\n\n**示例 2：**\n\n```\n输入：nums = [0,1,2,2,3,0,4,2], val = 2\n输出：5, nums = [0,1,4,0,3,_,_,_]\n解释：你的函数应该返回 k = 5，并且 nums 中的前五个元素为 0,0,1,3,4。\n注意这五个元素可以任意顺序返回。\n你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。\n```\n\n**提示：**\n\n- `0 \u003C= nums.length \u003C= 100`\n- `0 \u003C= nums[i] \u003C= 50`\n- `0 \u003C= val \u003C= 100`\n\n## 题解\n\n原地移除且允许顺序变换，那就是简单的元素位置交换，思路不多说，主要看代码\n\n```go\nfunc removeElement(nums []int, val int) int {\n    lst := len(nums)-1\n    for i := 0; i\u003C=lst; i++{\n        if nums[i] != val {\n            continue\n        }\n        for {\n            if lst>=0&&nums[lst]==val{\n                lst--\n            }else{\n                break\n            }\n        }\n        if i\u003Clst{\n            tmp := nums[i]\n            nums[i] = nums[lst]\n            nums[lst] = tmp\n        }\n    }\n    return lst+1;\n}\n```\n\n# 3.删除有序数组中的重复项\n\n## 题目描述\n\n[26. 删除有序数组中的重复项](https://leetcode.cn/problems/remove-duplicates-from-sorted-array/)\n\n给你一个 **非严格递增排列** 的数组 `nums` ，请你**[ 原地](http://baike.baidu.com/item/原地算法)** 删除重复出现的元素，使每个元素 **只出现一次** ，返回删除后数组的新长度。元素的 **相对顺序** 应该保持 **一致** 。然后返回 `nums` 中唯一元素的个数。\n\n考虑 `nums` 的唯一元素的数量为 `k` ，你需要做以下事情确保你的题解可以被通过：\n\n- 更改数组 `nums` ，使 `nums` 的前 `k` 个元素包含唯一元素，并按照它们最初在 `nums` 中出现的顺序排列。`nums` 的其余元素与 `nums` 的大小不重要。\n- 返回 `k` 。\n\n**判题标准:**\n\n系统会用下面的代码来测试你的题解:\n\n```\nint[] nums = [...]; // 输入数组\nint[] expectedNums = [...]; // 长度正确的期望答案\n\nint k = removeDuplicates(nums); // 调用\n\nassert k == expectedNums.length;\nfor (int i = 0; i \u003C k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n```\n\n如果所有断言都通过，那么您的题解将被 **通过**。\n\n**示例 1：**\n\n```\n输入：nums = [1,1,2]\n输出：2, nums = [1,2,_]\n解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。\n```\n\n**示例 2：**\n\n```\n输入：nums = [0,0,1,1,1,2,2,3,3,4]\n输出：5, nums = [0,1,2,3,4]\n解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。\n```\n\n**提示：**\n\n- `1 \u003C= nums.length \u003C= 3 * 104`\n- `-104 \u003C= nums[i] \u003C= 104`\n- `nums` 已按 **非严格递增** 排列\n\n## 题解\n\n```go\nfunc removeDuplicates(nums []int) int {\n    //特例，额外处理\n    if len(nums)\u003C=1{\n        return len(nums)\n    }\n    //有效数字\n    start := 0\n    for ptr := 1; ptr\u003Clen(nums); ptr++{\n        if nums[ptr]!=nums[start]{\n            start++\n            nums[start] = nums[ptr]\n        }\n    }\n    return start+1\n}\n```\n\n# 4.删除有序数组的重复项II\n\n## 题目描述\n\n[80. 删除有序数组中的重复项 II](https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/)\n\n给你一个有序数组 `nums` ，请你**[ 原地](http://baike.baidu.com/item/原地算法)** 删除重复出现的元素，使得出现次数超过两次的元素**只出现两次** ，返回删除后数组的新长度。\n\n不要使用额外的数组空间，你必须在 **[原地 ](https://baike.baidu.com/item/原地算法)修改输入数组** 并在使用 O(1) 额外空间的条件下完成。\n\n**说明：**\n\n为什么返回数值是整数，但输出的答案是数组呢？\n\n请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\n\n你可以想象内部操作如下:\n\n```\n// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝\nint len = removeDuplicates(nums);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。\nfor (int i = 0; i \u003C len; i++) {\n    print(nums[i]);\n}\n```\n\n**示例 1：**\n\n```\n输入：nums = [1,1,1,2,2,3]\n输出：5, nums = [1,1,2,2,3]\n解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3。 不需要考虑数组中超出新长度后面的元素。\n```\n\n**示例 2：**\n\n```\n输入：nums = [0,0,1,1,1,1,2,3,3]\n输出：7, nums = [0,0,1,1,2,3,3]\n解释：函数应返回新长度 length = 7, 并且原数组的前七个元素被修改为 0, 0, 1, 1, 2, 3, 3。不需要考虑数组中超出新长度后面的元素。\n```\n\n**提示：**\n\n- `1 \u003C= nums.length \u003C= 3 * 104`\n- `-104 \u003C= nums[i] \u003C= 104`\n- `nums` 已按升序排列\n\n## 题解\n\n这题其实本质上和上一题相同，不过多解释\n\n```go\nfunc removeDuplicates(nums []int) int {\n    if len(nums)\u003C=2{\n        return len(nums)\n    }\n    start := 1\n    for ptr := 2; ptr\u003Clen(nums); ptr++{\n        //这个对比的是start-1,不可以是ptr-2\n        if nums[ptr] != nums[start-1]{\n            start++\n            nums[start] = nums[ptr]\n        }\n    }\n    return start+1\n\n}\n```\n\n# 5.多数元素\n\n## 题目描述\n\n[169. 多数元素](https://leetcode.cn/problems/majority-element/)\n\n给定一个大小为 `n` 的数组 `nums` ，返回其中的多数元素。多数元素是指在数组中出现次数 **大于** `⌊ n/2 ⌋` 的元素。\n\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。 \n\n**示例 1：**\n\n```\n输入：nums = [3,2,3]\n输出：3\n```\n\n**示例 2：**\n\n```\n输入：nums = [2,2,1,1,1,2,2]\n输出：2\n```\n\n**提示：**\n\n- `n == nums.length`\n- `1 \u003C= n \u003C= 5 * 104`\n- `-109 \u003C= nums[i] \u003C= 109`\n\n**进阶：**尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。\n\n## 题解\n\n典型的思维题，解决方式也比较简单\n\n```go\nfunc majorityElement(nums []int) int {\n    res := -1\n    count := 0\n    for _,val := range nums{\n        if val==res{\n            count++;\n        }else{\n            if count==0{\n                res = val\n                count++\n            }else{\n                count--\n            }\n        }\n    }\n    return res\n}\n```\n\n# 6.轮转数组\n\n## 题目描述\n\n[189. 轮转数组](https://leetcode.cn/problems/rotate-array/)\n\n给定一个整数数组 `nums`，将数组中的元素向右轮转 `k` 个位置，其中 `k` 是非负数。\n\n**示例 1:**\n\n```\n输入: nums = [1,2,3,4,5,6,7], k = 3\n输出: [5,6,7,1,2,3,4]\n解释:\n向右轮转 1 步: [7,1,2,3,4,5,6]\n向右轮转 2 步: [6,7,1,2,3,4,5]\n向右轮转 3 步: [5,6,7,1,2,3,4]\n```\n\n**示例 2:**\n\n```\n输入：nums = [-1,-100,3,99], k = 2\n输出：[3,99,-1,-100]\n解释: \n向右轮转 1 步: [99,-1,-100,3]\n向右轮转 2 步: [3,99,-1,-100]\n```\n\n**提示：**\n\n- `1 \u003C= nums.length \u003C= 105`\n- `-231 \u003C= nums[i] \u003C= 231 - 1`\n- `0 \u003C= k \u003C= 105`\n\n**进阶：**\n\n- 尽可能想出更多的解决方案，至少有 **三种** 不同的方法可以解决这个问题。\n- 你可以使用空间复杂度为 `O(1)` 的 **原地** 算法解决这个问题吗？\n\n## 题解\n\n其实这也是个思维题，我们可以尝试用呆板的方式解决，或者也可以用trick，这里两种题解都放一下\n\n### Trick解法：翻转数组\n\n```go\nfunc reverse(nums []int, start int, end int){\n    for start \u003C end {\n        nums[start], nums[end] = nums[end], nums[start]\n        start++\n        end--\n    }\n}\nfunc rotate(nums []int, k int)  {\n    k = k%len(nums)\n    reverse(nums,0,len(nums)-1)\n    reverse(nums,0,k-1)\n    reverse(nums,k,len(nums)-1)\n}\n```\n\n写到这里其实已经很感觉出来go是个很简洁的语言了，主要感觉还是有一些库啥的不太熟练，比如我就不知道go有没有优先级队列\n\n### 传统解法，看似呆瓜实际全是技巧\n\n听我说，这种方法真的写起来很累，真的很累\n\n同时写到这里的时候，我发现一个问题\n\n**在 Go 中，`:=` 是短变量声明操作符，用于在同一作用域内声明并初始化变量。Go 的设计允许在嵌套作用域（如循环块、条件块等）中重复使用 `:=` 声明同名变量，但需要注意：**\n\n- **在 Go 中，变量的作用域由其声明的位置决定。**\n- **如果在一个嵌套作用域（如循环体或条件块）中使用 `:=` 声明一个与外部作用域同名的变量，则会屏蔽（shadow） 外部作用域中的变量。**\n- **当嵌套作用域结束时，屏蔽效果消失，外部作用域的变量重新可见。**\n\n```go\nfunc rotate(nums []int, k int)  {\n    n := len(nums)\n    if n\u003C=1{\n        return\n    }\n    k = k%n\n    start := 0\n  \t//记录安置好的元素个数\n    count := 0\n  \t//从第一个开始安置\n    ptr := start\n    for count\u003Clen(nums){\n        ptr = (ptr+k)%n\n        if ptr == start{\n          \t//第start圈循环的最后一个，安置到start位置\n          \t//记得安置完数目+1\n            count++\n            start++\n            ptr = start\n            continue\n        }\n        tmp := nums[start]\n        nums[start] = nums[ptr]\n        nums[ptr] = tmp\n        count++\n    }\n}\n```\n\n# 7.买卖股票的最佳时机\n\n[121. 买卖股票的最佳时机](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/)\n\n## 题目描述\n\n给定一个数组 `prices` ，它的第 `i` 个元素 `prices[i]` 表示一支给定股票第 `i` 天的价格。\n\n你只能选择 **某一天** 买入这只股票，并选择在 **未来的某一个不同的日子** 卖出该股票。设计一个算法来计算你所能获取的最大利润。\n\n返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 `0` 。\n\n**示例 1：**\n\n```\n输入：[7,1,5,3,6,4]\n输出：5\n解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。\n```\n\n**示例 2：**\n\n```\n输入：prices = [7,6,4,3,1]\n输出：0\n解释：在这种情况下, 没有交易完成, 所以最大利润为 0。\n```\n\n**提示：**\n\n- `1 \u003C= prices.length \u003C= 105`\n- `0 \u003C= prices[i] \u003C= 104`\n\n## 题解\n\n经典题，go不提供Max的比较方式，同时，MaxInt、MinInt是在math包下\n\n```go\nfunc maxProfit(prices []int) int {\n    preMin := math.MaxInt\n    res := math.MinInt\n    for _,value := range prices{\n        if value\u003CpreMin{\n            preMin = value\n        }\n        if res\u003Cvalue-preMin{\n            res = value-preMin\n        }\n    }\n    return res\n}\n```\n\n# 8.买卖股票的最佳时机II\n\n## 题目描述\n\n[122. 买卖股票的最佳时机 II](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/)\n\n给你一个整数数组 `prices` ，其中 `prices[i]` 表示某支股票第 `i` 天的价格。\n\n在每一天，你可以决定是否购买和/或出售股票。你在任何时候 **最多** 只能持有 **一股** 股票。你也可以先购买，然后在 **同一天** 出售。\n\n返回 *你能获得的 **最大** 利润* 。\n\n**示例 1：**\n\n```\n输入：prices = [7,1,5,3,6,4]\n输出：7\n解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。\n随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3。\n最大总利润为 4 + 3 = 7 。\n```\n\n**示例 2：**\n\n```\n输入：prices = [1,2,3,4,5]\n输出：4\n解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。\n最大总利润为 4 。\n```\n\n**示例 3：**\n\n```\n输入：prices = [7,6,4,3,1]\n输出：0\n解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0。\n```\n\n**提示：**\n\n- `1 \u003C= prices.length \u003C= 3 * 104`\n- `0 \u003C= prices[i] \u003C= 104`\n\n## 题解\n\n我不喜欢用贪心的思路去做，所以还是用dp做了\n\n注意go初始化二维切片的时候，第一次make其实只初始化了第一维\n\n```go\nfunc max(num1, num2 int) int{\n    if num1>num2 {\n        return num1\n    }else{\n        return num2\n    }\n}\n\nfunc maxProfit(prices []int) int {\n    //只初始化了第一维，每个子数组其实还是nil，第一次使用的时候要手动初始化\n    dp := make([][]int,len(prices))\n    dp[0] = make([]int,2)\n    dp[0][0] = 0\n    dp[0][1] = -prices[0]\n    res := 0\n    for i := 1; i\u003Clen(prices); i++{\n        dp[i] = make([]int,2)\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n        dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])\n        res = max(dp[i][0],res)\n    }\n    return res\n}\n```\n\n# 9.跳跃游戏\n\n## 题目描述\n\n[55. 跳跃游戏](https://leetcode.cn/problems/jump-game/)\n\n给你一个非负整数数组 `nums` ，你最初位于数组的 **第一个下标** 。数组中的每个元素代表你在该位置可以跳跃的最大长度。\n\n判断你是否能够到达最后一个下标，如果可以，返回 `true` ；否则，返回 `false` 。\n\n**示例 1：**\n\n```\n输入：nums = [2,3,1,1,4]\n输出：true\n解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。\n```\n\n**示例 2：**\n\n```\n输入：nums = [3,2,1,0,4]\n输出：false\n解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。\n```\n\n**提示：**\n\n- `1 \u003C= nums.length \u003C= 104`\n- `0 \u003C= nums[i] \u003C= 105`\n\n## 题解\n\n```go\nfunc canJump(nums []int) bool {\n    max := 0\n    for pre :=0; pre\u003C=max&&pre\u003Clen(nums); pre++{\n        if pre + nums[pre] > max {\n            max = pre + nums[pre]\n        }\n    }\n    return max>=len(nums)-1\n}\n```\n\n# 10.跳跃游戏II\n\n## 题目描述\n\n给定一个长度为 `n` 的 **0 索引**整数数组 `nums`。初始位置为 `nums[0]`。\n\n每个元素 `nums[i]` 表示从索引 `i` 向后跳转的最大长度。换句话说，如果你在 `nums[i]` 处，你可以跳转到任意 `nums[i + j]` 处:\n\n- `0 \u003C= j \u003C= nums[i]` \n- `i + j \u003C n`\n\n返回到达 `nums[n - 1]` 的最小跳跃次数。生成的测试用例可以到达 `nums[n - 1]`。\n\n**示例 1:**\n\n```\n输入: nums = [2,3,1,1,4]\n输出: 2\n解释: 跳到最后一个位置的最小跳跃数是 2。\n     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。\n```\n\n**示例 2:**\n\n```\n输入: nums = [2,3,0,1,4]\n输出: 2\n```\n\n**提示:**\n\n- `1 \u003C= nums.length \u003C= 104`\n- `0 \u003C= nums[i] \u003C= 1000`\n- 题目保证可以到达 `nums[n-1]`\n\n## 题解\n\n典型的dp问题了，不多说了\n\n```go\nfunc jump(nums []int) int {\n    end := 0\n    maxPos := 0\n    res := 0\n    for index, value := range nums{\n        if index + value > maxPos {\n            maxPos = index + value\n        }\n        if index == end && index\u003Clen(nums)-1 {\n            end = maxPos\n            res++\n        }\n    }\n    return res\n}\n```\n\n看官解的思路很怪，这是我原本的思路\n\n```java\nclass Solution {\n    public int jump(int[] nums) {\n        int res[] =new int[nums.length];\n        res[0]=0;\n        int j=0;\n        for(int i=1;i\u003Cnums.length;i++){\n            while(nums[j]+j\u003Ci){\n                j++;\n            }\n            res[i]=res[j]+1;\n        }\n        return res[nums.length-1];\n    }\n}\n```\n\n再用go写一遍\n\n```go\nfunc jump(nums []int) int {\n    dp := make([]int, len(nums))\n    dp[0] = 0\n    start := 0\n    for i:=1;i\u003Clen(nums);i++{\n        for start+nums[start]\u003Ci{\n            start++;\n        }\n        dp[i] = dp[start]+1\n    }\n    return dp[len(nums)-1]\n}\n```\n\n# 11.H指数\n\n## 题目描述\n\n[274. H 指数](https://leetcode.cn/problems/h-index/)\n\n给你一个整数数组 `citations` ，其中 `citations[i]` 表示研究者的第 `i` 篇论文被引用的次数。计算并返回该研究者的 **`h` 指数**。\n\n根据维基百科上 [h 指数的定义](https://baike.baidu.com/item/h-index/3991452?fr=aladdin)：`h` 代表“高引用次数” ，一名科研人员的 `h` **指数** 是指他（她）至少发表了 `h` 篇论文，并且 **至少** 有 `h` 篇论文被引用次数大于等于 `h` 。如果 `h` 有多种可能的值，**`h` 指数** 是其中最大的那个。\n\n**示例 1：**\n\n```\n输入：citations = [3,0,6,1,5]\n输出：3 \n解释：给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。\n     由于研究者有 3 篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3。\n```\n\n**示例 2：**\n\n```\n输入：citations = [1,3,1]\n输出：1 \n```\n\n**提示：**\n\n- `n == citations.length`\n- `1 \u003C= n \u003C= 5000`\n- `0 \u003C= citations[i] \u003C= 1000`\n\n## 题解\n\n这题稍微要转个弯，有两种解法，首先是排序的思路\n\n```go\nfunc hIndex(citations []int) int {\n    sort.Slice(citations,func(i, j int) bool{\n        return citations[i] \u003C citations[j]\n    });\n  \t//当然也可以这么写\n  \t//sort.Ints(citations)\n  \t//假设全部论文都满足引用大于n，然后从头开始删除\n    pre := len(citations)\n    for _, value := range citations{\n        if value \u003C pre{\n            pre--\n        }\n    }\n    return pre\n}\n```\n\n第二种思路，就是计数排序，但是需要创建额外的空间\n\n```go\nfunc min(num1, num2 int) int{\n    if num1>num2 {\n        return num2\n    }\n    return num1\n}\nfunc hIndex(citations []int) int {\n    index := make([]int, len(citations)+1)\n    n := len(citations)\n    for _,value := range citations{\n        index[min(value,n)]+=1\n    }\n    sum := 0\n    for i:=n; i>=0; i--{\n        sum += index[i]\n        if sum>= i{\n            return i\n        }\n    }\n    return 0;\n}\t\n```\n\n# 12.O(1) 时间插入、删除和获取随机元素\n\n## 题目描述\n\n[380. O(1) 时间插入、删除和获取随机元素](https://leetcode.cn/problems/insert-delete-getrandom-o1/)\n\n实现`RandomizedSet` 类：\n\n- `RandomizedSet()` 初始化 `RandomizedSet` 对象\n- `bool insert(int val)` 当元素 `val` 不存在时，向集合中插入该项，并返回 `true` ；否则，返回 `false` 。\n- `bool remove(int val)` 当元素 `val` 存在时，从集合中移除该项，并返回 `true` ；否则，返回 `false` 。\n- `int getRandom()` 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 **相同的概率** 被返回。\n\n你必须实现类的所有函数，并满足每个函数的 **平均** 时间复杂度为 `O(1)` 。\n\n**示例：**\n\n```\n输入\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\n输出\n[null, true, false, true, 2, true, false, 2]\n\n解释\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // 向集合中插入 1 。返回 true 表示 1 被成功地插入。\nrandomizedSet.remove(2); // 返回 false ，表示集合中不存在 2 。\nrandomizedSet.insert(2); // 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。\nrandomizedSet.getRandom(); // getRandom 应随机返回 1 或 2 。\nrandomizedSet.remove(1); // 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。\nrandomizedSet.insert(2); // 2 已在集合中，所以返回 false 。\nrandomizedSet.getRandom(); // 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。\n```\n\n**提示：**\n\n- `-231 \u003C= val \u003C= 231 - 1`\n- 最多调用 `insert`、`remove` 和 `getRandom` 函数 `2 * ``105` 次\n- 在调用 `getRandom` 方法时，数据结构中 **至少存在一个** 元素。\n\n## 题解\n\n其实这题还挺难的，首先是插入、删除操作要是O1的就得需要一个方法快速判断当前val值是否存在，如果存在在哪个位置，这点就需要我们使用一个map来实现。其次的删除O1，注意的是，数组的删除是无法做到O1的，所以我们只能采用尾部节点位置替换的思路来做。\n\n```go\ntype RandomizedSet struct {\n    nums []int\n    hash map[int]int\n}\n\n\nfunc Constructor() RandomizedSet {\n    return RandomizedSet{[]int{},map[int]int{}}\n}\n\n\nfunc (this *RandomizedSet) Insert(val int) bool {\n    if _, exist := this.hash[val]; exist {\n        return false\n    }\n    this.hash[val] = len(this.nums)\n    this.nums = append(this.nums, val)\n    return true\n}\n\n\nfunc (this *RandomizedSet) Remove(val int) bool {\n    if value, exist := this.hash[val]; exist{\n        lst := len(this.nums)-1\n        this.nums[value] = this.nums[lst]\n        this.hash[this.nums[value]] = value\n        delete(this.hash, val)\n        this.nums = this.nums[:lst]\n        return true\n    }\n    return false\n}\n\n\nfunc (this *RandomizedSet) GetRandom() int {\n    return this.nums[rand.Intn(len(this.nums))]\n}\n\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Insert(val);\n * param_2 := obj.Remove(val);\n * param_3 := obj.GetRandom();\n */\n```\n\n# 13.除自身以外数组的乘积\n\n## 题目描述\n\n[238. 除自身以外数组的乘积](https://leetcode.cn/problems/product-of-array-except-self/)\n\n给你一个整数数组 `nums`，返回 数组 `answer` ，其中 `answer[i]` 等于 `nums` 中除 `nums[i]` 之外其余各元素的乘积 。\n\n题目数据 **保证** 数组 `nums`之中任意元素的全部前缀元素和后缀的乘积都在 **32 位** 整数范围内。\n\n请 **不要使用除法，**且在 `O(n)` 时间复杂度内完成此题。\n\n**示例 1:**\n\n```\n输入: nums = [1,2,3,4]\n输出: [24,12,8,6]\n```\n\n**示例 2:**\n\n```\n输入: nums = [-1,1,0,-3,3]\n输出: [0,0,9,0,0]\n```\n\n**提示：**\n\n- `2 \u003C= nums.length \u003C= 105`\n- `-30 \u003C= nums[i] \u003C= 30`\n- 输入 **保证** 数组 `answer[i]` 在 **32 位** 整数范围内\n\n**进阶：**你可以在 `O(1)` 的额外空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组 **不被视为** 额外空间。）\n\n## 题解\n\n笑了，这leetCode说的O(1)额外复杂度，意思是除了返回数组之外的，不让用除法就是两个list，分别是左边和右边的乘积\n\n```go\nfunc productExceptSelf(nums []int) []int {\n    //返回数组，接下来我们用它来保存左边的乘积\n    res := make([]int, len(nums))\n    res[0] = 1\n    pre := nums[0]\n    for i := 1; i\u003C len(nums); i++ {\n        res[i] = pre\n        pre = pre * nums[i]\n    }\n    //接下来修改原数组，用原数组保存右边的乘积\n    lst := nums[len(nums)-1]\n    nums[len(nums)-1] = 1\n    for i := len(nums)-2; i>=0; i-- {\n        tmp := lst\n        lst = lst * nums[i]\n      \t//这里不能写lst/nums[i]的原因主要是可能/0\n        nums[i] = tmp\n    }\n    for i := 0; i\u003Clen(nums); i++ {\n        res[i] *= nums[i]\n    }\n    return res\n}\n```\n\n# 14.加油站\n\n## 题目描述\n\n[134. 加油站](https://leetcode.cn/problems/gas-station/)\n\n在一条环路上有 `n` 个加油站，其中第 `i` 个加油站有汽油 `gas[i]` 升。\n\n你有一辆油箱容量无限的的汽车，从第 `i` 个加油站开往第 `i+1` 个加油站需要消耗汽油 `cost[i]` 升。你从其中的一个加油站出发，开始时油箱为空。\n\n给定两个整数数组 `gas` 和 `cost` ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 `-1` 。如果存在解，则 **保证** 它是 **唯一** 的。 \n\n**示例 1:**\n\n```\n输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n输出: 3\n解释:\n从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油\n开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油\n开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油\n开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油\n开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油\n开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。\n因此，3 可为起始索引。\n```\n\n**示例 2:**\n\n```\n输入: gas = [2,3,4], cost = [3,4,3]\n输出: -1\n解释:\n你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。\n我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油\n开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油\n开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油\n你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。\n因此，无论怎样，你都不可能绕环路行驶一周。\n```\n\n**提示:**\n\n- `gas.length == n`\n- `cost.length == n`\n- `1 \u003C= n \u003C= 105`\n- `0 \u003C= gas[i], cost[i] \u003C= 104`\n\n## 题解\n\n这题其实问题在于如何剪枝，举个例子，如果从0出发醉多可以到达k，那么从0-k之内任何点出发，最多也只可以到达k，所以这时候下一个出发点就可以直接考虑k+1了\n\n```go\nfunc canCompleteCircuit(gas []int, cost []int) int {\n    //假设我们的起点是0\n    start := 0\n    n := len(gas)\n    for start\u003Cn {\n        end := start\n        rest := gas[start]\n        //只要油还够，就能往前走了\n        for rest>= cost[end]{\n            rest = rest - cost[end] + gas[(end+1)%n]\n            end = (end + 1) % n\n            //如果到达起点，证明能环绕\n            if end==start{\n                return start\n            }\n        }\n        //如果到达点在起点前，就一定无法抵达了，因为从0到起点-1出发都是不不能环绕的，起点到n也是不能环绕的\n        if end \u003C start{\n            return -1\n        } else {\n            //更换剪枝后的新起点\n            start = end + 1\n        }\n    }\n    return -1\n}\n```\n\n# 15.分发糖果\n\n## 题目描述\n\n[135. 分发糖果](https://leetcode.cn/problems/candy/)\n\n`n` 个孩子站成一排。给你一个整数数组 `ratings` 表示每个孩子的评分。\n\n你需要按照以下要求，给这些孩子分发糖果：\n\n- 每个孩子至少分配到 `1` 个糖果。\n- 相邻两个孩子评分更高的孩子会获得更多的糖果。\n\n请你给每个孩子分发糖果，计算并返回需要准备的 **最少糖果数目** 。\n\n**示例 1：**\n\n```\n输入：ratings = [1,0,2]\n输出：5\n解释：你可以分别给第一个、第二个、第三个孩子分发 2、1、2 颗糖果。\n```\n\n**示例 2：**\n\n```\n输入：ratings = [1,2,2]\n输出：4\n解释：你可以分别给第一个、第二个、第三个孩子分发 1、2、1 颗糖果。\n     第三个孩子只得到 1 颗糖果，这满足题面中的两个条件。\n```\n\n**提示：**\n\n- `n == ratings.length`\n- `1 \u003C= n \u003C= 2 * 104`\n- `0 \u003C= ratings[i] \u003C= 2 * 104`\n\n## 题解\n\n标准贪心，左边右边各贪一次\n\n```go\nfunc candy(ratings []int) int {\n    //我个人喜欢定义一个数组走两遍，而不是定义俩数组\n    res := make([]int, len(ratings))\n    res[0] = 1\n    for i := 1; i\u003Clen(ratings); i++{\n        if ratings[i]>ratings[i-1]{\n            res[i] = res[i-1]+1\n        }else{\n            res[i] = 1\n        }\n    }\n    sum := res[len(ratings)-1]\n    for i := len(ratings)-2; i>=0; i--{\n        if ratings[i] > ratings[i+1] && res[i]\u003Cres[i+1]+1{\n            res[i] = res[i+1]+1\n        }\n        sum += res[i]\n    }\n    return sum\n}\n```\n\n# 16.接雨水\n\n## 题目描述\n\n[42. 接雨水](https://leetcode.cn/problems/trapping-rain-water/)\n\n给定 `n` 个非负整数表示每个宽度为 `1` 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n\n**示例 1：**\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png)\n\n```\n输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]\n输出：6\n解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 \n```\n\n**示例 2：**\n\n```\n输入：height = [4,2,0,3,2,5]\n输出：9\n```\n\n**提示：**\n\n- `n == height.length`\n- `1 \u003C= n \u003C= 2 * 104`\n- `0 \u003C= height[i] \u003C= 105`\n\n## 题解\n\n标准双指针问题\n\n```go\nfunc max(num1, num2 int) int{\n    if num1\u003Cnum2{\n        return num2\n    }\n    return num1\n}\nfunc trap(height []int) int {\n    left := 0\n    right := len(height) - 1\n    leftMax := 0\n    rightMax := 0\n    sum := 0\n    for left\u003C=right {\n        if height[left]\u003C=height[right]{\n            leftMax = max(height[left],leftMax)\n            sum += leftMax - height[left]\n            left++\n        }else{\n            rightMax = max(height[right],rightMax)\n            sum += rightMax - height[right]\n            right--\n        }\n    }\n    return sum\n}\n```\n\n# 17.罗马数字转整数\n\n## 题目描述\n\n罗马数字包含以下七种字符: `I`， `V`， `X`， `L`，`C`，`D` 和 `M`。\n\n```\n字符          数值\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n```\n\n例如， 罗马数字 `2` 写做 `II` ，即为两个并列的 1 。`12` 写做 `XII` ，即为 `X` + `II` 。 `27` 写做 `XXVII`, 即为 `XX` + `V` + `II` 。\n\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 `IIII`，而是 `IV`。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 `IX`。这个特殊的规则只适用于以下六种情况：\n\n- `I` 可以放在 `V` (5) 和 `X` (10) 的左边，来表示 4 和 9。\n- `X` 可以放在 `L` (50) 和 `C` (100) 的左边，来表示 40 和 90。 \n- `C` 可以放在 `D` (500) 和 `M` (1000) 的左边，来表示 400 和 900。\n\n给定一个罗马数字，将其转换成整数。\n\n**示例 1:**\n\n```\n输入: s = \"III\"\n输出: 3\n```\n\n**示例 2:**\n\n```\n输入: s = \"IV\"\n输出: 4\n```\n\n**示例 3:**\n\n```\n输入: s = \"IX\"\n输出: 9\n```\n\n**示例 4:**\n\n```\n输入: s = \"LVIII\"\n输出: 58\n解释: L = 50, V= 5, III = 3.\n```\n\n**示例 5:**\n\n```\n输入: s = \"MCMXCIV\"\n输出: 1994\n解释: M = 1000, CM = 900, XC = 90, IV = 4.\n```\n\n**提示：**\n\n- `1 \u003C= s.length \u003C= 15`\n- `s` 仅含字符 `('I', 'V', 'X', 'L', 'C', 'D', 'M')`\n- 题目数据保证 `s` 是一个有效的罗马数字，且表示整数在范围 `[1, 3999]` 内\n- 题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。\n- IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。\n- 关于罗马数字的详尽书写规则，可以参考 [罗马数字 - 百度百科](https://baike.baidu.com/item/罗马数字/772296)。\n\n## 题解\n\n```go\nfunc romanToInt(s string) int {\n    res := map[byte]int{'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}\n    sum := 0\n    for i:= 0; i\u003Clen(s); i++{\n        if i==len(s)-1 {\n            sum+=res[s[i]]\n            break\n        }\n        if res[s[i]]\u003Cres[s[i+1]]{\n            sum -= res[s[i]]\n        }else {\n            sum += res[s[i]]\n        }\n    }\n    return sum\n}\n```\n\n# 18.整数转罗马数字\n\n## 题目描述\n\n[12. 整数转罗马数字](https://leetcode.cn/problems/integer-to-roman/)\n\n七个不同的符号代表罗马数字，其值如下：\n\n| 符号 | 值   |\n| ---- | ---- |\n| I    | 1    |\n| V    | 5    |\n| X    | 10   |\n| L    | 50   |\n| C    | 100  |\n| D    | 500  |\n| M    | 1000 |\n\n罗马数字是通过添加从最高到最低的小数位值的转换而形成的。将小数位值转换为罗马数字有以下规则：\n\n- 如果该值不是以 4 或 9 开头，请选择可以从输入中减去的最大值的符号，将该符号附加到结果，减去其值，然后将其余部分转换为罗马数字。\n- 如果该值以 4 或 9 开头，使用 **减法形式**，表示从以下符号中减去一个符号，例如 4 是 5 (`V`) 减 1 (`I`): `IV` ，9 是 10 (`X`) 减 1 (`I`)：`IX`。仅使用以下减法形式：4 (`IV`)，9 (`IX`)，40 (`XL`)，90 (`XC`)，400 (`CD`) 和 900 (`CM`)。\n- 只有 10 的次方（`I`, `X`, `C`, `M`）最多可以连续附加 3 次以代表 10 的倍数。你不能多次附加 5 (`V`)，50 (`L`) 或 500 (`D`)。如果需要将符号附加4次，请使用 **减法形式**。\n\n给定一个整数，将其转换为罗马数字。\n\n**示例 1：**\n\n**输入：**num = 3749\n\n**输出：** \"MMMDCCXLIX\"\n\n**解释：**\n\n```\n3000 = MMM 由于 1000 (M) + 1000 (M) + 1000 (M)\n 700 = DCC 由于 500 (D) + 100 (C) + 100 (C)\n  40 = XL 由于 50 (L) 减 10 (X)\n   9 = IX 由于 10 (X) 减 1 (I)\n注意：49 不是 50 (L) 减 1 (I) 因为转换是基于小数位\n```\n\n**示例 2：**\n\n**输入：**num = 58\n\n**输出：**\"LVIII\"\n\n**解释：**\n\n```\n50 = L\n 8 = VIII\n```\n\n**示例 3：**\n\n**输入：**num = 1994\n\n**输出：**\"MCMXCIV\"\n\n**解释：**\n\n```\n1000 = M\n 900 = CM\n  90 = XC\n   4 = IV\n```\n\n**提示：**\n\n- `1 \u003C= num \u003C= 3999`\n\n## 题解\n\n```go\nfunc intToRoman(num int) string {\n    //说实话，感觉这个题目纯是逆天题目\n    //但是还有个细节要讲，这里不能定义map来存对应关系\n    //因为go的map底层是真无序，也不能说无序，是按照hash序\n    //严格来说，要么定义两个数组，要么定义一个结构体数组\n    res := []struct{\n        value int\n        symbol string\n    }{{1000,\"M\"},\n        {900,\"CM\"},\n        {500,\"D\"},\n        {400,\"CD\"},\n        {100,\"C\"},\n        {90,\"XC\"},\n        {50,\"L\"},\n        {40,\"XL\"},\n        {10,\"X\"},\n        {9,\"IX\"},\n        {5,\"V\"},\n        {4,\"IV\"},\n        {1,\"I\"}}\n    str := \"\"\n    for num>0 {\n        for _,st := range res{\n            for num>=st.value{\n                num -= st.value\n                str += st.symbol\n            }\n        }\n    }\n    return str\n}\n```\n\n# 19.最后一个单词的长度\n\n## 题目描述\n\n[58. 最后一个单词的长度](https://leetcode.cn/problems/length-of-last-word/)\n\n给你一个字符串 `s`，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 **最后一个** 单词的长度。\n\n**单词** 是指仅由字母组成、不包含任何空格字符的最大子字符串。\n\n**示例 1：**\n\n```\n输入：s = \"Hello World\"\n输出：5\n解释：最后一个单词是“World”，长度为 5。\n```\n\n**示例 2：**\n\n```\n输入：s = \"   fly me   to   the moon  \"\n输出：4\n解释：最后一个单词是“moon”，长度为 4。\n```\n\n**示例 3：**\n\n```\n输入：s = \"luffy is still joyboy\"\n输出：6\n解释：最后一个单词是长度为 6 的“joyboy”。\n```\n\n**提示：**\n\n- `1 \u003C= s.length \u003C= 104`\n- `s` 仅有英文字母和空格 `' '` 组成\n- `s` 中至少存在一个单词\n\n## 题解\n\n```go\nfunc lengthOfLastWord(s string) int {\n    //这题其实是一个很简单的题，问题就是在于go有没有提供对string 的strip和slipt方法\n    //strings包提供了一些操作，包括TrimSpace和Trim操作\n    //同时strings也提供了Split方法\n    s = strings.Trim(s, \" \")\n    sSplit := strings.Split(s,\" \")\n    n := len(sSplit)-1\n    return len(sSplit[n])\n}\n```\n\n当然其实这题的本意肯定不是调库，搓一下吧\n\n```go\nfunc lengthOfLastWord(s string) int {\n    start := len(s)-1\n    for s[start]==' '{\n        start--\n    }\n    end := start\n    for end>=0&&s[end]!=' '{\n        end--\n    }\n    return start-end\n}\n```\n\n# 20.最长公共前缀\n\n## 题目描述\n\n[14. 最长公共前缀](https://leetcode.cn/problems/longest-common-prefix/)\n\n编写一个函数来查找字符串数组中的最长公共前缀。\n\n如果不存在公共前缀，返回空字符串 `\"\"`。\n\n**示例 1：**\n\n```\n输入：strs = [\"flower\",\"flow\",\"flight\"]\n输出：\"fl\"\n```\n\n**示例 2：**\n\n```\n输入：strs = [\"dog\",\"racecar\",\"car\"]\n输出：\"\"\n解释：输入不存在公共前缀。\n```\n\n**提示：**\n\n- `1 \u003C= strs.length \u003C= 200`\n- `0 \u003C= strs[i].length \u003C= 200`\n- `strs[i]` 如果非空，则仅由小写英文字母组成\n\n## 题解\n\n```go\nfunc min(num1, num2 int) int{\n    if num1 > num2 {\n        return num2\n    }\n    return num1\n}\nfunc longestCommonPrefix(strs []string) string {\n    res := \"\"\n    n := math.MaxInt\n    for _, str := range strs{\n        n = min(n,len(str))\n    }\n    for i:=0;i\u003Cn;i++{\n        b := strs[0][i]\n        for _,str := range strs{\n            if str[i] != b{\n                return res\n            }\n        }\n        res = res+string(b)\n    }\n    return res\n}\n```","src/content/posts/origin/2025-04-25-Top150.md",[620],"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png","803979e9f0858ef3",{"html":623,"metadata":624},"\u003Ch1 id=\"1合并两个有序数组\">1.合并两个有序数组\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 1.合并两个有序数组\" href=\"#1合并两个有序数组\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/merge-sorted-array/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">88. 合并两个有序数组\u003C/a>\u003C/p>\n\u003Cp>给你两个按 \u003Cstrong>非递减顺序\u003C/strong> 排列的整数数组 \u003Ccode>nums1\u003C/code> 和 \u003Ccode>nums2\u003C/code>，另有两个整数 \u003Ccode>m\u003C/code> 和 \u003Ccode>n\u003C/code> ，分别表示 \u003Ccode>nums1\u003C/code> 和 \u003Ccode>nums2\u003C/code> 中的元素数目。\u003C/p>\n\u003Cp>请你 \u003Cstrong>合并\u003C/strong> \u003Ccode>nums2\u003C/code> 到 \u003Ccode>nums1\u003C/code> 中，使合并后的数组同样按 \u003Cstrong>非递减顺序\u003C/strong> 排列。\u003C/p>\n\u003Cp>**注意：**最终，合并后数组不应由函数返回，而是存储在数组 \u003Ccode>nums1\u003C/code> 中。为了应对这种情况，\u003Ccode>nums1\u003C/code> 的初始长度为 \u003Ccode>m + n\u003C/code>，其中前 \u003Ccode>m\u003C/code> 个元素表示应合并的元素，后 \u003Ccode>n\u003C/code> 个元素为 \u003Ccode>0\u003C/code> ，应忽略。\u003Ccode>nums2\u003C/code> 的长度为 \u003Ccode>n\u003C/code> 。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[1,2,2,3,5,6]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：需要合并 [1,2,3] 和 [2,5,6] 。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums1 = [1], m = 1, nums2 = [], n = 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[1]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：需要合并 [1] 和 [] 。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>合并结果是 [1] 。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 3：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums1 = [0], m = 0, nums2 = [1], n = 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[1]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：需要合并的数组是 [] 和 [1] 。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>合并结果是 [1] 。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>nums1.length == m + n\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>nums2.length == n\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= m, n &#x3C;= 200\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>1 &#x3C;= m + n &#x3C;= 200\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>-109 &#x3C;= nums1[i], nums2[j] &#x3C;= 109\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>**进阶：**你可以设计实现一个时间复杂度为 \u003Ccode>O(m + n)\u003C/code> 的算法解决此问题吗？\u003C/p>\n\u003Ch2 id=\"题解\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>思路不多说，尾插法即可，较为简单\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> merge\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">m\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">\t//不额外占用空间，所以就是在num1上原地修改\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\tptr1, ptr2, ptr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> m\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, m\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">\tfor\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ;ptr1 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ptr2 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums1[ptr1]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">nums2[ptr2]{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            nums1[ptr] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums1[ptr1]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            ptr\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            ptr1\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            nums1[ptr] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums2[ptr2]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            ptr\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            ptr2\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">\t}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ;ptr2\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        nums1[ptr] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums2[ptr2]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ptr\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ptr2\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"2移动元素\">2.移动元素\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 2.移动元素\" href=\"#2移动元素\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-1\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-1\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/remove-element/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">27. 移除元素\u003C/a>\u003C/p>\n\u003Cp>给你一个数组 \u003Ccode>nums\u003C/code> 和一个值 \u003Ccode>val\u003C/code>，你需要 \u003Cstrong>\u003Ca href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">原地\u003C/a>\u003C/strong> 移除所有数值等于 \u003Ccode>val\u003C/code> 的元素。元素的顺序可能发生改变。然后返回 \u003Ccode>nums\u003C/code> 中与 \u003Ccode>val\u003C/code> 不同的元素的数量。\u003C/p>\n\u003Cp>假设 \u003Ccode>nums\u003C/code> 中不等于 \u003Ccode>val\u003C/code> 的元素数量为 \u003Ccode>k\u003C/code>，要通过此题，您需要执行以下操作：\u003C/p>\n\u003Cul>\n\u003Cli>更改 \u003Ccode>nums\u003C/code> 数组，使 \u003Ccode>nums\u003C/code> 的前 \u003Ccode>k\u003C/code> 个元素包含不等于 \u003Ccode>val\u003C/code> 的元素。\u003Ccode>nums\u003C/code> 的其余元素和 \u003Ccode>nums\u003C/code> 的大小并不重要。\u003C/li>\n\u003Cli>返回 \u003Ccode>k\u003C/code>。\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>用户评测：\u003C/strong>\u003C/p>\n\u003Cp>评测机将使用以下代码测试您的解决方案：\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>int[] nums = [...]; // 输入数组\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>int val = ...; // 要移除的值\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>int[] expectedNums = [...]; // 长度正确的预期答案。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>                            // 它以不等于 val 的值排序。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>int k = removeElement(nums, val); // 调用你的实现\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>assert k == expectedNums.length;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>sort(nums, 0, k); // 排序 nums 的前 k 个元素\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>for (int i = 0; i &#x3C; actualLength; i++) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    assert nums[i] == expectedNums[i];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>如果所有的断言都通过，你的解决方案将会 \u003Cstrong>通过\u003C/strong>。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums = [3,2,2,3], val = 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：2, nums = [2,2,_,_]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：你的函数函数应该返回 k = 2, 并且 nums 中的前两个元素均为 2。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums = [0,1,2,2,3,0,4,2], val = 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：5, nums = [0,1,4,0,3,_,_,_]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：你的函数应该返回 k = 5，并且 nums 中的前五个元素为 0,0,1,3,4。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>注意这五个元素可以任意顺序返回。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>0 &#x3C;= nums.length &#x3C;= 100\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= nums[i] &#x3C;= 50\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= val &#x3C;= 100\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-1\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-1\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>原地移除且允许顺序变换，那就是简单的元素位置交换，思路不多说，主要看代码\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> removeElement\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">val\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    lst \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">lst; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> val {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            continue\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> lst\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">nums[lst]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">val{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                lst\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                break\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">lst{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            tmp \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[i]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            nums[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[lst]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            nums[lst] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tmp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> lst\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"3删除有序数组中的重复项\">3.删除有序数组中的重复项\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 3.删除有序数组中的重复项\" href=\"#3删除有序数组中的重复项\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-2\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-2\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">26. 删除有序数组中的重复项\u003C/a>\u003C/p>\n\u003Cp>给你一个 \u003Cstrong>非严格递增排列\u003C/strong> 的数组 \u003Ccode>nums\u003C/code> ，请你**\u003Ca href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\"> 原地\u003C/a>** 删除重复出现的元素，使每个元素 \u003Cstrong>只出现一次\u003C/strong> ，返回删除后数组的新长度。元素的 \u003Cstrong>相对顺序\u003C/strong> 应该保持 \u003Cstrong>一致\u003C/strong> 。然后返回 \u003Ccode>nums\u003C/code> 中唯一元素的个数。\u003C/p>\n\u003Cp>考虑 \u003Ccode>nums\u003C/code> 的唯一元素的数量为 \u003Ccode>k\u003C/code> ，你需要做以下事情确保你的题解可以被通过：\u003C/p>\n\u003Cul>\n\u003Cli>更改数组 \u003Ccode>nums\u003C/code> ，使 \u003Ccode>nums\u003C/code> 的前 \u003Ccode>k\u003C/code> 个元素包含唯一元素，并按照它们最初在 \u003Ccode>nums\u003C/code> 中出现的顺序排列。\u003Ccode>nums\u003C/code> 的其余元素与 \u003Ccode>nums\u003C/code> 的大小不重要。\u003C/li>\n\u003Cli>返回 \u003Ccode>k\u003C/code> 。\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>判题标准:\u003C/strong>\u003C/p>\n\u003Cp>系统会用下面的代码来测试你的题解:\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>int[] nums = [...]; // 输入数组\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>int[] expectedNums = [...]; // 长度正确的期望答案\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>int k = removeDuplicates(nums); // 调用\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>assert k == expectedNums.length;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>for (int i = 0; i &#x3C; k; i++) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    assert nums[i] == expectedNums[i];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>如果所有断言都通过，那么您的题解将被 \u003Cstrong>通过\u003C/strong>。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums = [1,1,2]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：2, nums = [1,2,_]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums = [0,0,1,1,1,2,2,3,3,4]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：5, nums = [0,1,2,3,4]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= nums.length &#x3C;= 3 * 104\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>-104 &#x3C;= nums[i] &#x3C;= 104\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>nums\u003C/code> 已按 \u003Cstrong>非严格递增\u003C/strong> 排列\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-2\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-2\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> removeDuplicates\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //特例，额外处理\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //有效数字\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    start \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ptr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; ptr\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums); ptr\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[ptr]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">nums[start]{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            start\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            nums[start] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[ptr]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> start\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"4删除有序数组的重复项ii\">4.删除有序数组的重复项II\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 4.删除有序数组的重复项II\" href=\"#4删除有序数组的重复项ii\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-3\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-3\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">80. 删除有序数组中的重复项 II\u003C/a>\u003C/p>\n\u003Cp>给你一个有序数组 \u003Ccode>nums\u003C/code> ，请你**\u003Ca href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\"> 原地\u003C/a>** 删除重复出现的元素，使得出现次数超过两次的元素\u003Cstrong>只出现两次\u003C/strong> ，返回删除后数组的新长度。\u003C/p>\n\u003Cp>不要使用额外的数组空间，你必须在 \u003Cstrong>\u003Ca href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">原地 \u003C/a>修改输入数组\u003C/strong> 并在使用 O(1) 额外空间的条件下完成。\u003C/p>\n\u003Cp>\u003Cstrong>说明：\u003C/strong>\u003C/p>\n\u003Cp>为什么返回数值是整数，但输出的答案是数组呢？\u003C/p>\n\u003Cp>请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\u003C/p>\n\u003Cp>你可以想象内部操作如下:\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>int len = removeDuplicates(nums);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>// 在函数里修改输入数组对于调用者是可见的。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>for (int i = 0; i &#x3C; len; i++) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    print(nums[i]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums = [1,1,1,2,2,3]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：5, nums = [1,1,2,2,3]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3。 不需要考虑数组中超出新长度后面的元素。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums = [0,0,1,1,1,1,2,3,3]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：7, nums = [0,0,1,1,2,3,3]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：函数应返回新长度 length = 7, 并且原数组的前七个元素被修改为 0, 0, 1, 1, 2, 3, 3。不需要考虑数组中超出新长度后面的元素。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= nums.length &#x3C;= 3 * 104\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>-104 &#x3C;= nums[i] &#x3C;= 104\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>nums\u003C/code> 已按升序排列\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-3\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-3\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>这题其实本质上和上一题相同，不过多解释\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> removeDuplicates\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    start \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ptr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; ptr\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums); ptr\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //这个对比的是start-1,不可以是ptr-2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[ptr] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[start\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            start\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            nums[start] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[ptr]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> start\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"5多数元素\">5.多数元素\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 5.多数元素\" href=\"#5多数元素\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-4\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-4\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/majority-element/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">169. 多数元素\u003C/a>\u003C/p>\n\u003Cp>给定一个大小为 \u003Ccode>n\u003C/code> 的数组 \u003Ccode>nums\u003C/code> ，返回其中的多数元素。多数元素是指在数组中出现次数 \u003Cstrong>大于\u003C/strong> \u003Ccode>⌊ n/2 ⌋\u003C/code> 的元素。\u003C/p>\n\u003Cp>你可以假设数组是非空的，并且给定的数组总是存在多数元素。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums = [3,2,3]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：3\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums = [2,2,1,1,1,2,2]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：2\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>n == nums.length\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>1 &#x3C;= n &#x3C;= 5 * 104\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>-109 &#x3C;= nums[i] &#x3C;= 109\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>**进阶：**尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。\u003C/p>\n\u003Ch2 id=\"题解-4\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-4\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>典型的思维题，解决方式也比较简单\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> majorityElement\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    count \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> _,val \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> range\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> val\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">res{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> val\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"6轮转数组\">6.轮转数组\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 6.轮转数组\" href=\"#6轮转数组\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-5\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-5\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/rotate-array/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">189. 轮转数组\u003C/a>\u003C/p>\n\u003Cp>给定一个整数数组 \u003Ccode>nums\u003C/code>，将数组中的元素向右轮转 \u003Ccode>k\u003C/code> 个位置，其中 \u003Ccode>k\u003C/code> 是非负数。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入: nums = [1,2,3,4,5,6,7], k = 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出: [5,6,7,1,2,3,4]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>向右轮转 1 步: [7,1,2,3,4,5,6]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>向右轮转 2 步: [6,7,1,2,3,4,5]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>向右轮转 3 步: [5,6,7,1,2,3,4]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums = [-1,-100,3,99], k = 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：[3,99,-1,-100]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释: \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>向右轮转 1 步: [99,-1,-100,3]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>向右轮转 2 步: [3,99,-1,-100]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= nums.length &#x3C;= 105\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>-231 &#x3C;= nums[i] &#x3C;= 231 - 1\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= k &#x3C;= 105\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>进阶：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>尽可能想出更多的解决方案，至少有 \u003Cstrong>三种\u003C/strong> 不同的方法可以解决这个问题。\u003C/li>\n\u003Cli>你可以使用空间复杂度为 \u003Ccode>O(1)\u003C/code> 的 \u003Cstrong>原地\u003C/strong> 算法解决这个问题吗？\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-5\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-5\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>其实这也是个思维题，我们可以尝试用呆板的方式解决，或者也可以用trick，这里两种题解都放一下\u003C/p>\n\u003Ch3 id=\"trick解法翻转数组\">Trick解法：翻转数组\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to Trick解法：翻转数组\" href=\"#trick解法翻转数组\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> reverse\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">start\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">end\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> start \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> end {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        nums[start], nums[end] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[end], nums[start]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        start\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        end\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> rotate\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">k\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    k \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">%\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">    reverse\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">    reverse\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,k\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">    reverse\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums,k,\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>写到这里其实已经很感觉出来go是个很简洁的语言了，主要感觉还是有一些库啥的不太熟练，比如我就不知道go有没有优先级队列\u003C/p>\n\u003Ch3 id=\"传统解法看似呆瓜实际全是技巧\">传统解法，看似呆瓜实际全是技巧\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 传统解法，看似呆瓜实际全是技巧\" href=\"#传统解法看似呆瓜实际全是技巧\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h3>\n\u003Cp>听我说，这种方法真的写起来很累，真的很累\u003C/p>\n\u003Cp>同时写到这里的时候，我发现一个问题\u003C/p>\n\u003Cp>\u003Cstrong>在 Go 中，\u003Ccode>:=\u003C/code> 是短变量声明操作符，用于在同一作用域内声明并初始化变量。Go 的设计允许在嵌套作用域（如循环块、条件块等）中重复使用 \u003Ccode>:=\u003C/code> 声明同名变量，但需要注意：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>在 Go 中，变量的作用域由其声明的位置决定。\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>如果在一个嵌套作用域（如循环体或条件块）中使用 \u003Ccode>:=\u003C/code> 声明一个与外部作用域同名的变量，则会屏蔽（shadow） 外部作用域中的变量。\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>当嵌套作用域结束时，屏蔽效果消失，外部作用域的变量重新可见。\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> rotate\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">k\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    k \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> k\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">%\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">n\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    start \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//记录安置好的元素个数\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    count \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//从第一个开始安置\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    ptr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> start\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        ptr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (ptr\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">k)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">%\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">n\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ptr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> start{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//第start圈循环的最后一个，安置到start位置\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">          \t//记得安置完数目+1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            start\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            ptr \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> start\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            continue\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        tmp \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[start]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        nums[start] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[ptr]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        nums[ptr] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tmp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        count\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"7买卖股票的最佳时机\">7.买卖股票的最佳时机\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 7.买卖股票的最佳时机\" href=\"#7买卖股票的最佳时机\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">121. 买卖股票的最佳时机\u003C/a>\u003C/p>\n\u003Ch2 id=\"题目描述-6\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-6\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>给定一个数组 \u003Ccode>prices\u003C/code> ，它的第 \u003Ccode>i\u003C/code> 个元素 \u003Ccode>prices[i]\u003C/code> 表示一支给定股票第 \u003Ccode>i\u003C/code> 天的价格。\u003C/p>\n\u003Cp>你只能选择 \u003Cstrong>某一天\u003C/strong> 买入这只股票，并选择在 \u003Cstrong>未来的某一个不同的日子\u003C/strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。\u003C/p>\n\u003Cp>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 \u003Ccode>0\u003C/code> 。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：[7,1,5,3,6,4]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：5\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：prices = [7,6,4,3,1]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：在这种情况下, 没有交易完成, 所以最大利润为 0。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= prices.length &#x3C;= 105\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= prices[i] &#x3C;= 104\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-6\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-6\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>经典题，go不提供Max的比较方式，同时，MaxInt、MinInt是在math包下\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> maxProfit\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">prices\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    preMin \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> math.MaxInt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> math.MinInt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> _,value \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> range\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> prices{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">preMin{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            preMin \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">value\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">preMin{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">preMin\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"8买卖股票的最佳时机ii\">8.买卖股票的最佳时机II\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 8.买卖股票的最佳时机II\" href=\"#8买卖股票的最佳时机ii\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-7\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-7\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">122. 买卖股票的最佳时机 II\u003C/a>\u003C/p>\n\u003Cp>给你一个整数数组 \u003Ccode>prices\u003C/code> ，其中 \u003Ccode>prices[i]\u003C/code> 表示某支股票第 \u003Ccode>i\u003C/code> 天的价格。\u003C/p>\n\u003Cp>在每一天，你可以决定是否购买和/或出售股票。你在任何时候 \u003Cstrong>最多\u003C/strong> 只能持有 \u003Cstrong>一股\u003C/strong> 股票。你也可以先购买，然后在 \u003Cstrong>同一天\u003C/strong> 出售。\u003C/p>\n\u003Cp>返回 \u003Cem>你能获得的 \u003Cstrong>最大\u003C/strong> 利润\u003C/em> 。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：prices = [7,1,5,3,6,4]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：7\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>最大总利润为 4 + 3 = 7 。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：prices = [1,2,3,4,5]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>最大总利润为 4 。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 3：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：prices = [7,6,4,3,1]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= prices.length &#x3C;= 3 * 104\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= prices[i] &#x3C;= 104\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-7\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-7\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>我不喜欢用贪心的思路去做，所以还是用dp做了\u003C/p>\n\u003Cp>注意go初始化二维切片的时候，第一次make其实只初始化了第一维\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> max\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">num1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">num2\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num1\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">num2 {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> maxProfit\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">prices\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //只初始化了第一维，每个子数组其实还是nil，第一次使用的时候要手动初始化\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    dp \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> make\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">([][]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(prices))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    dp[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> make\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">([]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    dp[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    dp[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">prices[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(prices); i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        dp[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> make\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">([]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        dp[i][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> max\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(dp[i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">], dp[i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> prices[i])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        dp[i][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> max\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(dp[i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">], dp[i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> prices[i])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> max\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(dp[i][\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">],res)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"9跳跃游戏\">9.跳跃游戏\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 9.跳跃游戏\" href=\"#9跳跃游戏\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-8\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-8\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/jump-game/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">55. 跳跃游戏\u003C/a>\u003C/p>\n\u003Cp>给你一个非负整数数组 \u003Ccode>nums\u003C/code> ，你最初位于数组的 \u003Cstrong>第一个下标\u003C/strong> 。数组中的每个元素代表你在该位置可以跳跃的最大长度。\u003C/p>\n\u003Cp>判断你是否能够到达最后一个下标，如果可以，返回 \u003Ccode>true\u003C/code> ；否则，返回 \u003Ccode>false\u003C/code> 。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums = [2,3,1,1,4]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：nums = [3,2,1,0,4]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= nums.length &#x3C;= 104\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= nums[i] &#x3C;= 105\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-8\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-8\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> canJump\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">bool\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    max \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; pre\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">max\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">pre\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums); pre\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[pre] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> max {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            max \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[pre]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> max\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"10跳跃游戏ii\">10.跳跃游戏II\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 10.跳跃游戏II\" href=\"#10跳跃游戏ii\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-9\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-9\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>给定一个长度为 \u003Ccode>n\u003C/code> 的 \u003Cstrong>0 索引\u003C/strong>整数数组 \u003Ccode>nums\u003C/code>。初始位置为 \u003Ccode>nums[0]\u003C/code>。\u003C/p>\n\u003Cp>每个元素 \u003Ccode>nums[i]\u003C/code> 表示从索引 \u003Ccode>i\u003C/code> 向后跳转的最大长度。换句话说，如果你在 \u003Ccode>nums[i]\u003C/code> 处，你可以跳转到任意 \u003Ccode>nums[i + j]\u003C/code> 处:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>0 &#x3C;= j &#x3C;= nums[i]\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>i + j &#x3C; n\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>返回到达 \u003Ccode>nums[n - 1]\u003C/code> 的最小跳跃次数。生成的测试用例可以到达 \u003Ccode>nums[n - 1]\u003C/code>。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入: nums = [2,3,1,1,4]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出: 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释: 跳到最后一个位置的最小跳跃数是 2。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入: nums = [2,3,0,1,4]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出: 2\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= nums.length &#x3C;= 104\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= nums[i] &#x3C;= 1000\u003C/code>\u003C/li>\n\u003Cli>题目保证可以到达 \u003Ccode>nums[n-1]\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-9\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-9\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>典型的dp问题了，不多说了\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> jump\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    end \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    maxPos \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> index, value \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> range\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> index \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> maxPos {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            maxPos \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> index \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> index \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> end \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> index\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            end \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> maxPos\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            res\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>看官解的思路很怪，这是我原本的思路\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"java\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">class\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Solution\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    public\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> jump\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[] \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res[] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=new\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[nums.length];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        res[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> j\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">nums.length;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            while\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums[j]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">j\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">i){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                j\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            res[i]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">res[j]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res[nums.length\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>再用go写一遍\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> jump\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    dp \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> make\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">([]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    dp[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    start \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums);i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> start\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">nums[start]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">i{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            start\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        dp[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dp[start]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> dp[\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"11h指数\">11.H指数\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 11.H指数\" href=\"#11h指数\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-10\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-10\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/h-index/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">274. H 指数\u003C/a>\u003C/p>\n\u003Cp>给你一个整数数组 \u003Ccode>citations\u003C/code> ，其中 \u003Ccode>citations[i]\u003C/code> 表示研究者的第 \u003Ccode>i\u003C/code> 篇论文被引用的次数。计算并返回该研究者的 \u003Cstrong>\u003Ccode>h\u003C/code> 指数\u003C/strong>。\u003C/p>\n\u003Cp>根据维基百科上 \u003Ca href=\"https://baike.baidu.com/item/h-index/3991452?fr=aladdin\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">h 指数的定义\u003C/a>：\u003Ccode>h\u003C/code> 代表“高引用次数” ，一名科研人员的 \u003Ccode>h\u003C/code> \u003Cstrong>指数\u003C/strong> 是指他（她）至少发表了 \u003Ccode>h\u003C/code> 篇论文，并且 \u003Cstrong>至少\u003C/strong> 有 \u003Ccode>h\u003C/code> 篇论文被引用次数大于等于 \u003Ccode>h\u003C/code> 。如果 \u003Ccode>h\u003C/code> 有多种可能的值，\u003Cstrong>\u003Ccode>h\u003C/code> 指数\u003C/strong> 是其中最大的那个。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：citations = [3,0,6,1,5]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：3 \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>     由于研究者有 3 篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：citations = [1,3,1]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：1 \u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>n == citations.length\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>1 &#x3C;= n &#x3C;= 5000\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= citations[i] &#x3C;= 1000\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-10\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-10\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>这题稍微要转个弯，有两种解法，首先是排序的思路\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> hIndex\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">citations\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    sort.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Slice\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(citations,\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">i\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">j\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">bool\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> citations[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> citations[j]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//当然也可以这么写\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//sort.Ints(citations)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">  \t//假设全部论文都满足引用大于n，然后从头开始删除\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    pre \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(citations)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> _, value \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> range\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> citations{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            pre\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>第二种思路，就是计数排序，但是需要创建额外的空间\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> min\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">num1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">num2\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num1\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">num2 {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> hIndex\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">citations\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    index \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> make\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">([]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(citations)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(citations)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> _,value \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> range\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> citations{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        index[\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">min\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(value,n)]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    sum \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">n; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        sum \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> index[i]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sum\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\t\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"12o1-时间插入删除和获取随机元素\">12.O(1) 时间插入、删除和获取随机元素\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 12.O(1) 时间插入、删除和获取随机元素\" href=\"#12o1-时间插入删除和获取随机元素\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-11\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-11\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/insert-delete-getrandom-o1/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">380. O(1) 时间插入、删除和获取随机元素\u003C/a>\u003C/p>\n\u003Cp>实现\u003Ccode>RandomizedSet\u003C/code> 类：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>RandomizedSet()\u003C/code> 初始化 \u003Ccode>RandomizedSet\u003C/code> 对象\u003C/li>\n\u003Cli>\u003Ccode>bool insert(int val)\u003C/code> 当元素 \u003Ccode>val\u003C/code> 不存在时，向集合中插入该项，并返回 \u003Ccode>true\u003C/code> ；否则，返回 \u003Ccode>false\u003C/code> 。\u003C/li>\n\u003Cli>\u003Ccode>bool remove(int val)\u003C/code> 当元素 \u003Ccode>val\u003C/code> 存在时，从集合中移除该项，并返回 \u003Ccode>true\u003C/code> ；否则，返回 \u003Ccode>false\u003C/code> 。\u003C/li>\n\u003Cli>\u003Ccode>int getRandom()\u003C/code> 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 \u003Cstrong>相同的概率\u003C/strong> 被返回。\u003C/li>\n\u003C/ul>\n\u003Cp>你必须实现类的所有函数，并满足每个函数的 \u003Cstrong>平均\u003C/strong> 时间复杂度为 \u003Ccode>O(1)\u003C/code> 。\u003C/p>\n\u003Cp>\u003Cstrong>示例：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>[[], [1], [2], [2], [], [1], [2], []]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>[null, true, false, true, 2, true, false, 2]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>RandomizedSet randomizedSet = new RandomizedSet();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>randomizedSet.insert(1); // 向集合中插入 1 。返回 true 表示 1 被成功地插入。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>randomizedSet.remove(2); // 返回 false ，表示集合中不存在 2 。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>randomizedSet.insert(2); // 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>randomizedSet.getRandom(); // getRandom 应随机返回 1 或 2 。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>randomizedSet.remove(1); // 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>randomizedSet.insert(2); // 2 已在集合中，所以返回 false 。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>randomizedSet.getRandom(); // 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>-231 &#x3C;= val &#x3C;= 231 - 1\u003C/code>\u003C/li>\n\u003Cli>最多调用 \u003Ccode>insert\u003C/code>、\u003Ccode>remove\u003C/code> 和 \u003Ccode>getRandom\u003C/code> 函数 \u003Ccode>2 * ``105\u003C/code> 次\u003C/li>\n\u003Cli>在调用 \u003Ccode>getRandom\u003C/code> 方法时，数据结构中 \u003Cstrong>至少存在一个\u003C/strong> 元素。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-11\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-11\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>其实这题还挺难的，首先是插入、删除操作要是O1的就得需要一个方法快速判断当前val值是否存在，如果存在在哪个位置，这点就需要我们使用一个map来实现。其次的删除O1，注意的是，数组的删除是无法做到O1的，所以我们只能采用尾部节点位置替换的思路来做。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">type\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> RandomizedSet\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> struct\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    nums []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    hash \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">map\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> Constructor\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">RandomizedSet\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> RandomizedSet\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{[]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{},\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">map\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{}}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">this \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">RandomizedSet\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Insert\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">val\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">bool\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> _, exist \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> this.hash[val]; exist {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    this.hash[val] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(this.nums)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    this.nums \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> append\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(this.nums, val)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">this \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">RandomizedSet\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Remove\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">val\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">bool\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value, exist \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> this.hash[val]; exist{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        lst \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(this.nums)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        this.nums[value] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> this.nums[lst]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        this.hash[this.nums[value]] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">        delete\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(this.hash, val)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        this.nums \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> this.nums[:lst]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">this \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">RandomizedSet\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">GetRandom\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> this.nums[rand.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Intn\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(this.nums))]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * Your RandomizedSet object will be instantiated and called as such:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * obj := Constructor();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * param_1 := obj.Insert(val);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * param_2 := obj.Remove(val);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> * param_3 := obj.GetRandom();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\"> */\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"13除自身以外数组的乘积\">13.除自身以外数组的乘积\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 13.除自身以外数组的乘积\" href=\"#13除自身以外数组的乘积\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-12\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-12\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/product-of-array-except-self/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">238. 除自身以外数组的乘积\u003C/a>\u003C/p>\n\u003Cp>给你一个整数数组 \u003Ccode>nums\u003C/code>，返回 数组 \u003Ccode>answer\u003C/code> ，其中 \u003Ccode>answer[i]\u003C/code> 等于 \u003Ccode>nums\u003C/code> 中除 \u003Ccode>nums[i]\u003C/code> 之外其余各元素的乘积 。\u003C/p>\n\u003Cp>题目数据 \u003Cstrong>保证\u003C/strong> 数组 \u003Ccode>nums\u003C/code>之中任意元素的全部前缀元素和后缀的乘积都在 \u003Cstrong>32 位\u003C/strong> 整数范围内。\u003C/p>\n\u003Cp>请 **不要使用除法，**且在 \u003Ccode>O(n)\u003C/code> 时间复杂度内完成此题。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入: nums = [1,2,3,4]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出: [24,12,8,6]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入: nums = [-1,1,0,-3,3]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出: [0,0,9,0,0]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>2 &#x3C;= nums.length &#x3C;= 105\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>-30 &#x3C;= nums[i] &#x3C;= 30\u003C/code>\u003C/li>\n\u003Cli>输入 \u003Cstrong>保证\u003C/strong> 数组 \u003Ccode>answer[i]\u003C/code> 在 \u003Cstrong>32 位\u003C/strong> 整数范围内\u003C/li>\n\u003C/ul>\n\u003Cp>**进阶：**你可以在 \u003Ccode>O(1)\u003C/code> 的额外空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组 \u003Cstrong>不被视为\u003C/strong> 额外空间。）\u003C/p>\n\u003Ch2 id=\"题解-12\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-12\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>笑了，这leetCode说的O(1)额外复杂度，意思是除了返回数组之外的，不让用除法就是两个list，分别是左边和右边的乘积\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> productExceptSelf\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">nums\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //返回数组，接下来我们用它来保存左边的乘积\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> make\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">([]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    res[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    pre \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums); i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        res[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        pre \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> pre \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[i]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //接下来修改原数组，用原数组保存右边的乘积\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    lst \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    nums[\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        tmp \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> lst\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        lst \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> lst \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[i]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">      \t//这里不能写lst/nums[i]的原因主要是可能/0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        nums[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> tmp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(nums); i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        res[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">*=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> nums[i]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"14加油站\">14.加油站\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 14.加油站\" href=\"#14加油站\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-13\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-13\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/gas-station/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">134. 加油站\u003C/a>\u003C/p>\n\u003Cp>在一条环路上有 \u003Ccode>n\u003C/code> 个加油站，其中第 \u003Ccode>i\u003C/code> 个加油站有汽油 \u003Ccode>gas[i]\u003C/code> 升。\u003C/p>\n\u003Cp>你有一辆油箱容量无限的的汽车，从第 \u003Ccode>i\u003C/code> 个加油站开往第 \u003Ccode>i+1\u003C/code> 个加油站需要消耗汽油 \u003Ccode>cost[i]\u003C/code> 升。你从其中的一个加油站出发，开始时油箱为空。\u003C/p>\n\u003Cp>给定两个整数数组 \u003Ccode>gas\u003C/code> 和 \u003Ccode>cost\u003C/code> ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 \u003Ccode>-1\u003C/code> 。如果存在解，则 \u003Cstrong>保证\u003C/strong> 它是 \u003Cstrong>唯一\u003C/strong> 的。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出: 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>因此，3 可为起始索引。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入: gas = [2,3,4], cost = [3,4,3]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出: -1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>因此，无论怎样，你都不可能绕环路行驶一周。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>gas.length == n\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>cost.length == n\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>1 &#x3C;= n &#x3C;= 105\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= gas[i], cost[i] &#x3C;= 104\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-13\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-13\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>这题其实问题在于如何剪枝，举个例子，如果从0出发醉多可以到达k，那么从0-k之内任何点出发，最多也只可以到达k，所以这时候下一个出发点就可以直接考虑k+1了\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> canCompleteCircuit\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">gas\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">cost\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //假设我们的起点是0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    start \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(gas)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> start\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">n {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        end \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> start\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        rest \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> gas[start]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //只要油还够，就能往前走了\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> rest\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cost[end]{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            rest \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> rest \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> cost[end] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> gas[(end\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">%\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">n]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            end \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> (end \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">%\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> n\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //如果到达起点，证明能环绕\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> end\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">start{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> start\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">        //如果到达点在起点前，就一定无法抵达了，因为从0到起点-1出发都是不不能环绕的，起点到n也是不能环绕的\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> end \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> start{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">            //更换剪枝后的新起点\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            start \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> end \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"15分发糖果\">15.分发糖果\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 15.分发糖果\" href=\"#15分发糖果\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-14\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-14\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/candy/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">135. 分发糖果\u003C/a>\u003C/p>\n\u003Cp>\u003Ccode>n\u003C/code> 个孩子站成一排。给你一个整数数组 \u003Ccode>ratings\u003C/code> 表示每个孩子的评分。\u003C/p>\n\u003Cp>你需要按照以下要求，给这些孩子分发糖果：\u003C/p>\n\u003Cul>\n\u003Cli>每个孩子至少分配到 \u003Ccode>1\u003C/code> 个糖果。\u003C/li>\n\u003Cli>相邻两个孩子评分更高的孩子会获得更多的糖果。\u003C/li>\n\u003C/ul>\n\u003Cp>请你给每个孩子分发糖果，计算并返回需要准备的 \u003Cstrong>最少糖果数目\u003C/strong> 。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：ratings = [1,0,2]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：5\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：你可以分别给第一个、第二个、第三个孩子分发 2、1、2 颗糖果。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：ratings = [1,2,2]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：你可以分别给第一个、第二个、第三个孩子分发 1、2、1 颗糖果。\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>     第三个孩子只得到 1 颗糖果，这满足题面中的两个条件。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>n == ratings.length\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>1 &#x3C;= n &#x3C;= 2 * 104\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= ratings[i] &#x3C;= 2 * 104\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-14\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-14\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>标准贪心，左边右边各贪一次\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> candy\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">ratings\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //我个人喜欢定义一个数组走两遍，而不是定义俩数组\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> make\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">([]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ratings))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    res[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ratings); i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ratings[i]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">ratings[i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            res[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res[i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            res[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    sum \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res[\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ratings)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(ratings)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ratings[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> ratings[i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res[i]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">res[i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            res[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res[i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        sum \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res[i]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sum\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"16接雨水\">16.接雨水\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 16.接雨水\" href=\"#16接雨水\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-15\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-15\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/trapping-rain-water/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">42. 接雨水\u003C/a>\u003C/p>\n\u003Cp>给定 \u003Ccode>n\u003C/code> 个非负整数表示每个宽度为 \u003Ccode>1\u003C/code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cfigure>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;inferSize&#x22;:true,&#x22;src&#x22;:&#x22;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png&#x22;,&#x22;alt&#x22;:&#x22;img&#x22;,&#x22;index&#x22;:0}\">\u003Cfigcaption>img\u003C/figcaption>\u003C/figure>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：6\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 \u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：height = [4,2,0,3,2,5]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：9\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>n == height.length\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>1 &#x3C;= n &#x3C;= 2 * 104\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= height[i] &#x3C;= 105\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-15\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-15\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>标准双指针问题\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> max\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">num1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">num2\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num1\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">num2{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> trap\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">height\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    left \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    right \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(height) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    leftMax \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    rightMax \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    sum \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> left\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">right {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> height[left]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">height[right]{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            leftMax \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> max\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(height[left],leftMax)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            sum \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> leftMax \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> height[left]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            left\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            rightMax \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> max\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(height[right],rightMax)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            sum \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> rightMax \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> height[right]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            right\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sum\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"17罗马数字转整数\">17.罗马数字转整数\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 17.罗马数字转整数\" href=\"#17罗马数字转整数\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-16\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-16\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>罗马数字包含以下七种字符: \u003Ccode>I\u003C/code>， \u003Ccode>V\u003C/code>， \u003Ccode>X\u003C/code>， \u003Ccode>L\u003C/code>，\u003Ccode>C\u003C/code>，\u003Ccode>D\u003C/code> 和 \u003Ccode>M\u003C/code>。\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>字符          数值\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>I             1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>V             5\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>X             10\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>L             50\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>C             100\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>D             500\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>M             1000\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>例如， 罗马数字 \u003Ccode>2\u003C/code> 写做 \u003Ccode>II\u003C/code> ，即为两个并列的 1 。\u003Ccode>12\u003C/code> 写做 \u003Ccode>XII\u003C/code> ，即为 \u003Ccode>X\u003C/code> + \u003Ccode>II\u003C/code> 。 \u003Ccode>27\u003C/code> 写做 \u003Ccode>XXVII\u003C/code>, 即为 \u003Ccode>XX\u003C/code> + \u003Ccode>V\u003C/code> + \u003Ccode>II\u003C/code> 。\u003C/p>\n\u003Cp>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 \u003Ccode>IIII\u003C/code>，而是 \u003Ccode>IV\u003C/code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 \u003Ccode>IX\u003C/code>。这个特殊的规则只适用于以下六种情况：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>I\u003C/code> 可以放在 \u003Ccode>V\u003C/code> (5) 和 \u003Ccode>X\u003C/code> (10) 的左边，来表示 4 和 9。\u003C/li>\n\u003Cli>\u003Ccode>X\u003C/code> 可以放在 \u003Ccode>L\u003C/code> (50) 和 \u003Ccode>C\u003C/code> (100) 的左边，来表示 40 和 90。\u003C/li>\n\u003Cli>\u003Ccode>C\u003C/code> 可以放在 \u003Ccode>D\u003C/code> (500) 和 \u003Ccode>M\u003C/code> (1000) 的左边，来表示 400 和 900。\u003C/li>\n\u003C/ul>\n\u003Cp>给定一个罗马数字，将其转换成整数。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入: s = \"III\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出: 3\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入: s = \"IV\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出: 4\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 3:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入: s = \"IX\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出: 9\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 4:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入: s = \"LVIII\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出: 58\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释: L = 50, V= 5, III = 3.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 5:\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入: s = \"MCMXCIV\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出: 1994\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释: M = 1000, CM = 900, XC = 90, IV = 4.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= s.length &#x3C;= 15\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>s\u003C/code> 仅含字符 \u003Ccode>('I', 'V', 'X', 'L', 'C', 'D', 'M')\u003C/code>\u003C/li>\n\u003Cli>题目数据保证 \u003Ccode>s\u003C/code> 是一个有效的罗马数字，且表示整数在范围 \u003Ccode>[1, 3999]\u003C/code> 内\u003C/li>\n\u003Cli>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。\u003C/li>\n\u003Cli>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。\u003C/li>\n\u003Cli>关于罗马数字的详尽书写规则，可以参考 \u003Ca href=\"https://baike.baidu.com/item/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/772296\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">罗马数字 - 百度百科\u003C/a>。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-16\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-16\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> romanToInt\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">s\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> map\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">byte\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">I\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">V\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">X\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">L\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">C\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">D\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">500\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">M\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    sum \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(s); i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(s)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            sum\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">res[s[i]]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            break\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res[s[i]]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">res[s[i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">]]{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            sum \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res[s[i]]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">else\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            sum \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res[s[i]]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> sum\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"18整数转罗马数字\">18.整数转罗马数字\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 18.整数转罗马数字\" href=\"#18整数转罗马数字\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-17\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-17\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/integer-to-roman/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">12. 整数转罗马数字\u003C/a>\u003C/p>\n\u003Cp>七个不同的符号代表罗马数字，其值如下：\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>符号\u003C/th>\u003Cth>值\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>I\u003C/td>\u003Ctd>1\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>V\u003C/td>\u003Ctd>5\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>X\u003C/td>\u003Ctd>10\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>L\u003C/td>\u003Ctd>50\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>C\u003C/td>\u003Ctd>100\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>D\u003C/td>\u003Ctd>500\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>M\u003C/td>\u003Ctd>1000\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>罗马数字是通过添加从最高到最低的小数位值的转换而形成的。将小数位值转换为罗马数字有以下规则：\u003C/p>\n\u003Cul>\n\u003Cli>如果该值不是以 4 或 9 开头，请选择可以从输入中减去的最大值的符号，将该符号附加到结果，减去其值，然后将其余部分转换为罗马数字。\u003C/li>\n\u003Cli>如果该值以 4 或 9 开头，使用 \u003Cstrong>减法形式\u003C/strong>，表示从以下符号中减去一个符号，例如 4 是 5 (\u003Ccode>V\u003C/code>) 减 1 (\u003Ccode>I\u003C/code>): \u003Ccode>IV\u003C/code> ，9 是 10 (\u003Ccode>X\u003C/code>) 减 1 (\u003Ccode>I\u003C/code>)：\u003Ccode>IX\u003C/code>。仅使用以下减法形式：4 (\u003Ccode>IV\u003C/code>)，9 (\u003Ccode>IX\u003C/code>)，40 (\u003Ccode>XL\u003C/code>)，90 (\u003Ccode>XC\u003C/code>)，400 (\u003Ccode>CD\u003C/code>) 和 900 (\u003Ccode>CM\u003C/code>)。\u003C/li>\n\u003Cli>只有 10 的次方（\u003Ccode>I\u003C/code>, \u003Ccode>X\u003C/code>, \u003Ccode>C\u003C/code>, \u003Ccode>M\u003C/code>）最多可以连续附加 3 次以代表 10 的倍数。你不能多次附加 5 (\u003Ccode>V\u003C/code>)，50 (\u003Ccode>L\u003C/code>) 或 500 (\u003Ccode>D\u003C/code>)。如果需要将符号附加4次，请使用 \u003Cstrong>减法形式\u003C/strong>。\u003C/li>\n\u003C/ul>\n\u003Cp>给定一个整数，将其转换为罗马数字。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cp>**输入：**num = 3749\u003C/p>\n\u003Cp>\u003Cstrong>输出：\u003C/strong> “MMMDCCXLIX”\u003C/p>\n\u003Cp>\u003Cstrong>解释：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>3000 = MMM 由于 1000 (M) + 1000 (M) + 1000 (M)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> 700 = DCC 由于 500 (D) + 100 (C) + 100 (C)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  40 = XL 由于 50 (L) 减 10 (X)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   9 = IX 由于 10 (X) 减 1 (I)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>注意：49 不是 50 (L) 减 1 (I) 因为转换是基于小数位\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cp>**输入：**num = 58\u003C/p>\n\u003Cp>\u003Cstrong>输出：\u003C/strong>“LVIII”\u003C/p>\n\u003Cp>\u003Cstrong>解释：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>50 = L\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> 8 = VIII\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 3：\u003C/strong>\u003C/p>\n\u003Cp>**输入：**num = 1994\u003C/p>\n\u003Cp>\u003Cstrong>输出：\u003C/strong>“MCMXCIV”\u003C/p>\n\u003Cp>\u003Cstrong>解释：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>1000 = M\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> 900 = CM\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  90 = XC\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>   4 = IV\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= num &#x3C;= 3999\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-17\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-17\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> intToRoman\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">num\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">string\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //说实话，感觉这个题目纯是逆天题目\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //但是还有个细节要讲，这里不能定义map来存对应关系\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //因为go的map底层是真无序，也不能说无序，是按照hash序\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //严格来说，要么定义两个数组，要么定义一个结构体数组\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        value \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        symbol \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }{{\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"M\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">900\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"CM\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">500\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"D\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">400\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"CD\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"C\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">90\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"XC\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"L\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">40\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"XL\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"X\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">9\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"IX\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"V\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"IV\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\"I\"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    str \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> _,st \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> range\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">st.value{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                num \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> st.value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">                str \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> st.symbol\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> str\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"19最后一个单词的长度\">19.最后一个单词的长度\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 19.最后一个单词的长度\" href=\"#19最后一个单词的长度\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-18\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-18\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/length-of-last-word/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">58. 最后一个单词的长度\u003C/a>\u003C/p>\n\u003Cp>给你一个字符串 \u003Ccode>s\u003C/code>，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 \u003Cstrong>最后一个\u003C/strong> 单词的长度。\u003C/p>\n\u003Cp>\u003Cstrong>单词\u003C/strong> 是指仅由字母组成、不包含任何空格字符的最大子字符串。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：s = \"Hello World\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：5\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：最后一个单词是“World”，长度为 5。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：s = \"   fly me   to   the moon  \"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：最后一个单词是“moon”，长度为 4。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 3：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：s = \"luffy is still joyboy\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：6\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：最后一个单词是长度为 6 的“joyboy”。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= s.length &#x3C;= 104\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>s\u003C/code> 仅有英文字母和空格 \u003Ccode>' '\u003C/code> 组成\u003C/li>\n\u003Cli>\u003Ccode>s\u003C/code> 中至少存在一个单词\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-18\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-18\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> lengthOfLastWord\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">s\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //这题其实是一个很简单的题，问题就是在于go有没有提供对string 的strip和slipt方法\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //strings包提供了一些操作，包括TrimSpace和Trim操作\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D;--shiki-dark:#6A737D\">    //同时strings也提供了Split方法\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    s \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> strings.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Trim\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(s, \u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" \"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    sSplit \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> strings.\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">Split\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(s,\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">\" \"\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sSplit)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(sSplit[n])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>当然其实这题的本意肯定不是调库，搓一下吧\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> lengthOfLastWord\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">s\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> string\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    start \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(s)\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> s[start]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">==\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> '\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        start\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    end \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> start\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> end\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">s[end]\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> '\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        end\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">--\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> start\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">-\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Ch1 id=\"20最长公共前缀\">20.最长公共前缀\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 20.最长公共前缀\" href=\"#20最长公共前缀\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h1>\n\u003Ch2 id=\"题目描述-19\">题目描述\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题目描述\" href=\"#题目描述-19\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://leetcode.cn/problems/longest-common-prefix/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">14. 最长公共前缀\u003C/a>\u003C/p>\n\u003Cp>编写一个函数来查找字符串数组中的最长公共前缀。\u003C/p>\n\u003Cp>如果不存在公共前缀，返回空字符串 \u003Ccode>\"\"\u003C/code>。\u003C/p>\n\u003Cp>\u003Cstrong>示例 1：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：strs = [\"flower\",\"flow\",\"flight\"]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：\"fl\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>示例 2：\u003C/strong>\u003C/p>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>输入：strs = [\"dog\",\"racecar\",\"car\"]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>输出：\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>解释：输入不存在公共前缀。\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003Cp>\u003Cstrong>提示：\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>1 &#x3C;= strs.length &#x3C;= 200\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>0 &#x3C;= strs[i].length &#x3C;= 200\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>strs[i]\u003C/code> 如果非空，则仅由小写英文字母组成\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"题解-19\">题解\u003Ca class=\"heading-anchor-link\" aria-label=\"Link to 题解\" href=\"#题解-19\">\u003Csvg viewBox=\"0 0 24 24\" aria-hidden=\"true\" fill=\"currentColor\">\u003Cpath d=\"M2.6 21.4c2 2 5.9 2.9 8.9 0l3.5-3.5-1-1-3.5 3.5c-1.4 1.4-4.2 1.9-6.4-.3s-1.8-5-.3-6.4l3.5-3.5-1-1-3.5 3.5c-3 3-2 6.9 0 8.9ZM21.4 2.6c2 2 2.9 5.9 0 8.9L17.9 15l-1-1 3.5-3.5c1.4-1.4 1.9-4.2-.3-6.4s-5-1.8-6.4-.3l-3.5 3.5-1-1 3.5-3.5c3-3 6.9-2 8.9 0Z\">\u003C/path>\u003Cpath d=\"m8.01 14.97 6.93-6.93 1.061 1.06-6.93 6.93z\">\u003C/path>\u003C/svg>\u003C/a>\u003C/h2>\n\u003Cdiv class=\"code-block-wrapper\">\u003Cbutton class=\"code-copy-button\" type=\"button\" aria-label=\"Copy code\">\u003C/button>\u003Cpre class=\"astro-code astro-code-themes github-light github-dark\" style=\"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\" data-copy-button-added=\"true\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> min\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">num1\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">num2\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">int\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num1 \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">>\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num2 {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> num1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">func\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> longestCommonPrefix\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#E36209;--shiki-dark:#FFAB70\">strs\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> []\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">string\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">string\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#032F62;--shiki-dark:#9ECBFF\"> \"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> math.MaxInt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> _, str \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> range\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> strs{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        n \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\"> min\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(n,\u003C/span>\u003Cspan style=\"color:#6F42C1;--shiki-dark:#B392F0\">len\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(str))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">n;i\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">++\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        b \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> strs[\u003C/span>\u003Cspan style=\"color:#005CC5;--shiki-dark:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">][i]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> _,str \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">:=\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\"> range\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> strs{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> str[i] \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> b{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">                return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">        res \u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">=\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">+\u003C/span>\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">string\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">(b)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#D73A49;--shiki-dark:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\"> res\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#24292E;--shiki-dark:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/div>",{"headings":625,"localImagePaths":768,"remoteImagePaths":769,"frontmatter":770,"imagePaths":776},[626,629,630,632,635,636,638,641,642,644,647,648,650,653,655,657,660,662,664,667,670,673,675,677,680,682,684,687,689,691,694,696,698,701,703,705,708,710,712,715,717,719,722,724,726,729,731,733,736,738,740,743,745,747,750,752,754,757,759,761,764,766],{"depth":25,"slug":627,"text":628},"1合并两个有序数组","1.合并两个有序数组",{"depth":118,"slug":203,"text":203},{"depth":118,"slug":631,"text":631},"题解",{"depth":25,"slug":633,"text":634},"2移动元素","2.移动元素",{"depth":118,"slug":395,"text":203},{"depth":118,"slug":637,"text":631},"题解-1",{"depth":25,"slug":639,"text":640},"3删除有序数组中的重复项","3.删除有序数组中的重复项",{"depth":118,"slug":402,"text":203},{"depth":118,"slug":643,"text":631},"题解-2",{"depth":25,"slug":645,"text":646},"4删除有序数组的重复项ii","4.删除有序数组的重复项II",{"depth":118,"slug":409,"text":203},{"depth":118,"slug":649,"text":631},"题解-3",{"depth":25,"slug":651,"text":652},"5多数元素","5.多数元素",{"depth":118,"slug":654,"text":203},"题目描述-4",{"depth":118,"slug":656,"text":631},"题解-4",{"depth":25,"slug":658,"text":659},"6轮转数组","6.轮转数组",{"depth":118,"slug":661,"text":203},"题目描述-5",{"depth":118,"slug":663,"text":631},"题解-5",{"depth":126,"slug":665,"text":666},"trick解法翻转数组","Trick解法：翻转数组",{"depth":126,"slug":668,"text":669},"传统解法看似呆瓜实际全是技巧","传统解法，看似呆瓜实际全是技巧",{"depth":25,"slug":671,"text":672},"7买卖股票的最佳时机","7.买卖股票的最佳时机",{"depth":118,"slug":674,"text":203},"题目描述-6",{"depth":118,"slug":676,"text":631},"题解-6",{"depth":25,"slug":678,"text":679},"8买卖股票的最佳时机ii","8.买卖股票的最佳时机II",{"depth":118,"slug":681,"text":203},"题目描述-7",{"depth":118,"slug":683,"text":631},"题解-7",{"depth":25,"slug":685,"text":686},"9跳跃游戏","9.跳跃游戏",{"depth":118,"slug":688,"text":203},"题目描述-8",{"depth":118,"slug":690,"text":631},"题解-8",{"depth":25,"slug":692,"text":693},"10跳跃游戏ii","10.跳跃游戏II",{"depth":118,"slug":695,"text":203},"题目描述-9",{"depth":118,"slug":697,"text":631},"题解-9",{"depth":25,"slug":699,"text":700},"11h指数","11.H指数",{"depth":118,"slug":702,"text":203},"题目描述-10",{"depth":118,"slug":704,"text":631},"题解-10",{"depth":25,"slug":706,"text":707},"12o1-时间插入删除和获取随机元素","12.O(1) 时间插入、删除和获取随机元素",{"depth":118,"slug":709,"text":203},"题目描述-11",{"depth":118,"slug":711,"text":631},"题解-11",{"depth":25,"slug":713,"text":714},"13除自身以外数组的乘积","13.除自身以外数组的乘积",{"depth":118,"slug":716,"text":203},"题目描述-12",{"depth":118,"slug":718,"text":631},"题解-12",{"depth":25,"slug":720,"text":721},"14加油站","14.加油站",{"depth":118,"slug":723,"text":203},"题目描述-13",{"depth":118,"slug":725,"text":631},"题解-13",{"depth":25,"slug":727,"text":728},"15分发糖果","15.分发糖果",{"depth":118,"slug":730,"text":203},"题目描述-14",{"depth":118,"slug":732,"text":631},"题解-14",{"depth":25,"slug":734,"text":735},"16接雨水","16.接雨水",{"depth":118,"slug":737,"text":203},"题目描述-15",{"depth":118,"slug":739,"text":631},"题解-15",{"depth":25,"slug":741,"text":742},"17罗马数字转整数","17.罗马数字转整数",{"depth":118,"slug":744,"text":203},"题目描述-16",{"depth":118,"slug":746,"text":631},"题解-16",{"depth":25,"slug":748,"text":749},"18整数转罗马数字","18.整数转罗马数字",{"depth":118,"slug":751,"text":203},"题目描述-17",{"depth":118,"slug":753,"text":631},"题解-17",{"depth":25,"slug":755,"text":756},"19最后一个单词的长度","19.最后一个单词的长度",{"depth":118,"slug":758,"text":203},"题目描述-18",{"depth":118,"slug":760,"text":631},"题解-18",{"depth":25,"slug":762,"text":763},"20最长公共前缀","20.最长公共前缀",{"depth":118,"slug":765,"text":203},"题目描述-19",{"depth":118,"slug":767,"text":631},"题解-19",[],[620],{"title":611,"tags":771,"categories":772,"mathjax":105,"published":774,"abbrlink":616,"description":613,"minutes":775},[615],[773],"学习笔记",["Date","2025-04-25T19:51:06.000Z"],42,[620]]